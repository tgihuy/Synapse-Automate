<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AdvancedSharpAdbClient</name>
    </assembly>
    <members>
        <member name="T:AdvancedSharpAdbClient.AdbClient">
            <summary>
            <para>Implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface, and allows you to interact with the
            adb server and devices that are connected to that adb server.</para>
            <para>For example, to fetch a list of all devices that are currently connected to this PC, you can
            call the <see cref="M:AdvancedSharpAdbClient.AdbClient.GetDevices"/> method.</para>
            <para>To run a command on a device, you can use the <see cref="M:AdvancedSharpAdbClient.AdbClient.ExecuteRemoteCommand(System.String,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding)"/>
            method.</para>
            </summary>
            <remarks>
            <para><seealso href="https://github.com/android/platform_system_core/blob/master/adb/SERVICES.TXT">SERVICES.TXT</seealso></para>
            <para><seealso href="https://github.com/android/platform_system_core/blob/master/adb/adb_client.c">adb_client.c</seealso></para>
            <para><seealso href="https://github.com/android/platform_system_core/blob/master/adb/adb.c">adb.c</seealso></para>
            </remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.GetAdbVersionAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.KillAdbAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.GetDevicesAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.CreateForwardAsync(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.CreateReverseForwardAsync(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.RemoveReverseForwardAsync(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.RemoveAllReverseForwardsAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.RemoveForwardAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.RemoveAllForwardsAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ListForwardAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ListReverseForwardAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ExecuteServerCommandAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ExecuteServerCommandAsync(System.String,System.String,AdvancedSharpAdbClient.IAdbSocket,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ExecuteRemoteCommandAsync(System.String,AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ExecuteServerCommandAsync(System.String,System.String,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ExecuteServerCommandAsync(System.String,System.String,AdvancedSharpAdbClient.IAdbSocket,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ExecuteRemoteCommandAsync(System.String,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.RunLogServiceAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Action{AdvancedSharpAdbClient.Logs.LogEntry},System.Threading.CancellationToken,AdvancedSharpAdbClient.Logs.LogId[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.GetFrameBufferAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.RebootAsync(System.String,AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.PairAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ConnectAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.DisconnectAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.RootAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.UnrootAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.RootAsync(System.String,AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Restarts the ADB daemon running on the device with or without root privileges.
            </summary>
            <param name="request">The command of root or unroot.</param>
            <param name="device">The device on which to restart ADB with root privileges.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.InstallAsync(AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.InstallMultipleAsync(AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.Collections.Generic.IEnumerable{System.IO.Stream},System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.InstallMultipleAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Collections.Generic.IEnumerable{System.IO.Stream},System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.InstallCreateAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.InstallCreateAsync(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.InstallWriteAsync(AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.String,System.String,System.Action{System.Double},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.InstallWriteAsync(AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.String,System.String,System.Action{System.String,System.Double},System.Threading.CancellationToken)">
            <summary>
            Asynchronously write an apk into the given install session.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="apk">A <see cref="T:System.IO.Stream"/> which represents the application to install.</param>
            <param name="apkName">The name of the application.</param>
            <param name="session">The session ID of the install session.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as a value between 0 and 100, representing the percentage of the apk which has been transferred.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.InstallCommitAsync(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.UninstallAsync(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.GetFeatureSetAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbClient.separator">
            <summary>
            The <see cref="T:System.Array"/> of <see cref="T:System.Char"/>s that represent a new line.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbClient.DefaultPort">
            <summary>
            The default port to use when connecting to a device over TCP/IP.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbClient.DefaultAdbServerPort">
            <summary>
            The port at which the Android Debug Bridge server listens by default.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbClient.AdbSocketFactory">
            <summary>
            The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbClient"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.#ctor(System.Net.EndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbClient"/> class.
            </summary>
            <param name="endPoint">The <see cref="T:System.Net.EndPoint"/> at which the adb server is listening.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbClient"/> class.
            </summary>
            <param name="host">The host address at which the adb server is listening.</param>
            <param name="port">The port at which the adb server is listening.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.#ctor(System.Net.EndPoint,System.Func{System.Net.EndPoint,AdvancedSharpAdbClient.IAdbSocket})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbClient"/> class.
            </summary>
            <param name="endPoint">The <see cref="T:System.Net.EndPoint"/> at which the adb server is listening.</param>
            <param name="adbSocketFactory">The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.#ctor(System.String,System.Int32,System.Func{System.Net.EndPoint,AdvancedSharpAdbClient.IAdbSocket})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbClient"/> class.
            </summary>
            <param name="host">The host address at which the adb server is listening.</param>
            <param name="port">The port at which the adb server is listening.</param>
            <param name="adbSocketFactory">The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.#ctor(System.Func{System.Net.EndPoint,AdvancedSharpAdbClient.IAdbSocket})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbClient"/> class.
            </summary>
            <param name="adbSocketFactory">The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.AdbClient.Instance">
            <summary>
            Gets a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbClient"/> class.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.AdbClient.Encoding">
            <summary>
            Gets or sets default encoding.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.AdbClient.AdbServerPort">
            <summary>
            Gets the current port at which the Android Debug Bridge server listens.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.AdbClient.DefaultEndPoint">
            <summary>
            Gets the default <see cref="T:System.Net.IPEndPoint"/> which to use when connecting to a device over TCP/IP.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.AdbClient.AdbServerEndPoint">
            <summary>
            Gets the <see cref="T:System.Net.IPEndPoint"/> at which the Android Debug Bridge server listens by default.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.AdbClient.EndPoint">
            <summary>
            Gets the <see cref="T:System.Net.EndPoint"/> at which the adb server is listening.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.FormAdbRequest(System.String)">
            <summary>
            Create an ASCII string preceded by four hex digits. The opening "####"
            is the length of the rest of the string, encoded as ASCII hex(case
            doesn't matter).
            </summary>
            <param name="req">The request to form.</param>
            <returns>An array containing <c>####req</c>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.CreateAdbForwardRequest(System.String,System.Int32)">
            <summary>
            Creates the adb forward request.
            </summary>
            <param name="address">The address.</param>
            <param name="port">The port.</param>
            <returns>This returns an array containing <c>"####tcp:{port}:{addStr}"</c>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.GetAdbVersion">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.KillAdb">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.GetDevices">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.CreateForward(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.CreateReverseForward(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.RemoveReverseForward(AdvancedSharpAdbClient.Models.DeviceData,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.RemoveAllReverseForwards(AdvancedSharpAdbClient.Models.DeviceData)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.RemoveForward(AdvancedSharpAdbClient.Models.DeviceData,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.RemoveAllForwards(AdvancedSharpAdbClient.Models.DeviceData)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ListForward(AdvancedSharpAdbClient.Models.DeviceData)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ListReverseForward(AdvancedSharpAdbClient.Models.DeviceData)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ExecuteServerCommand(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ExecuteServerCommand(System.String,System.String,AdvancedSharpAdbClient.IAdbSocket)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ExecuteRemoteCommand(System.String,AdvancedSharpAdbClient.Models.DeviceData)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ExecuteServerCommand(System.String,System.String,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ExecuteServerCommand(System.String,System.String,AdvancedSharpAdbClient.IAdbSocket,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ExecuteRemoteCommand(System.String,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ExecuteServerEnumerable(System.String,System.String,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ExecuteServerEnumerable(System.String,System.String,AdvancedSharpAdbClient.IAdbSocket,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ExecuteRemoteEnumerable(System.String,AdvancedSharpAdbClient.Models.DeviceData,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.RunLogService(AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Logs.LogId[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.RunLogService(AdvancedSharpAdbClient.Models.DeviceData,System.Action{AdvancedSharpAdbClient.Logs.LogEntry},System.Boolean@,AdvancedSharpAdbClient.Logs.LogId[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.CreateFramebuffer(AdvancedSharpAdbClient.Models.DeviceData)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.GetFrameBuffer(AdvancedSharpAdbClient.Models.DeviceData)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.Reboot(System.String,AdvancedSharpAdbClient.Models.DeviceData)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.Pair(System.String,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.Connect(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.Disconnect(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.Root(AdvancedSharpAdbClient.Models.DeviceData)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.Unroot(AdvancedSharpAdbClient.Models.DeviceData)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.Root(System.String,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Restarts the ADB daemon running on the device with or without root privileges.
            </summary>
            <param name="request">The command of root or unroot.</param>
            <param name="device">The device on which to restart ADB with root privileges.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.Install(AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.InstallMultiple(AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.Collections.Generic.IEnumerable{System.IO.Stream},System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.InstallMultiple(AdvancedSharpAdbClient.Models.DeviceData,System.Collections.Generic.IEnumerable{System.IO.Stream},System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.InstallCreate(AdvancedSharpAdbClient.Models.DeviceData,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.InstallCreate(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.InstallWrite(AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.String,System.String,System.Action{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.InstallWrite(AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.String,System.String,System.Action{System.String,System.Double})">
            <summary>
            Write an apk into the given install session.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="apk">A <see cref="T:System.IO.Stream"/> which represents the application to install.</param>
            <param name="apkName">The name of the application.</param>
            <param name="session">The session ID of the install session.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications. The progress is reported as a value between 0 and 100, representing the percentage of the apk which has been transferred.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.InstallCommit(AdvancedSharpAdbClient.Models.DeviceData,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.Uninstall(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.GetFeatureSet(AdvancedSharpAdbClient.Models.DeviceData)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.CreateAdbSocket">
            <summary>
            Creates a new <see cref="T:AdvancedSharpAdbClient.AdbClient"/> object with the specified <see cref="P:AdvancedSharpAdbClient.AdbClient.EndPoint"/>.
            </summary>
            <returns>A new <see cref="T:AdvancedSharpAdbClient.AdbClient"/> object with the specified <see cref="P:AdvancedSharpAdbClient.AdbClient.EndPoint"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.Clone(System.Net.EndPoint)">
            <summary>
            Creates a new <see cref="T:AdvancedSharpAdbClient.AdbClient"/> object that is a copy of the current instance with new <see cref="P:AdvancedSharpAdbClient.AdbClient.EndPoint"/>.
            </summary>
            <param name="endPoint">The new <see cref="P:AdvancedSharpAdbClient.AdbClient.EndPoint"/> to use.</param>
            <returns>A new <see cref="T:AdvancedSharpAdbClient.AdbClient"/> object that is a copy of this instance with new <see cref="P:AdvancedSharpAdbClient.AdbClient.EndPoint"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.Clone">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.SetEncoding(System.Text.Encoding)">
            <summary>
            Sets default encoding (default - UTF8).
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to set.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.EnsureDevice(AdvancedSharpAdbClient.Models.DeviceData@,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="device"/> does not have a valid serial number.
            </summary>
            <param name="device">A <see cref="T:AdvancedSharpAdbClient.Models.DeviceData"/> object to validate.</param>
            <param name="paramName">The name of the parameter with which <paramref name="device"/> corresponds.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="device"/> does not have a valid serial number.</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClient.TryGetEnvironmentVariable(System.String)">
            <summary>
            Retrieves the value of an environment variable from the current process.
            </summary>
            <param name="variable">The name of the environment variable.</param>
            <returns>The value of the environment variable specified by <paramref name="variable"/>,
            or <see langword="null"/> if the environment variable is not found.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.AdvancedAdbClient">
            <summary>
            See as the <see cref="T:AdvancedSharpAdbClient.AdbClient"/> class.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.AdbCommandLineClient">
            <summary>
            Provides methods for interacting with the <c>adb.exe</c> command line client.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.GetVersionAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.ExecuteAdbCommandAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.StartServerAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.CheckAdbFileExistsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.RunAdbProcessAsync(System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously runs the <c>adb.exe</c> process, invoking a specific <paramref name="command"/>,
            and reads the standard output and standard error output.
            </summary>
            <param name="command">The <c>adb.exe</c> command to invoke, such as <c>version</c> or <c>start-server</c>.</param>
            <param name="errorOutput">A list in which to store the standard error output. Each line is added as a new entry.
            This value can be <see langword="null"/> if you are not interested in the standard error.</param>
            <param name="standardOutput">A list in which to store the standard output. Each line is added as a new entry.
            This value can be <see langword="null"/> if you are not interested in the standard output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
            <remarks>Use this command only for <c>adb</c> commands that return immediately, such as <c>adb version</c>.</remarks>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">The process exited with an exit code other than <c>0</c>.</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.RunAdbProcessInnerAsync(System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously runs the <c>adb.exe</c> process, invoking a specific <paramref name="command"/>,
            and reads the standard output and standard error output.
            </summary>
            <param name="command">The <c>adb.exe</c> command to invoke, such as <c>version</c> or <c>start-server</c>.</param>
            <param name="errorOutput">A list in which to store the standard error output. Each line is added as a new entry.
            This value can be <see langword="null"/> if you are not interested in the standard error.</param>
            <param name="standardOutput">A list in which to store the standard output. Each line is added as a new entry.
            This value can be <see langword="null"/> if you are not interested in the standard output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the return code of the <c>adb</c> process.</returns>
            <remarks>Use this command only for <c>adb</c> commands that return immediately, such as <c>adb version</c>.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.RunProcessAsync(System.String,System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously runs process, invoking a specific command, and reads the standard output and standard error output.
            </summary>
            <param name="filename">The filename of the process to start.</param>
            <param name="command">The command to invoke, such as <c>version</c> or <c>start-server</c>.</param>
            <param name="errorOutput">A list in which to store the standard error output. Each line is added as a new entry.
            This value can be <see langword="null"/> if you are not interested in the standard error.</param>
            <param name="standardOutput">A list in which to store the standard output. Each line is added as a new entry.
            This value can be <see langword="null"/> if you are not interested in the standard output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the return code of the process.</returns>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbCommandLineClient.separator">
            <summary>
            The <see cref="T:System.Array"/> of <see cref="T:System.Char"/>s that represent a new line.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbCommandLineClient.logger">
            <summary>
            The logger to use when logging messages.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.#ctor(System.String,System.Boolean,AdvancedSharpAdbClient.Logs.ILogger{AdvancedSharpAdbClient.AdbCommandLineClient})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbCommandLineClient"/> class.
            </summary>
            <param name="adbPath">The path to the <c>adb.exe</c> executable.</param>
            <param name="isForce">Doesn't check adb file when <see langword="true"/>.</param>
            <param name="logger">The logger to use when logging.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.AdbCommandLineClient.AdbPath">
            <summary>
            Gets the path to the <c>adb.exe</c> executable.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.GetVersion">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.StartServer(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.ExecuteAdbCommand(System.String,System.Int32)">
            <inheritdoc/>
            <remarks>Use this command only for <c>adb</c> commands that return immediately, such as
            <c>adb version</c>. This operation times out after 5 seconds.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.CheckAdbFileExists(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.EnsureIsValidAdbFile(System.String)">
            <summary>
            Throws an error if the path does not point to a valid instance of <c>adb.exe</c>.
            </summary>
            <param name="adbPath">The path to validate.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.RunAdbProcess(System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Int32)">
            <summary>
            Runs the <c>adb.exe</c> process, invoking a specific <paramref name="command"/>,
            and reads the standard output and standard error output.
            </summary>
            <param name="command">The <c>adb.exe</c> command to invoke, such as <c>version</c> or <c>start-server</c>.</param>
            <param name="errorOutput">A list in which to store the standard error output. Each line is added as a new entry.
            This value can be <see langword="null"/> if you are not interested in the standard error.</param>
            <param name="standardOutput">A list in which to store the standard output. Each line is added as a new entry.
            This value can be <see langword="null"/> if you are not interested in the standard output.</param>
            <param name="timeout">The timeout in milliseconds to wait for the <c>adb</c> process to exit.</param>
            <remarks>Use this command only for <c>adb</c> commands that return immediately, such as
            <c>adb version</c>. This operation times out after 5 seconds in default.</remarks>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">The process exited with an exit code other than <c>0</c>.</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.RunAdbProcessInner(System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Int32)">
            <summary>
            Runs the <c>adb.exe</c> process, invoking a specific <paramref name="command"/>,
            and reads the standard output and standard error output.
            </summary>
            <param name="command">The <c>adb.exe</c> command to invoke, such as <c>version</c> or <c>start-server</c>.</param>
            <param name="errorOutput">A list in which to store the standard error output. Each line is added as a new entry.
            This value can be <see langword="null"/> if you are not interested in the standard error.</param>
            <param name="standardOutput">A list in which to store the standard output. Each line is added as a new entry.
            This value can be <see langword="null"/> if you are not interested in the standard output.</param>
            <param name="timeout">The timeout in milliseconds to wait for the <c>adb</c> process to exit.</param>
            <returns>The return code of the <c>adb</c> process.</returns>
            <remarks>Use this command only for <c>adb</c> commands that return immediately, such as
            <c>adb version</c>. This operation times out after 5 seconds in default.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.KillProcess(System.String)">
            <summary>
            Kills all processes with the specified name.
            </summary>
            <param name="processName">The name of the process to kill. </param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbCommandLineClient.RunProcess(System.String,System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Int32)">
            <summary>
            Runs process, invoking a specific command, and reads the standard output and standard error output.
            </summary>
            <param name="filename">The filename of the process to start.</param>
            <param name="command">The command to invoke, such as <c>version</c> or <c>start-server</c>.</param>
            <param name="errorOutput">A list in which to store the standard error output. Each line is added as a new entry.
            This value can be <see langword="null"/> if you are not interested in the standard error.</param>
            <param name="standardOutput">A list in which to store the standard output. Each line is added as a new entry.
            This value can be <see langword="null"/> if you are not interested in the standard output.</param>
            <param name="timeout">The timeout in milliseconds to wait for the process to exit.</param>
            <returns>The return code of the process.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.AdbServer">
            <summary>
            <para>Provides methods for interacting with the adb server. The adb server must be running for
            the rest of the <c>Managed.Adb</c> library to work.</para>
            <para>The adb server is a background process that runs on the host machine.
            Its purpose if to sense the USB ports to know when devices are attached/removed,
            as well as when emulator instances start/stop. The ADB server is really one
            giant multiplexing loop whose purpose is to orchestrate the exchange of data
            between clients and devices.</para>
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.StartServerAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.RestartServerAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.RestartServerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.StopServerAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.GetStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbServer.RequiredAdbVersion">
            <summary>
            The minimum version of <c>adb.exe</c> that is supported by this library.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbServer.ConnectionRefused">
            <summary>
            The error code that is returned by the <see cref="T:System.Net.Sockets.SocketException"/> when the connection is refused.
            </summary>
            <remarks>No connection could be made because the target computer actively refused it.This usually
            results from trying to connect to a service that is inactive on the foreign host—that is,
            one with no server application running. <seealso href="https://msdn.microsoft.com/en-us/library/ms740668.aspx"/></remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbServer.ConnectionReset">
            <summary>
            The error code that is returned by the <see cref="T:System.Net.Sockets.SocketException"/> when the connection was reset by the peer.
            </summary>
            <remarks>An existing connection was forcibly closed by the remote host. This normally results if the peer application on the
            remote host is suddenly stopped, the host is rebooted, the host or remote network interface is disabled, or the remote
            host uses a hard close. This error may also result if a connection was broken due to keep-alive activity detecting
            a failure while one or more operations are in progress. <seealso href="https://msdn.microsoft.com/en-us/library/ms740668.aspx"/></remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbServer.AdbSocketFactory">
            <summary>
            The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbServer.AdbCommandLineClientFactory">
            <summary>
            Gets or sets a function that returns a new instance of a class that implements the
            <see cref="T:AdvancedSharpAdbClient.IAdbCommandLineClient"/> interface, that can be used to interact with the
            <c>adb.exe</c> command line client.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbServer"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.#ctor(AdvancedSharpAdbClient.IAdbClient)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbServer"/> class.
            </summary>
            <param name="adbClient">A connection to an adb server.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.#ctor(System.Net.EndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbServer"/> class.
            </summary>
            <param name="endPoint">The <see cref="T:System.Net.EndPoint"/> at which the adb server is listening.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbServer"/> class.
            </summary>
            <param name="host">The host address at which the adb server is listening.</param>
            <param name="port">The port at which the adb server is listening.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.#ctor(AdvancedSharpAdbClient.IAdbClient,System.Func{System.Net.EndPoint,AdvancedSharpAdbClient.IAdbSocket},System.Func{System.String,AdvancedSharpAdbClient.IAdbCommandLineClient})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbServer"/> class.
            </summary>
            <param name="adbClient">A connection to an adb server.</param>
            <param name="adbSocketFactory">The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>.</param>
            <param name="adbCommandLineClientFactory">The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbCommandLineClient"/>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.#ctor(System.Net.EndPoint,System.Func{System.Net.EndPoint,AdvancedSharpAdbClient.IAdbSocket},System.Func{System.String,AdvancedSharpAdbClient.IAdbCommandLineClient})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbServer"/> class.
            </summary>
            <param name="endPoint">The <see cref="T:System.Net.EndPoint"/> at which the adb server is listening.</param>
            <param name="adbSocketFactory">The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>.</param>
            <param name="adbCommandLineClientFactory">The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbCommandLineClient"/>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.#ctor(System.String,System.Int32,System.Func{System.Net.EndPoint,AdvancedSharpAdbClient.IAdbSocket},System.Func{System.String,AdvancedSharpAdbClient.IAdbCommandLineClient})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbServer"/> class.
            </summary>
            <param name="host">The host address at which the adb server is listening.</param>
            <param name="port">The port at which the adb server is listening.</param>
            <param name="adbSocketFactory">The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>.</param>
            <param name="adbCommandLineClientFactory">The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbCommandLineClient"/>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.#ctor(System.Func{System.Net.EndPoint,AdvancedSharpAdbClient.IAdbSocket},System.Func{System.String,AdvancedSharpAdbClient.IAdbCommandLineClient})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbServer"/> class.
            </summary>
            <param name="adbSocketFactory">The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>.</param>
            <param name="adbCommandLineClientFactory">The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbCommandLineClient"/>.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.AdbServer.Instance">
            <summary>
            Gets or sets the default instance of the <see cref="T:AdvancedSharpAdbClient.IAdbServer"/> interface.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.AdbServer.IsStarting">
            <summary>
            <see langword="true"/> if is starting adb server; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.AdbServer.CachedAdbPath">
            <summary>
            The path to the adb server. Cached from calls to <see cref="M:AdvancedSharpAdbClient.AdbServer.StartServer(System.String,System.Boolean)"/>. Used when restarting
            the server to figure out where adb is located.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.AdbServer.EndPoint">
            <summary>
            Gets the <see cref="T:System.Net.EndPoint"/> at which the adb server is listening.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.StartServer(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.RestartServer">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.RestartServer(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.StopServer">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.GetStatus">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.CreateAdbSocket">
            <summary>
            Creates a new <see cref="T:AdvancedSharpAdbClient.AdbClient"/> object with the specified <see cref="P:AdvancedSharpAdbClient.AdbServer.EndPoint"/>.
            </summary>
            <returns>A new <see cref="T:AdvancedSharpAdbClient.AdbClient"/> object with the specified <see cref="P:AdvancedSharpAdbClient.AdbServer.EndPoint"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.Clone(System.Net.EndPoint)">
            <summary>
            Creates a new <see cref="T:AdvancedSharpAdbClient.AdbServer"/> object that is a copy of the current instance with new <see cref="P:AdvancedSharpAdbClient.AdbServer.EndPoint"/>.
            </summary>
            <param name="endPoint">The new <see cref="P:AdvancedSharpAdbClient.AdbServer.EndPoint"/> to use.</param>
            <returns>A new <see cref="T:AdvancedSharpAdbClient.AdbServer"/> object that is a copy of this instance with new <see cref="P:AdvancedSharpAdbClient.AdbServer.EndPoint"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.Clone">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbServer.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.AdbSocket">
            <summary>
            <para>Implements a client for the Android Debug Bridge client-server protocol. Using the client, you
            can send messages to and receive messages from the Android Debug Bridge.</para>
            <para>The <see cref="T:AdvancedSharpAdbClient.AdbSocket"/> class implements the raw messaging protocol; that is,
            sending and receiving messages. For interacting with the services the Android Debug
            Bridge exposes, use the <see cref="T:AdvancedSharpAdbClient.AdbClient"/>.</para>
            <para>For more information about the protocol that is implemented here, see chapter
            II Protocol Details, section 1. Client &lt;-&gt;Server protocol at
            <see href="https://android.googlesource.com/platform/system/core/+/master/adb/OVERVIEW.TXT"/>.</para>
            </summary>
            <param name="socket">The <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/> at which the Android Debug Bridge is listening for clients.</param>
            <param name="logger">The logger to use when logging.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReconnectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reconnects the <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> to the same endpoint it was initially connected to.
            Use this when the socket was disconnected by adb and you have restarted adb.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReconnectAsync(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.SendAsync(System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.SendAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.SendAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.SendSyncRequestAsync(AdvancedSharpAdbClient.Models.SyncCommand,System.String,AdvancedSharpAdbClient.Models.UnixFileStatus,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.SendSyncRequestAsync(AdvancedSharpAdbClient.Models.SyncCommand,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.SendSyncRequestAsync(AdvancedSharpAdbClient.Models.SyncCommand,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.SendAdbRequestAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReadAsync(System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReadAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReadStringAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReadSyncStringAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReadSyncResponseAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReadAdbResponseAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.SetDeviceAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.WriteAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously write until all data in "data" is written or the connection fails or times out.
            </summary>
            <param name="data">The data to send.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns <see langword="true"/> if all data was written; otherwise, <see langword="false"/>.</returns>
            <remarks>This uses the default time out value.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReadAdbResponseInnerAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the response from ADB after a command.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns a <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/> that represents the response received from ADB.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.#ctor(AdvancedSharpAdbClient.ITcpSocket,AdvancedSharpAdbClient.Logs.ILogger{AdvancedSharpAdbClient.AdbSocket})">
            <summary>
            <para>Implements a client for the Android Debug Bridge client-server protocol. Using the client, you
            can send messages to and receive messages from the Android Debug Bridge.</para>
            <para>The <see cref="T:AdvancedSharpAdbClient.AdbSocket"/> class implements the raw messaging protocol; that is,
            sending and receiving messages. For interacting with the services the Android Debug
            Bridge exposes, use the <see cref="T:AdvancedSharpAdbClient.AdbClient"/>.</para>
            <para>For more information about the protocol that is implemented here, see chapter
            II Protocol Details, section 1. Client &lt;-&gt;Server protocol at
            <see href="https://android.googlesource.com/platform/system/core/+/master/adb/OVERVIEW.TXT"/>.</para>
            </summary>
            <param name="socket">The <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/> at which the Android Debug Bridge is listening for clients.</param>
            <param name="logger">The logger to use when logging.</param>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbSocket.logger">
            <summary>
            The logger to use when logging messages.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.#ctor(AdvancedSharpAdbClient.Logs.ILogger{AdvancedSharpAdbClient.AdbSocket})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbSocket"/> class.
            </summary>
            <param name="logger">The logger to use when logging.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.#ctor(System.Net.EndPoint,AdvancedSharpAdbClient.Logs.ILogger{AdvancedSharpAdbClient.AdbSocket})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbSocket"/> class.
            </summary>
            <param name="endPoint">The <see cref="T:System.Net.EndPoint"/> at which the Android Debug Bridge is listening for clients.</param>
            <param name="logger">The logger to use when logging.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.#ctor(System.String,System.Int32,AdvancedSharpAdbClient.Logs.ILogger{AdvancedSharpAdbClient.AdbSocket})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbSocket"/> class.
            </summary>
            <param name="host">The host address at which the Android Debug Bridge is listening for clients.</param>
            <param name="port">The port at which the Android Debug Bridge is listening for clients.</param>
            <param name="logger">The logger to use when logging.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.AdbSocket.ReceiveBufferSize">
            <summary>
            Gets or sets the size of the receive buffer
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.AdbSocket.WriteBufferSize">
            <summary>
            Gets or sets the size of the write buffer.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.AdbSocket.Socket">
            <summary>
            Gets the underlying TCP socket that manages the connection with the ADB server.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.IsOkay(System.Byte[])">
            <summary>
            Determines whether the specified reply is okay.
            </summary>
            <param name="reply">The reply.</param>
            <returns><see langword="true"/> if the specified reply is okay; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:AdvancedSharpAdbClient.AdbSocket.Connected">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.Reconnect(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.Send(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.Send(System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.Send(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.SendSyncRequest(AdvancedSharpAdbClient.Models.SyncCommand,System.String,AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.SendSyncRequest(AdvancedSharpAdbClient.Models.SyncCommand,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.SendSyncRequest(AdvancedSharpAdbClient.Models.SyncCommand,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.SendAdbRequest(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.Read(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.Read(System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReadString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReadSyncString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReadSyncResponse">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReadAdbResponse">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.GetShellStream">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.SetDevice(AdvancedSharpAdbClient.Models.DeviceData)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.Write(System.Byte[])">
            <summary>
            Write until all data in "data" is written or the connection fails or times out.
            </summary>
            <param name="data">The data to send.</param>
            <returns>Returns <see langword="true"/> if all data was written; otherwise, <see langword="false"/>.</returns>
            <remarks>This uses the default time out value.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReadAdbResponseInner">
            <summary>
            Reads the response from ADB after a command.
            </summary>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/> that represents the response received from ADB.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ReplyToString(System.Byte[])">
            <summary>
            Converts an ADB reply to a string.
            </summary>
            <param name="reply">A <see cref="T:System.Byte"/> array that represents the ADB reply.</param>
            <returns>A <see cref="T:System.String"/> that represents the ADB reply.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:AdvancedSharpAdbClient.AdbSocket"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.Close">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.Clone">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbSocket.CreateTcpSocket(System.Net.EndPoint)">
            <summary>
            Creates a new <see cref="T:AdvancedSharpAdbClient.TcpSocket"/> instance based on the specified <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <param name="endPoint">The <see cref="T:System.Net.EndPoint"/> at which the Android Debug Bridge is listening for clients.</param>
            <returns>The new <see cref="T:AdvancedSharpAdbClient.TcpSocket"/> instance.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.DeviceClient">
            <summary>
            A class which contains methods for interacting with an Android device by <see cref="M:AdvancedSharpAdbClient.IAdbClient.ExecuteRemoteCommand(System.String,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding)"/>
            </summary>
            <param name="AdbClient">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use to communicate with the Android Debug Bridge.</param>
            <param name="Device">The device on which to process command.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.DumpScreenStringAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the current device screen snapshot asynchronously.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns a <see cref="T:System.String"/> containing current hierarchy.
            Failed if start with <c>ERROR</c> or <c>java.lang.Exception</c>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.DumpScreenAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the current device screen snapshot asynchronously.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns a <see cref="T:System.Xml.XmlDocument"/> containing current hierarchy.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.ClickAsync(System.Drawing.Point,System.Threading.CancellationToken)">
            <summary>
            Clicks on the specified coordinates asynchronously.
            </summary>
            <param name="point">The <see cref="T:System.Drawing.Point"/> to click.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.ClickAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Clicks on the specified coordinates asynchronously.
            </summary>
            <param name="x">The X co-ordinate to click.</param>
            <param name="y">The Y co-ordinate to click.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.SwipeAsync(AdvancedSharpAdbClient.DeviceCommands.Models.Element,AdvancedSharpAdbClient.DeviceCommands.Models.Element,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Generates a swipe gesture from first element to second element asynchronously. Specify the speed in ms.
            </summary>
            <param name="first">The start element.</param>
            <param name="second">The end element.</param>
            <param name="speed">The time spent in swiping.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.SwipeAsync(System.Drawing.Point,System.Drawing.Point,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Generates a swipe gesture from first coordinates to second coordinates asynchronously. Specify the speed in ms.
            </summary>
            <param name="first">The start <see cref="T:System.Drawing.Point"/>.</param>
            <param name="second">The end <see cref="T:System.Drawing.Point"/>.</param>
            <param name="speed">The time spent in swiping.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.SwipeAsync(System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Generates a swipe gesture from co-ordinates [x1, y1] to [x2, y2] with speed asynchronously. Specify the speed in ms.
            </summary>
            <param name="x1">The start X co-ordinate.</param>
            <param name="y1">The start Y co-ordinate.</param>
            <param name="x2">The end X co-ordinate.</param>
            <param name="y2">The end Y co-ordinate.</param>
            <param name="speed">The time spent in swiping.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.IsAppRunningAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Check if the app is running in foreground asynchronously.
            </summary>
            <param name="packageName">The package name of the app to check.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the result. <see langword="true"/> if the app is running in foreground; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.IsAppInForegroundAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Check if the app is running in background asynchronously.
            </summary>
            <param name="packageName">The package name of the app to check.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the result. <see langword="true"/> if the app is running in background; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.GetAppStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:AdvancedSharpAdbClient.Models.AppStatus"/> of the app asynchronously.
            </summary>
            <param name="packageName">The package name of the app to check.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the <see cref="T:AdvancedSharpAdbClient.Models.AppStatus"/> of the app. Foreground, stopped or running in background.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.FindElementAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets element by xpath asynchronously. You can specify the waiting time in timeout.
            </summary>
            <param name="xpath">The xpath of the elements.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.
            Only check once if <see langword="default"/>. Or it will continue check until <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"/> is <see langword="true"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element"/> of <paramref name="xpath"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.FindElementsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets elements by xpath asynchronously. You can specify the waiting time in timeout.
            </summary>
            <param name="xpath">The xpath of the elements.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.
            Only check once if <see langword="default"/>. Or it will continue check until <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"/> is <see langword="true"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element"/> has got.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.SendKeyEventAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Send key event to specific asynchronously. You can see key events here https://developer.android.com/reference/android/view/KeyEvent.
            </summary>
            <param name="key">The key event to send.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.SendTextAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Send text to device asynchronously. Doesn't support Russian.
            </summary>
            <param name="text">The text to send.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.ClearInputAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously clear the input text. The input should be in focus. Use <see cref="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.ClearInputAsync(System.Int32,System.Threading.CancellationToken)"/>  if the element isn't focused.
            </summary>
            <param name="charCount">The length of text to clear.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.ClickBackButtonAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously click BACK button.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.ClickHomeButtonAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously click HOME button.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.StartAppAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Start an Android application on device asynchronously.
            </summary>
            <param name="packageName">The package name of the application to start.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.StopAppAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Stop an Android application on device asynchronously.
            </summary>
            <param name="packageName">The package name of the application to stop.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.#ctor(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            A class which contains methods for interacting with an Android device by <see cref="M:AdvancedSharpAdbClient.IAdbClient.ExecuteRemoteCommand(System.String,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding)"/>
            </summary>
            <param name="AdbClient">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use to communicate with the Android Debug Bridge.</param>
            <param name="Device">The device on which to process command.</param>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.adbClient">
            <summary>
            The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when communicating with the device.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.device">
            <summary>
            The device on which to process command.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.AdbClient">
            <summary>
            Gets the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when communicating with the device.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.Device">
            <summary>
            Gets the device on which to process command.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.DumpScreenString">
            <summary>
            Gets the current device screen snapshot.
            </summary>
            <returns>A <see cref="T:System.String"/> containing current hierarchy.
            Failed if start with <c>ERROR</c> or <c>java.lang.Exception</c>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.DumpScreen">
            <summary>
            Gets the current device screen snapshot.
            </summary>
            <returns>A <see cref="T:System.Xml.XmlDocument"/> containing current hierarchy.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.Click(System.Drawing.Point)">
            <summary>
            Clicks on the specified coordinates.
            </summary>
            <param name="point">The <see cref="T:System.Drawing.Point"/> to click.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.Click(System.Int32,System.Int32)">
            <summary>
            Clicks on the specified coordinates.
            </summary>
            <param name="x">The X co-ordinate to click.</param>
            <param name="y">The Y co-ordinate to click.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.Swipe(AdvancedSharpAdbClient.DeviceCommands.Models.Element,AdvancedSharpAdbClient.DeviceCommands.Models.Element,System.Int64)">
            <summary>
            Generates a swipe gesture from first element to second element. Specify the speed in ms.
            </summary>
            <param name="first">The start element.</param>
            <param name="second">The end element.</param>
            <param name="speed">The time spent in swiping.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.Swipe(System.Drawing.Point,System.Drawing.Point,System.Int64)">
            <summary>
            Generates a swipe gesture from first coordinates to second coordinates. Specify the speed in ms.
            </summary>
            <param name="first">The start <see cref="T:System.Drawing.Point"/>.</param>
            <param name="second">The end <see cref="T:System.Drawing.Point"/>.</param>
            <param name="speed">The time spent in swiping.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.Swipe(System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Generates a swipe gesture from co-ordinates [x1, y1] to [x2, y2] with speed. Specify the speed in ms.
            </summary>
            <param name="x1">The start X co-ordinate.</param>
            <param name="y1">The start Y co-ordinate.</param>
            <param name="x2">The end X co-ordinate.</param>
            <param name="y2">The end Y co-ordinate.</param>
            <param name="speed">The time spent in swiping.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.IsAppRunning(System.String)">
            <summary>
            Check if the app is running in foreground.
            </summary>
            <param name="packageName">The package name of the app to check.</param>
            <returns><see langword="true"/> if the app is running in foreground; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.IsAppInForeground(System.String)">
            <summary>
            Check if the app is running in background.
            </summary>
            <param name="packageName">The package name of the app to check.</param>
            <returns><see langword="true"/> if the app is running in background; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.GetAppStatus(System.String)">
            <summary>
            Gets the <see cref="T:AdvancedSharpAdbClient.Models.AppStatus"/> of the app.
            </summary>
            <param name="packageName">The package name of the app to check.</param>
            <returns>The <see cref="T:AdvancedSharpAdbClient.Models.AppStatus"/> of the app. Foreground, stopped or running in background.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.FindElement(System.String,System.TimeSpan)">
            <summary>
            Gets element by xpath. You can specify the waiting time in timeout.
            </summary>
            <param name="xpath">The xpath of the element.</param>
            <param name="timeout">The timeout for waiting the element.
            Only check once if <see langword="default"/> or <see cref="F:System.TimeSpan.Zero"/>.</param>
            <returns>The <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element"/> of <paramref name="xpath"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.FindElements(System.String,System.TimeSpan)">
            <summary>
            Gets elements by xpath. You can specify the waiting time in timeout.
            </summary>
            <param name="xpath">The xpath of the elements.</param>
            <param name="timeout">The timeout for waiting the elements.
            Only check once if <see langword="default"/> or <see cref="F:System.TimeSpan.Zero"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element"/> has got.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.SendKeyEvent(System.String)">
            <summary>
            Send key event to specific. You can see key events here https://developer.android.com/reference/android/view/KeyEvent.
            </summary>
            <param name="key">The key event to send.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.SendText(System.String)">
            <summary>
            Send text to device. Doesn't support Russian.
            </summary>
            <param name="text">The text to send.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.ClearInput(System.Int32)">
            <summary>
            Clear the input text. The input should be in focus. Use <see cref="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.ClearInput(System.Int32)"/> if the element isn't focused.
            </summary>
            <param name="charCount">The length of text to clear.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.ClickBackButton">
            <summary>
            Click BACK button.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.ClickHomeButton">
            <summary>
            Click HOME button.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.StartApp(System.String)">
            <summary>
            Start an Android application on device.
            </summary>
            <param name="packageName">The package name of the application to start.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.StopApp(System.String)">
            <summary>
            Stop an Android application on device.
            </summary>
            <param name="packageName">The package name of the application to stop.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.Deconstruct(AdvancedSharpAdbClient.IAdbClient@,AdvancedSharpAdbClient.Models.DeviceData@)">
            <summary>
            Deconstruct the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.DeviceClient"/> class.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use to communicate with the Android Debug Bridge.</param>
            <param name="device">The device on which to process command.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.AdvancedSharpAdbClient#Polyfills#ICloneable{AdvancedSharpAdbClient#DeviceCommands#DeviceClient}#Clone">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.GetXmlRegex">
            <summary>
            Gets a <see cref="T:System.Text.RegularExpressions.Regex"/> for parsing the xml.
            </summary>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> for parsing the xml.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions">
            <summary>
            Provides extension methods for the <see cref="T:AdvancedSharpAdbClient.Models.DeviceData"/> class,
            allowing you to run commands directory against a <see cref="T:AdvancedSharpAdbClient.Models.DeviceData"/> object.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.ExecuteShellCommandAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a shell command on the device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="command">The command to execute.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.ExecuteShellCommandAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a shell command on the device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="command">The command to execute.</param>
            <param name="receiver">Optionally, a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> that processes the command output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.ExecuteShellCommandAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Func{System.String,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a shell command on the device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="command">The command to execute.</param>
            <param name="predicate">Optionally, a <see cref="T:System.Func`2"/> that processes the command output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.DumpScreenAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets the current device screen snapshot asynchronously.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns a <see cref="T:System.Xml.XmlDocument"/> containing current hierarchy.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.ClickAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Drawing.Point,System.Threading.CancellationToken)">
            <summary>
            Asynchronously clicks on the specified coordinates.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="point">The <see cref="T:System.Drawing.Point"/> to click.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.SwipeAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Drawing.Point,System.Drawing.Point,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Asynchronously generates a swipe gesture from first coordinates to second coordinates. Specify the speed in ms.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="first">The start <see cref="T:System.Drawing.Point"/>.</param>
            <param name="second">The end <see cref="T:System.Drawing.Point"/>.</param>
            <param name="speed">The time spent in swiping.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.GetAppStatusAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the <see cref="T:AdvancedSharpAdbClient.Models.AppStatus"/> of the app.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="packageName">The package name of the app to check.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the <see cref="T:AdvancedSharpAdbClient.Models.AppStatus"/> of the app. Foreground, stopped or running in background.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.FindElementAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get element by xpath. You can specify the waiting time in timeout.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="xpath">The xpath of the elements.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.
            Only check once if <see langword="default"/>. Or it will continue check until <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"/> is <see langword="true"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element"/> of <paramref name="xpath"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.FindElementsAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get elements by xpath. You can specify the waiting time in timeout.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="xpath">The xpath of the elements.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.
            Only check once if <see langword="default"/>. Or it will continue check until <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"/> is <see langword="true"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element"/> has got.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.SendKeyEventAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously send key event to specific. You can see key events here https://developer.android.com/reference/android/view/KeyEvent.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="key">The key event to send.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.SendTextAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously send text to device. Doesn't support Russian.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="text">The text to send.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.ClearInputAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously clear the input text. The input should be in focus. Use <see cref="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.ClearInputAsync(System.Int32,System.Threading.CancellationToken)"/>  if the element isn't focused.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to clear the input text.</param>
            <param name="charCount">The length of text to clear.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.ClickBackButtonAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously click BACK button.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to click BACK button.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.ClickHomeButtonAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously click HOME button.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to click HOME button.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.StartAppAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously start an Android application on device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to click HOME button.</param>
            <param name="packageName">The package name of the application to start.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.StopAppAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously stop an Android application on device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to click HOME button.</param>
            <param name="packageName">The package name of the application to stop.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.PullAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.IO.Stream,System.Action{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Asynchronously pulls (downloads) a file from the remote device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to pull the file.</param>
            <param name="remotePath">The path, on the device, of the file to pull.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that will receive the contents of the file.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications. The progress is reported as a value between 0 and 100, representing the percentage of the file which has been transferred.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.PushAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.IO.Stream,AdvancedSharpAdbClient.Models.UnixFileStatus,System.DateTimeOffset,System.Action{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Asynchronously pushes (uploads) a file to the remote device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to put the file.</param>
            <param name="remotePath">The path, on the device, to which to push the file.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that contains the contents of the file.</param>
            <param name="permission">The <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/> that contains the permissions of the newly created file on the device.</param>
            <param name="timestamp">The time at which the file was last modified.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications. The progress is reported as a value between 0 and 100, representing the percentage of the file which has been transferred.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.StatAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets the file statistics of a given file.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to look for the file.</param>
            <param name="path">The path to the file.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns a <see cref="T:AdvancedSharpAdbClient.Models.FileStatistics"/> object that contains information about the file.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.GetDirectoryListingAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously lists the contents of a directory on the device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to list the directory.</param>
            <param name="remotePath">The path to the directory on the device.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns for each child item of the directory, a <see cref="T:AdvancedSharpAdbClient.Models.FileStatistics"/> object with information of the item.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.GetPropertyAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets the property of a device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device for which to get the property.</param>
            <param name="property">The name of property which to get.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the value of the property on the device.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.GetPropertiesAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets the properties of a device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device for which to list the properties.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns a dictionary containing the properties of the device, and their values.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.GetEnvironmentVariablesAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets the environment variables currently defined on a device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device for which to list the environment variables.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the a dictionary containing the environment variables of the device, and their values.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.InstallPackageAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs an Android application on device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="packageFilePath">The absolute file system path to file on local host to install.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>adb install</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.InstallMultiplePackageAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Collections.Generic.IEnumerable{System.String},System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs Android multiple application on device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="basePackageFilePath">The absolute base app file system path to file on local host to install.</param>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.InstallMultiplePackageAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Collections.Generic.IEnumerable{System.String},System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs Android multiple application on device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="packageName">The absolute package name of the base app.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.PullAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.IO.Stream,System.IProgress{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Asynchronously pulls (downloads) a file from the remote device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to pull the file.</param>
            <param name="remotePath">The path, on the device, of the file to pull.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that will receive the contents of the file.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications. The progress is reported as a value between 0 and 100, representing the percentage of the file which has been transferred.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.PushAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.IO.Stream,AdvancedSharpAdbClient.Models.UnixFileStatus,System.DateTimeOffset,System.IProgress{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Asynchronously pushes (uploads) a file to the remote device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to put the file.</param>
            <param name="remotePath">The path, on the device, to which to push the file.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that contains the contents of the file.</param>
            <param name="permission">The <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/> that contains the permissions of the newly created file on the device.</param>
            <param name="timestamp">The time at which the file was last modified.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications. The progress is reported as a value between 0 and 100, representing the percentage of the file which has been transferred.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.InstallPackageAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs an Android application on device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="packageFilePath">The absolute file system path to file on local host to install.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>adb install</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.InstallMultiplePackageAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Collections.Generic.IEnumerable{System.String},System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs Android multiple application on device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="basePackageFilePath">The absolute base app file system path to file on local host to install.</param>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.InstallMultiplePackageAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Collections.Generic.IEnumerable{System.String},System.String,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs Android multiple application on device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="packageName">The absolute package name of the base app.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.UninstallPackageAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String[])">
            <summary>
            Asynchronously uninstalls a package from the device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="packageName">The name of the package to uninstall.</param>
            <param name="arguments">The arguments to pass to <c>pm uninstall</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.UninstallPackageAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously uninstalls a package from the device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="packageName">The name of the package to uninstall.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm uninstall</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.GetPackageVersionAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously requests the version information from the device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="packageName">The name of the package from which to get the application version.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo"/> of target application.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.ListProcessesAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously lists all processes running on the device.
            </summary>
            <param name="client">A connection to ADB.</param>
            <param name="device">The device on which to list the processes that are running.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that will iterate over all processes
            that are currently running on the device.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.ExecuteShellCommand(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String)">
            <summary>
            Executes a shell command on the device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="command">The command to execute.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.ExecuteShellCommand(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver)">
            <summary>
            Executes a shell command on the device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="command">The command to execute.</param>
            <param name="receiver">Optionally, a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> that processes the command output.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.ExecuteShellCommand(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Executes a shell command on the device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="command">The command to execute.</param>
            <param name="predicate">Optionally, a <see cref="T:System.Func`2"/> that processes the command output.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.DumpScreen(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Gets the current device screen snapshot.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to clear the input text.</param>
            <returns>A <see cref="T:System.Xml.XmlDocument"/> containing current hierarchy.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.Click(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Drawing.Point)">
            <summary>
            Clicks on the specified coordinates.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to clear the input text.</param>
            <param name="point">The <see cref="T:System.Drawing.Point"/> to click.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.Swipe(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Drawing.Point,System.Drawing.Point,System.Int64)">
            <summary>
            Generates a swipe gesture from first coordinates to second coordinates. Specify the speed in ms.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to clear the input text.</param>
            <param name="first">The start <see cref="T:System.Drawing.Point"/>.</param>
            <param name="second">The end <see cref="T:System.Drawing.Point"/>.</param>
            <param name="speed">The time spent in swiping.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.GetAppStatus(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String)">
            <summary>
            Gets the <see cref="T:AdvancedSharpAdbClient.Models.AppStatus"/> of the app.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to clear the input text.</param>
            <param name="packageName">The package name of the app to check.</param>
            <returns>The <see cref="T:AdvancedSharpAdbClient.Models.AppStatus"/> of the app. Foreground, stopped or running in background.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.FindElement(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.TimeSpan)">
            <summary>
            Gets element by xpath. You can specify the waiting time in timeout.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to clear the input text.</param>
            <param name="xpath">The xpath of the element.</param>
            <param name="timeout">The timeout for waiting the element.
            Only check once if <see langword="default"/> or <see cref="F:System.TimeSpan.Zero"/>.</param>
            <returns>The <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element"/> of <paramref name="xpath"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.FindElements(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.TimeSpan)">
            <summary>
            Gets elements by xpath. You can specify the waiting time in timeout.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to clear the input text.</param>
            <param name="xpath">The xpath of the elements.</param>
            <param name="timeout">The timeout for waiting the elements.
            Only check once if <see langword="default"/> or <see cref="F:System.TimeSpan.Zero"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element"/> has got.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.SendKeyEvent(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String)">
            <summary>
            Send key event to specific. You can see key events here https://developer.android.com/reference/android/view/KeyEvent.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to clear the input text.</param>
            <param name="key">The key event to send.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.SendText(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String)">
            <summary>
            Send text to device. Doesn't support Russian.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to clear the input text.</param>
            <param name="text">The text to send.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.ClearInput(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Int32)">
            <summary>
            Clear the input text. The input should be in focus. Use <see cref="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.ClearInput(System.Int32)"/> if the element isn't focused.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to clear the input text.</param>
            <param name="charCount">The length of text to clear.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.ClickBackButton(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Click BACK button.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to click BACK button.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.ClickHomeButton(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Click HOME button.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to click HOME button.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.StartApp(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String)">
            <summary>
            Start an Android application on device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to click HOME button.</param>
            <param name="packageName">The package name of the application to start.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.StopApp(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String)">
            <summary>
            Stop an Android application on device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to click HOME button.</param>
            <param name="packageName">The package name of the application to stop.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.Pull(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.IO.Stream,System.Action{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Boolean@)">
            <summary>
            Pulls (downloads) a file from the remote device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to pull the file.</param>
            <param name="remotePath">The path, on the device, of the file to pull.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that will receive the contents of the file.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications. The progress is reported as a value between 0 and 100, representing the percentage of the file which has been transferred.</param>
            <param name="isCancelled">A <see cref="T:System.Boolean"/> that can be used to cancel the task.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.Push(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.IO.Stream,AdvancedSharpAdbClient.Models.UnixFileStatus,System.DateTimeOffset,System.Action{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Boolean@)">
            <summary>
            Pushes (uploads) a file to the remote device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to put the file.</param>
            <param name="remotePath">The path, on the device, to which to push the file.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that contains the contents of the file.</param>
            <param name="permission">The <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/> that contains the permissions of the newly created file on the device.</param>
            <param name="timestamp">The time at which the file was last modified.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications. The progress is reported as a value between 0 and 100, representing the percentage of the file which has been transferred.</param>
            <param name="isCancelled">A <see cref="T:System.Boolean"/> that can be used to cancel the task.</param>
            <remarks>The <paramref name="permission"/> should coverts to a decimal number. For example, <c>644</c> should be <c>420</c> in decimal, <c>&amp;O644</c> in VB.NET and <c>0o644</c> in F# and Python.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.Stat(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String)">
            <summary>
            Gets the file statistics of a given file.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to look for the file.</param>
            <param name="path">The path to the file.</param>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.FileStatistics"/> object that represents the file.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.GetDirectoryListing(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String)">
            <summary>
            Lists the contents of a directory on the device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to list the directory.</param>
            <param name="remotePath">The path to the directory on the device.</param>
            <returns>For each child item of the directory, a <see cref="T:AdvancedSharpAdbClient.Models.FileStatistics"/> object with information of the item.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.GetProperty(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String)">
            <summary>
            Gets the property of a device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device for which to get the property.</param>
            <param name="property">The name of property which to get.</param>
            <returns>The value of the property on the device.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.GetProperties(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Gets the properties of a device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device for which to list the properties.</param>
            <returns>A dictionary containing the properties of the device, and their values.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.GetEnvironmentVariables(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Gets the environment variables currently defined on a device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device for which to list the environment variables.</param>
            <returns>A dictionary containing the environment variables of the device, and their values.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.InstallPackage(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs an Android application on device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="packageFilePath">The absolute file system path to file on local host to install.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>adb install</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.InstallMultiplePackage(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Collections.Generic.IEnumerable{System.String},System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs Android multiple application on device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="basePackageFilePath">The absolute base app file system path to file on local host to install.</param>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.InstallMultiplePackage(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Collections.Generic.IEnumerable{System.String},System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs Android multiple application on device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="packageName">The absolute package name of the base app.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.Pull(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.IO.Stream,System.IProgress{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Boolean@)">
            <summary>
            Pulls (downloads) a file from the remote device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to pull the file.</param>
            <param name="remotePath">The path, on the device, of the file to pull.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that will receive the contents of the file.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications. The progress is reported as a value between 0 and 100, representing the percentage of the file which has been transferred.</param>
            <param name="isCancelled">A <see cref="T:System.Boolean"/> that can be used to cancel the task.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.Push(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.IO.Stream,AdvancedSharpAdbClient.Models.UnixFileStatus,System.DateTimeOffset,System.IProgress{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Boolean@)">
            <summary>
            Pushes (uploads) a file to the remote device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when executing the command.</param>
            <param name="device">The device on which to put the file.</param>
            <param name="remotePath">The path, on the device, to which to push the file.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that contains the contents of the file.</param>
            <param name="permission">The <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/> that contains the permissions of the newly created file on the device.</param>
            <param name="timestamp">The time at which the file was last modified.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications. The progress is reported as a value between 0 and 100, representing the percentage of the file which has been transferred.</param>
            <param name="isCancelled">A <see cref="T:System.Boolean"/> that can be used to cancel the task.</param>
            <remarks>The <paramref name="permission"/> should coverts to a decimal number. For example, <c>644</c> should be <c>420</c> in decimal, <c>&amp;O644</c> in VB.NET and <c>0o644</c> in F# and Python.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.InstallPackage(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs an Android application on device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="packageFilePath">The absolute file system path to file on local host to install.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>adb install</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.InstallMultiplePackage(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Collections.Generic.IEnumerable{System.String},System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs Android multiple application on device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="basePackageFilePath">The absolute base app file system path to file on local host to install.</param>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.InstallMultiplePackage(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Collections.Generic.IEnumerable{System.String},System.String,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs Android multiple application on device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="packageName">The absolute package name of the base app.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.UninstallPackage(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String[])">
            <summary>
            Uninstalls a package from the device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="packageName">The name of the package to uninstall.</param>
            <param name="arguments">The arguments to pass to <c>pm uninstall</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.GetPackageVersion(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String)">
            <summary>
            Requests the version information from the device.
            </summary>
            <param name="client">The connection to the adb server.</param>
            <param name="device">The device on which to uninstall the package.</param>
            <param name="packageName">The name of the package from which to get the application version.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.DeviceExtensions.ListProcesses(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Lists all processes running on the device.
            </summary>
            <param name="client">A connection to ADB.</param>
            <param name="device">The device on which to list the processes that are running.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that will iterate over all processes
            that are currently running on the device.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.LinuxPath">
            <summary>
            Just like <see cref="T:System.IO.Path"/>, except it is geared for Linux.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.LinuxPath.DirectorySeparatorChar">
            <summary>
            The directory separator character.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.LinuxPath.EscapePattern">
            <summary>
            Pattern to escape filenames for shell command consumption.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.LinuxPath.InvalidCharacters">
            <summary>
            The <see cref="T:System.Array"/> of <see cref="T:System.Char"/>s which are invalid in a path.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.LinuxPath.Combine(System.String[])">
            <summary>
            Combine the specified paths to form one path.
            </summary>
            <param name="paths">The paths.</param>
            <returns>The combined path.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.LinuxPath.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <returns>A <see cref="T:System.String"></see> containing directory information for path,
            or null if path denotes a root directory, is the empty string (""), or is null.
            Returns <see cref="F:System.String.Empty"></see> if path does not contain directory information.</returns>
            <param name="path">The path of a file or directory. </param>
            <exception cref="T:System.ArgumentException">The path parameter contains invalid characters, is empty,
            or contains only white spaces, or contains a wildcard character. </exception>
            <exception cref="T:System.IO.PathTooLongException">The path parameter is longer
            than the system-defined maximum length.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.LinuxPath.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <returns>A <see cref="T:System.String"/> consisting of the characters after the last directory character in path.
            If the last character of path is a directory or volume separator character,
            this method returns <see cref="F:System.String.Empty"/>. If path is null, this method returns null.</returns>
            <param name="path">The path string from which to obtain the file name and extension. </param>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters
            defined in <see cref="F:AdvancedSharpAdbClient.DeviceCommands.LinuxPath.InvalidCharacters"/>, or contains a wildcard character. </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.LinuxPath.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains absolute or relative path information.
            </summary>
            <returns>true if path contains an absolute path; otherwise, false.</returns>
            <param name="path">The path to test.</param>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters
            defined in <see cref="F:AdvancedSharpAdbClient.DeviceCommands.LinuxPath.InvalidCharacters"/>, or contains a wildcard character. </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.LinuxPath.Escape(System.String)">
            <summary>
            Returns an escaped version of the entry name.
            </summary>
            <param name="path">The path.</param>
            <returns>The entry name.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.LinuxPath.Quote(System.String)">
            <summary>
            Quotes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>The quoted path.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.LinuxPath.CheckInvalidPathChars(System.String)">
            <summary>
            Checks the invalid path chars.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.LinuxPath.FixupPath(System.String)">
            <summary>
            Fixups the path.
            </summary>
            <param name="path">The path.</param>
            <returns>The fixup path</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.LinuxPath.EscapeRegex">
            <summary>
            Gets a <see cref="T:System.Text.RegularExpressions.Regex"/> to escape filenames for shell command consumption.
            </summary>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> to escape filenames for shell command consumption.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess">
            <summary>
            Represents a process running on an Android device.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess"/> struct from it <see cref="T:System.String"/> representation.
            </summary>
            <param name="line">A <see cref="T:System.String"/> which represents a <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess"/>.</param>
            <param name="cmdLinePrefix">A value indicating whether the output of <c>/proc/{pid}/stat</c> is prefixed with <c>/proc/{pid}/cmdline</c> or not.
            Because <c>stat</c> does not contain the full process name, this can be useful.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.State">
            <summary>
            Gets or sets the state of the process.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.Name">
            <summary>
            Gets or sets the name of the process, including arguments, if any.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ParentProcessId">
            <summary>
            Gets or sets the parent Process ID number.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ProcessGroupId">
            <summary>
            Gets or sets the Process Group ID number.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.SessionID">
            <summary>
            Gets or sets the session ID of the process number.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ProcessId">
            <summary>
            Gets or sets the Process ID number.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.TTYNumber">
            <summary>
            Gets or sets the controlling terminal of the process.
            </summary>
            <value>The minor device number is contained in the combination of bits
            <see langword="31"/> to <see langword="20"/> and <see langword="7"/> to <see langword="0"/>;
            the major device number is in bits <see langword="15"/> to <see langword="8"/>.</value>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.TopProcessGroupId">
            <summary>
            Gets or sets the ID of the foreground process group of the controlling terminal of the process.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.Flags">
            <summary>
            Gets or sets The kernel flags word of the process. For bit meanings, see the <c>PF_*</c> defines
            in the Linux kernel source file <c>include/linux/sched.h</c>. Details depend on the kernel version.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.MinorFaults">
            <summary>
            Gets or sets the number of minor faults the process has made
            which have not required loading a memory page from disk.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ChildMinorFaults">
            <summary>
            Gets or sets the number of minor faults that the process's waited-for children have made.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.MajorFaults">
            <summary>
            Gets or sets the number of major faults the process has made
            which have required loading a memory page from disk.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ChildMajorFaults">
            <summary>
            Gets or sets the number of major faults that the process's waited-for children have made.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.UserScheduledTime">
            <summary>
            Gets or sets the amount of time that this process has been scheduled in user mode,
            measured in clock ticks (divide by <c>sysconf(_SC_CLK_TCK)</c>). This includes guest time,
            guest_time (time spent running a virtual CPU, see below), so that applications
            that are not aware of the guest time field do not lose that time from their calculations.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ScheduledTime">
            <summary>
            Gets or sets the amount of time that this process has been scheduled in kernel mode,
            measured in clock ticks (divide by <c>sysconf(_SC_CLK_TCK)</c>).
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ChildUserScheduledTime">
            <summary>
            Gets or sets the amount of time that this process's waited-for children have been scheduled in user mode,
            measured in clock ticks (divide by <c>sysconf(_SC_CLK_TCK)</c>). (See also <c>times(2)</c>.)
            This includes guest time, cguest_time (time spent running a virtual CPU, see below).
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ChildScheduledTime">
            <summary>
            Gets or sets the Amount of time that this process's waited-for children have been scheduled in kernel mode,
            measured in clock ticks (divide by <c>sysconf(_SC_CLK_TCK)</c>).
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.Priority">
            <summary>
            Gets or sets the value for processes running a real-time scheduling policy
            (policy below; see sched_setscheduler(2)), this is the negated scheduling priority,
            minus one; that is, a number in the range <see langword="-2"/> to <see langword="-100"/>,
            corresponding to real-time priorities <see langword="1"/> to <see langword="99"/>.
            For processes running under a non-real-time scheduling policy, this is the raw nice
            value (<c>setpriority(2)</c>) as represented in the kernel. The kernel stores nice values as numbers
            in the range <see langword="0"/> (high) to <see langword="39"/> (low),
            corresponding to the user-visible nice range of <see langword="-20"/> to <see langword="19"/>.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.Nice">
            <summary>
            Gets or sets the nice value (see <c>setpriority(2)</c>), a value in the range
            <see langword="19"/> (low priority) to <see langword="-20"/> (high priority).
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ThreadsNumber">
            <summary>
            Gets or sets the number of threads in this process (since Linux 2.6).
            </summary>
            <remarks>Before kernel 2.6, this field was hard coded to 0 as a placeholder for an earlier removed field.</remarks>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.Interval">
            <summary>
            Gets or sets the time in jiffies before the next <c>SIGALRM</c> is sent to the process due to an interval timer.
            </summary>
            <remarks>Since kernel 2.6.17, this field is no longer maintained, and is hard coded as 0.</remarks>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.StartTime">
            <summary>
            Gets or sets The time the process started after system boot. In kernels before Linux 2.6,
            this value was expressed in jiffies.Since Linux 2.6, the value is expressed in clock ticks
            (divide by <c>sysconf(_SC_CLK_TCK)</c>).
            </summary>
            <remarks>The format for this field was %lu before Linux 2.6.</remarks>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.VirtualSize">
            <summary>
            Gets or sets total virtual memory size in bytes.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ResidentSetSize">
            <summary>
            Gets or sets the process resident set size.
            </summary>
            <value>Number of pages the process has in real memory.
            This is just the pages which count toward text, data, or stack space.
            This does not include pages which have not been demand-loaded in, or which are swapped out.
            This value is inaccurate; see <c>/proc/[pid]/statm</c> below.</value>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ResidentSetSizeLimit">
            <summary>
            Gets or sets current soft limit in bytes on the rss of the process;
            See the description of RLIMIT_RSS in <c>getrlimit(2)</c>.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.StartCode">
            <summary>
            Gets or sets the address above which program text can run.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.EndCode">
            <summary>
            Gets or sets the address below which program text can run.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.StartStack">
            <summary>
            Gets or sets the address of the start (i.e., bottom) of the stack.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ESP">
            <summary>
            Gets or sets the current value of ESP (stack pointer), as found in the kernel stack page for the process.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.EIP">
            <summary>
            Gets or sets the current EIP (instruction pointer).
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.Signal">
            <summary>
            Gets or sets the bitmap of pending signals, displayed as a decimal number. Obsolete,
            because it does not provide information on real-time signals; Use <c>/proc/[pid]/status</c> instead.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.Blocked">
            <summary>
            Gets or sets the bitmap of blocked signals, displayed as a decimal number. Obsolete,
            because it does not provide information on real-time signals; Use <c>/proc/[pid]/status</c> instead.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.IgnoredSignals">
            <summary>
            Gets or sets the bitmap of ignored signals, displayed as a decimal number. Obsolete,
            because it does not provide information on real-time signals; Use <c>/proc/[pid]/status</c> instead.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.CaughtSignals">
            <summary>
            Gets or sets the bitmap of caught signals, displayed as a decimal number. Obsolete,
            because it does not provide information on real-time signals; Use <c>/proc/[pid]/status</c> instead.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.WChan">
            <summary>
            Gets or sets the memory address of the event the process is waiting for.
            </summary>
            <value>This is the "channel" in which the process is waiting.
            It is the address of a location in the kernel where the process is sleeping.
            The corresponding symbolic name can be found in <c>/proc/[pid]/wchan</c>.</value>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.SwappedPagesNumber">
            <summary>
            Gets or sets the number of pages swapped (not maintained).
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.CumulativeSwappedPagesNumber">
            <summary>
            Gets or sets the cumulative number of pages swapped for child processes (not maintained).
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ExitSignal">
            <summary>
            Gets or sets the signal to be sent to parent when we die.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.Processor">
            <summary>
            Gets or sets the CPU number last executed on.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.RealTimePriority">
            <summary>
            Gets or sets the real-time scheduling priority, a number in the range 1 to 99 for processes scheduled
            under a real-time policy, or 0, for non-real-time processes (see <c>sched_setscheduler(2)</c>).
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.Policy">
            <summary>
            Gets or sets the scheduling policy (see <c>sched_setscheduler(2)</c>).
            Decode using the <c>SCHED_*</c> constants in <c>linux/sched.h</c>.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.IODelays">
            <summary>
            Gets or sets the aggregated block I/O delays, measured in clock ticks (centiseconds).
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.GuestTime">
            <summary>
            Gets or sets the guest time of the process (time spent running a virtual CPU for a guest operating system),
            measured in clock ticks (divide by <c>sysconf(_SC_CLK_TCK)</c>).
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ChildGuestTime">
            <summary>
            Gets or sets the guest time of the process's children, measured in clock ticks (divide by <c>sysconf(_SC_CLK_TCK)</c>).
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.StartData">
            <summary>
            Gets or sets the address above which program initialized and uninitialized(BSS) data are placed.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.EndData">
            <summary>
            Gets or sets the address below which program initialized and uninitialized(BSS) data are placed.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.StartBrk">
            <summary>
            Gets or sets the address above which program heap can be expanded with <c>brk(2)</c>.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ArgStart">
            <summary>
            Gets or sets the address above which program command-line arguments (<c>argv</c>) are placed.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ArgEnd">
            <summary>
            Gets or sets the address below program command-line arguments (<c>argv</c>) are placed.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.EnvStart">
            <summary>
            Gets or sets the address above which program environment is placed.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.EnvEnd">
            <summary>
            Gets or sets the address below which program environment is placed.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ExitCode">
            <summary>
            Gets or sets the thread's exit status in the form reported by <c>waitpid(2)</c>.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.Parse(System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess"/> from it <see cref="T:System.String"/> representation.
            </summary>
            <param name="line">A <see cref="T:System.String"/> which represents a <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess"/>.</param>
            <param name="cmdLinePrefix">A value indicating whether the output of <c>/proc/{pid}/stat</c> is prefixed with <c>/proc/{pid}/cmdline</c> or not.
            Because <c>stat</c> does not contain the full process name, this can be useful.</param>
            <returns>The equivalent <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ToString">
            <summary>
            Gets a <see cref="T:System.String"/> that represents this <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess"/>,
            in the format of "<see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.Name"/> (<see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ProcessId"/>)".
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ParseInt(System.String)">
            <summary>
            Converts the string representation of a number to its 32-bit signed integer equivalent.
            </summary>
            <param name="value">A string containing a number to convert.</param>
            <returns>A 32-bit signed integer equivalent to the number contained in <paramref name="value"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ParseUInt(System.String)">
            <summary>
            Converts the string representation of a number to its 32-bit unsigned integer equivalent.
            </summary>
            <param name="value">A string representing the number to convert.</param>
            <returns>A 32-bit unsigned integer equivalent to the number contained in <paramref name="value"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ParseLong(System.String)">
            <summary>
            Converts the string representation of a number to its 64-bit signed integer equivalent.
            </summary>
            <param name="value">A string containing a number to convert.</param>
            <returns>A 64-bit signed integer equivalent to the number contained in <paramref name="value"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcess.ParseULong(System.String)">
            <summary>
            Converts the string representation of a number to its 64-bit unsigned integer equivalent.
            </summary>
            <param name="value">A string that represents the number to convert.</param>
            <returns>A 64-bit unsigned integer equivalent to the number contained in <paramref name="value"/>.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element">
            <summary>
            Implement of screen element, likes Selenium.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.Element.separator">
            <summary>
            The <see cref="T:System.Array"/> of <see cref="T:System.Char"/>s that separate the coordinates of the element.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.#ctor(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Drawing.Rectangle,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element"/> class.
            </summary>
            <param name="client">The current ADB client that manages the connection.</param>
            <param name="device">The current device containing the element.</param>
            <param name="rectangle">The coordinates and size of the element.</param>
            <param name="attributes">Gets or sets element attributes.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.#ctor(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element"/> class.
            </summary>
            <param name="client">The current ADB client that manages the connection.</param>
            <param name="device">The current device containing the element.</param>
            <param name="xmlNode">The <see cref="T:System.Xml.XmlNode"/> of the element.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Client">
            <summary>
            Gets or sets the current ADB client that manages the connection.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Device">
            <summary>
            Gets the current device containing the element.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Bounds">
            <summary>
            Gets the coordinates and size of the element.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Children">
            <summary>
            Gets the children of this element.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Attributes">
            <summary>
            Gets the element attributes.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Node">
            <summary>
            Gets the <see cref="T:System.Xml.XmlNode"/> of this element.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Center">
            <summary>
            Gets the coordinates of the the center of the element.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Text">
            <summary>
            Gets the text of the element.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Class">
            <summary>
            Gets the class name of the element.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Package">
            <summary>
            Gets the package name of the element.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.Element.ResourceID">
            <summary>
            Gets the resource ID of the element.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <remarks>The index method is index by <see cref="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.FromXmlNode(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Xml.XmlNode)">
            <summary>
            Creates a new <see cref='T:AdvancedSharpAdbClient.DeviceCommands.Models.Element'/> with the specified <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="client">The current ADB client that manages the connection.</param>
            <param name="device">The current device containing the element.</param>
            <param name="xmlNode">The <see cref="T:System.Xml.XmlNode"/> of the element.</param>
            <returns>The new <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element"/> that this method creates.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.GetChildCount">
            <summary>
            Gets the count of <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Children"/> in this element.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Click">
            <summary>
            Clicks on this coordinates.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.SendText(System.String)">
            <summary>
            Send text to device. Doesn't support Russian.
            </summary>
            <param name="text">The text to send.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.ClearInput">
            <summary>
            Clear the input text. Use <see cref="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.ClearInput(System.Int32)"/> if the element is focused.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.ClearInput(System.Int32)">
            <summary>
            Clear the input text. Use <see cref="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.ClearInput(System.Int32)"/> if the element is focused.
            </summary>
            <param name="charCount">The length of text to clear.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.ClickAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously clicks on this coordinates.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.SendTextAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously send text to device. Doesn't support Russian.
            </summary>
            <param name="text">The text to send.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.ClearInputAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously clear the input text. Use <see cref="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.ClearInputAsync(System.Int32,System.Threading.CancellationToken)"/> if the element is focused.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.ClearInputAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously clear the input text. Use <see cref="M:AdvancedSharpAdbClient.DeviceCommands.DeviceClient.ClearInputAsync(System.Int32,System.Threading.CancellationToken)"/> if the element is focused.
            </summary>
            <param name="charCount">The length of text to clear.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.FindDescendant(System.Func{AdvancedSharpAdbClient.DeviceCommands.Models.Element,System.Boolean})">
            <summary>
            Find the first descendant element matching a given predicate, using a depth-first search.
            </summary>
            <param name="predicate">The predicate to use to match the descendant nodes.</param>
            <returns>The descendant that was found, or <see langword="null"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.FindDescendantOrSelf(System.Func{AdvancedSharpAdbClient.DeviceCommands.Models.Element,System.Boolean})">
            <summary>
            Find the first descendant (or self) element matching a given predicate, using a depth-first search.
            </summary>
            <param name="predicate">The predicate to use to match the descendant nodes.</param>
            <returns>The descendant (or self) that was found, or <see langword="null"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.FindDescendants">
            <summary>
            Find all descendant elements of the specified element. This method can be chained with
            LINQ calls to add additional filters or projections on top of the returned results.
            <para>
            This method is meant to provide extra flexibility in specific scenarios and it should not
            be used when only the first item is being looked for. In those cases, use one of the
            available <see cref="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.FindDescendant(System.Func{AdvancedSharpAdbClient.DeviceCommands.Models.Element,System.Boolean})"/> overloads instead, which will
            offer a more compact syntax as well as better performance in those cases.
            </para>
            </summary>
            <returns>All the descendant <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element"/> instance from <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Children"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.FindDescendants"/>.
            </summary>
            <returns>An enumerator that can be used to iterate through the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.Equals(AdvancedSharpAdbClient.DeviceCommands.Models.Element)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.op_Equality(AdvancedSharpAdbClient.DeviceCommands.Models.Element,AdvancedSharpAdbClient.DeviceCommands.Models.Element)">
            <summary>
            Tests whether two <see cref='T:AdvancedSharpAdbClient.DeviceCommands.Models.Element'/> objects are equally.
            </summary>
            <param name="left">The <see cref='T:AdvancedSharpAdbClient.DeviceCommands.Models.Element'/> structure that is to the left of the equality operator.</param>
            <param name="right">The <see cref='T:AdvancedSharpAdbClient.DeviceCommands.Models.Element'/> structure that is to the right of the equality operator.</param>
            <returns>This operator returns <see langword="true"/> if the two <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element"/> structures are equally; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.op_Inequality(AdvancedSharpAdbClient.DeviceCommands.Models.Element,AdvancedSharpAdbClient.DeviceCommands.Models.Element)">
            <summary>
            Tests whether two <see cref='T:AdvancedSharpAdbClient.DeviceCommands.Models.Element'/> objects are different.
            </summary>
            <param name="left">The <see cref='T:AdvancedSharpAdbClient.DeviceCommands.Models.Element'/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref='T:AdvancedSharpAdbClient.DeviceCommands.Models.Element'/> structure that is to the right of the inequality operator.</param>
            <returns>This operator returns <see langword="true"/> if the two <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.Element"/> structures are unequally; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.Element.ToString">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcessState">
            <summary>
            Represents the state of a process running on an Android device.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcessState.Unknown">
            <summary>
            The process state is unknown.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcessState.R">
            <summary>
            Foreground or runnable (on run queue).
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcessState.S">
            <summary>
            Interruptible sleep (waiting for an event to complete).
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcessState.D">
            <summary>
            Uninterruptible sleep (usually IO).
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcessState.Z">
            <summary>
            Defunct ("zombie") process, terminated but not reaped by its parent.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcessState.T">
            <summary>
            Stopped, either by a job control signal or because it is being traced.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcessState.W">
            <summary>
            paging (not valid since the 2.6.xx kernel).
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcessState.X">
            <summary>
            dead (should never be seen).
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcessState.K">
            <summary>
            Wakekill.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.AndroidProcessState.P">
            <summary>
            Parked.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags">
            <summary>
            Per process flags.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.Unknown">
            <summary>
            The per process flag is unknown.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.VCPU">
            <summary>
            I'm a virtual CPU.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.IDLE">
            <summary>
            I am an IDLE thread.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.EXITING">
            <summary>
            Getting shut down.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.POSTCOREDUMP">
            <summary>
            Coredumps should ignore this task.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.IO_WORKER">
            <summary>
            Task is an IO worker.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.WQ_WORKER">
            <summary>
            I'm a workqueue worker.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.FORKNOEXEC">
            <summary>
            Forked but didn't exec.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.MCE_PROCESS">
            <summary>
            Process policy on mce errors.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.SUPERPRIV">
            <summary>
            Used super-user privileges.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.DUMPCORE">
            <summary>
            Dumped core.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.SIGNALED">
            <summary>
            Killed by a signal.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.MEMALLOC">
            <summary>
            Allocating memory.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.NPROC_EXCEEDED">
            <summary>
            set_user() noticed that RLIMIT_NPROC was exceeded
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.USED_MATH">
            <summary>
            If unset the fpu must be initialized before use
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.HOLE_00004000">
            <summary>
            Hole (0x00004000)
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.NOFREEZE">
            <summary>
            This thread should not be frozen
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.HOLE_00010000">
            <summary>
            Hole (0x00010000)
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.KSWAPD">
            <summary>
            I am kswapd
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.MEMALLOC_NOFS">
            <summary>
            All allocation requests will inherit GFP_NOFS.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.MEMALLOC_NOIO">
            <summary>
            All allocation requests will inherit GFP_NOIO.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.LOCAL_THROTTLE">
            <summary>
            Throttle writes only against the bdi I write to, I am cleaning dirty pages from some other bdi.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.KTHREAD">
            <summary>
            I am a kernel thread.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.RANDOMIZE">
            <summary>
            Randomize virtual address space.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.HOLE_00800000">
            <summary>
            Hole (0x00800000)
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.HOLE_01000000">
            <summary>
            Hole (0x01000000)
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.HOLE_02000000">
            <summary>
            Hole (0x02000000)
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.NO_SETAFFINITY">
            <summary>
            Userland is not allowed to meddle with cpus_mask.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.MCE_EARLY">
            <summary>
            Early kill for mce process policy.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.MEMALLOC_PIN">
            <summary>
            Allocation context constrained to zones which allow long term pinning.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.HOLE_20000000">
            <summary>
            Hole (0x20000000)
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.HOLE_40000000">
            <summary>
            Hole (0x40000000)
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Models.PerProcessFlags.SUSPEND_TASK">
            <summary>
            This thread called freeze_processes() and should not be frozen.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.Models.NamespaceDoc">
            <summary>
            The classes in this namespace provide models for <see cref="N:AdvancedSharpAdbClient.DeviceCommands"/>.
            </summary>
            <remarks><c>Copyright (c) The Android Open Source Project, Ryan Conrad, Quamotion, yungd1plomat, wherewhere. All rights reserved.</c></remarks>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo">
            <summary>
            Represents a version of an Android application.
            </summary>
            <param name="VersionCode">The version code of the application.</param>
            <param name="VersionName">The version name of the application.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.#ctor(System.Int32,System.String)">
            <summary>
            Represents a version of an Android application.
            </summary>
            <param name="VersionCode">The version code of the application.</param>
            <param name="VersionName">The version name of the application.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo"/> struct.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode">
            <summary>
            Gets or sets the version code of an Android application.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionName">
            <summary>
            Gets or sets the version name of an Android application.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.TryAsVersion(System.Version@)">
            <summary>
            Try to parse the <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionName"/> into a <see cref="T:System.Version"/> object.
            </summary>
            <param name="version">The <see cref="T:System.Version"/> object.</param>
            <returns><see langword="true"/> if the <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionName"/> was successfully parsed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.GetVersionNumbers(System.String)">
            <summary>
            Gets the version numbers from a string.
            </summary>
            <param name="version">The version string.</param>
            <returns>The version numbers.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.Compare(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.Compare(AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo,AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.Deconstruct(System.Int32@,System.String@)">
            <summary>
            Deconstruct the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo"/> class.
            </summary>
            <param name="versionCode">The version code of the application.</param>
            <param name="versionName">The version name of the application.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.op_GreaterThan(AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo,AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo)">
            <summary>
            Compares the <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> of two <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> values to determine which is greater.
            </summary>
            <param name="left">The <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> value to compare with <paramref name="right"/>.</param>
            <param name="right">The <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> value to compare with <paramref name="left"/>.</param>
            <returns><see langword="true"/> if the <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> of <paramref name="left"/>
            is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.op_LessThan(AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo,AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo)">
            <summary>
            Compares the <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> of two <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> values to determine which is less.
            </summary>
            <param name="left">The <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> value to compare with <paramref name="right"/>.</param>
            <param name="right">The <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> value to compare with <paramref name="left"/>.</param>
            <returns><see langword="true"/> if the <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> of <paramref name="left"/>
            is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.op_GreaterThanOrEqual(AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo,AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo)">
            <summary>
            Compares the <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> of two <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> values to determine which is greater or equal.
            </summary>
            <param name="left">The <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> value to compare with <paramref name="right"/>.</param>
            <param name="right">The <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> value to compare with <paramref name="left"/>.</param>
            <returns><see langword="true"/> if the <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> of <paramref name="left"/>
            is greater or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.op_LessThanOrEqual(AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo,AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo)">
            <summary>
            Compares the <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> of two <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> values to determine which is less or equal.
            </summary>
            <param name="left">The <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> value to compare with <paramref name="right"/>.</param>
            <param name="right">The <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> value to compare with <paramref name="left"/>.</param>
            <returns><see langword="true"/> if the <see cref="P:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo.VersionCode"/> of <paramref name="left"/>
            is less or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.NamespaceDoc">
            <summary>
            The classes in this namespace provide Device Commands of adb.
            </summary>
            <remarks><c>Copyright (c) The Android Open Source Project, Ryan Conrad, Quamotion, yungd1plomat, wherewhere. All rights reserved.</c></remarks>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.PackageManager">
            <summary>
            Allows you to get information about packages that are installed on a device.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.RefreshPackagesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously refreshes the packages.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallPackageAsync(System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs an Android application on device.
            </summary>
            <param name="packageFilePath">The absolute file system path to file on local host to install.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>adb install</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallRemotePackageAsync(System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs the application package that was pushed to a temporary location on the device.
            </summary>
            <param name="remoteFilePath">absolute file path to package file on device.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm install</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultiplePackageAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs Android multiple application on device.
            </summary>
            <param name="basePackageFilePath">The absolute base app file system path to file on local host to install.</param>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultiplePackageAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs Android multiple application on device.
            </summary>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="packageName">The absolute package name of the base app.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultipleRemotePackageAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs the multiple application package that was pushed to a temporary location on the device.
            </summary>
            <param name="baseRemoteFilePath">The absolute base app file path to package file on device.</param>
            <param name="splitRemoteFilePaths">The absolute split app file paths to package file on device.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultipleRemotePackageAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs the multiple application package that was pushed to a temporary location on the device.
            </summary>
            <param name="splitRemoteFilePaths">The absolute split app file paths to package file on device.</param>
            <param name="packageName">The absolute package name of the base app.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallPackageAsync(System.String,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs an Android application on device.
            </summary>
            <param name="packageFilePath">The absolute file system path to file on local host to install.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>adb install</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallRemotePackageAsync(System.String,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs the application package that was pushed to a temporary location on the device.
            </summary>
            <param name="remoteFilePath">absolute file path to package file on device.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm install</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultiplePackageAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs Android multiple application on device.
            </summary>
            <param name="basePackageFilePath">The absolute base app file system path to file on local host to install.</param>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultiplePackageAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs Android multiple application on device.
            </summary>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="packageName">The absolute package name of the base app.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultipleRemotePackageAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs the multiple application package that was pushed to a temporary location on the device.
            </summary>
            <param name="baseRemoteFilePath">The absolute base app file path to package file on device.</param>
            <param name="splitRemoteFilePaths">The absolute split app file paths to package file on device.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultipleRemotePackageAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs the multiple application package that was pushed to a temporary location on the device.
            </summary>
            <param name="splitRemoteFilePaths">The absolute split app file paths to package file on device.</param>
            <param name="packageName">The absolute package name of the base app.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.UninstallPackageAsync(System.String,System.String[])">
            <summary>
            Asynchronously uninstalls a package from the device.
            </summary>
            <param name="packageName">The name of the package to uninstall.</param>
            <param name="arguments">The arguments to pass to <c>pm uninstall</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.UninstallPackageAsync(System.String,System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously uninstalls a package from the device.
            </summary>
            <param name="packageName">The name of the package to uninstall.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm uninstall</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.GetVersionInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously requests the version information from the device.
            </summary>
            <param name="packageName">The name of the package from which to get the application version.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo"/> of target application.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.CreateInstallSessionAsync(System.String,System.Threading.CancellationToken,System.String[])">
            <summary>
            Like "install", but starts an install session asynchronously.
            </summary>
            <param name="packageName">The absolute package name of the base app.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the session ID.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.WriteInstallSessionAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously write an apk into the given install session.
            </summary>
            <param name="session">The session ID of the install session.</param>
            <param name="apkName">The name of the application.</param>
            <param name="path">The absolute file path to package file on device.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.GetFileStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously opens an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns a read-only <see cref="T:System.IO.Stream"/> on the specified path.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.SyncPackageToDeviceAsync(System.String,System.Action{System.String,AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Asynchronously pushes a file to device
            </summary>
            <param name="localFilePath">The absolute path to file on local host.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the destination path on device for file.</returns>
            <exception cref="T:System.IO.IOException">If fatal error occurred when pushing file.</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.RemoveRemotePackageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a file from device.
            </summary>
            <param name="remoteFilePath">Path on device of file to remove.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
            <exception cref="T:System.IO.IOException">If file removal failed.</exception>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.PackageManager.TempInstallationDirectory">
            <summary>
            The path to a temporary directory to use when pushing files to the device.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.PackageManager.ListFull">
            <summary>
            The command that list all packages installed on the device.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.PackageManager.logger">
            <summary>
            The logger to use when logging messages.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.PackageManager.SyncServiceFactory">
            <summary>
            A function which returns a new instance of a class
            that implements the <see cref="T:AdvancedSharpAdbClient.ISyncService"/> interface,
            that can be used to transfer files to and from a given device.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.#ctor(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.PackageManager"/> class.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use to communicate with the Android Debug Bridge.</param>
            <param name="device">The device on which to look for packages.</param>
            <param name="arguments">The arguments to pass to <c>pm list packages</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.#ctor(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Func{AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.ISyncService},System.Boolean,AdvancedSharpAdbClient.Logs.ILogger{AdvancedSharpAdbClient.DeviceCommands.PackageManager},System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.PackageManager"/> class.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use to communicate with the Android Debug Bridge.</param>
            <param name="device">The device on which to look for packages.</param>
            <param name="syncServiceFactory">A function which returns a new instance of a class
            that implements the <see cref="T:AdvancedSharpAdbClient.ISyncService"/> interface,
            that can be used to transfer files to and from a given device.</param>
            <param name="skipInit">A value indicating whether to skip the initial refresh of the package list or not.
            Used mainly by unit tests.</param>
            <param name="logger">The logger to use when logging.</param>
            <param name="arguments">The arguments to pass to <c>pm list packages</c>.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.PackageManager.Arguments">
            <summary>
            Gets or sets a value to pass to <c>pm list packages</c> when list packages.
            </summary>
            <remarks>
            <list type="ordered">
              <item>
                <c>-a</c>: all known packages (but excluding APEXes)
              </item>
              <item>
                <c>-d</c>: filter to only show disabled packages
              </item>
              <item>
                <c>-e</c>: filter to only show enabled packages
              </item>
              <item>
                <c>-s</c>: filter to only show system packages
              </item>
              <item>
                <c>-3</c>: filter to only show third party packages
              </item>
              <item>
                <c>-i</c>: ignored (used for compatibility with older releases)
              </item>
              <item>
                <c>-u</c>: also include uninstalled packages
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.PackageManager.Packages">
            <summary>
            Gets the list of packages currently installed on the device. They key is the name of the package;
            the value the package path.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.PackageManager.Device">
            <summary>
            Gets the device.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.PackageManager.AdbClient">
            <summary>
            The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use when communicating with the device.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.RefreshPackages">
            <summary>
            Refreshes the packages.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallPackage(System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs an Android application on device.
            </summary>
            <param name="packageFilePath">The absolute file system path to file on local host to install.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>adb install</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallRemotePackage(System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs the application package that was pushed to a temporary location on the device.
            </summary>
            <param name="remoteFilePath">absolute file path to package file on device.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>adb install</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultiplePackage(System.String,System.Collections.Generic.IEnumerable{System.String},System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs Android multiple application on device.
            </summary>
            <param name="basePackageFilePath">The absolute base app file system path to file on local host to install.</param>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultiplePackage(System.Collections.Generic.IEnumerable{System.String},System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs Android multiple application on device.
            </summary>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="packageName">The absolute package name of the base app.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultipleRemotePackage(System.String,System.Collections.Generic.IEnumerable{System.String},System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs the multiple application package that was pushed to a temporary location on the device.
            </summary>
            <param name="baseRemoteFilePath">The absolute base app file path to package file on device.</param>
            <param name="splitRemoteFilePaths">The absolute split app file paths to package file on device.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultipleRemotePackage(System.Collections.Generic.IEnumerable{System.String},System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs the multiple application package that was pushed to a temporary location on the device.
            </summary>
            <param name="splitRemoteFilePaths">The absolute split app file paths to package file on device.</param>
            <param name="packageName">The absolute package name of the base app.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallPackage(System.String,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs an Android application on device.
            </summary>
            <param name="packageFilePath">The absolute file system path to file on local host to install.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>adb install</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallRemotePackage(System.String,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs the application package that was pushed to a temporary location on the device.
            </summary>
            <param name="remoteFilePath">absolute file path to package file on device.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>adb install</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultiplePackage(System.String,System.Collections.Generic.IEnumerable{System.String},System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs Android multiple application on device.
            </summary>
            <param name="basePackageFilePath">The absolute base app file system path to file on local host to install.</param>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultiplePackage(System.Collections.Generic.IEnumerable{System.String},System.String,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs Android multiple application on device.
            </summary>
            <param name="splitPackageFilePaths">The absolute split app file system paths to file on local host to install.</param>
            <param name="packageName">The absolute package name of the base app.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultipleRemotePackage(System.String,System.Collections.Generic.IEnumerable{System.String},System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs the multiple application package that was pushed to a temporary location on the device.
            </summary>
            <param name="baseRemoteFilePath">The absolute base app file path to package file on device.</param>
            <param name="splitRemoteFilePaths">The absolute split app file paths to package file on device.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.InstallMultipleRemotePackage(System.Collections.Generic.IEnumerable{System.String},System.String,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs the multiple application package that was pushed to a temporary location on the device.
            </summary>
            <param name="splitRemoteFilePaths">The absolute split app file paths to package file on device.</param>
            <param name="packageName">The absolute package name of the base app.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.UninstallPackage(System.String,System.String[])">
            <summary>
            Uninstalls a package from the device.
            </summary>
            <param name="packageName">The name of the package to uninstall.</param>
            <param name="arguments">The arguments to pass to <c>pm uninstall</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.GetVersionInfo(System.String)">
            <summary>
            Requests the version information from the device.
            </summary>
            <param name="packageName">The name of the package from which to get the application version.</param>
            <returns>The <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Models.VersionInfo"/> of target application.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.CreateInstallSession(System.String,System.String[])">
            <summary>
            Like "install", but starts an install session.
            </summary>
            <param name="packageName">The absolute package name of the base app.</param>
            <param name="arguments">The arguments to pass to <c>pm install-create</c>.</param>
            <returns>Session ID.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.WriteInstallSession(System.String,System.String,System.String)">
            <summary>
            Write an apk into the given install session.
            </summary>
            <param name="session">The session ID of the install session.</param>
            <param name="apkName">The name of the application.</param>
            <param name="path">The absolute file path to package file on device.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.GetFileStream(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only <see cref="T:System.IO.Stream"/> on the specified path.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.SyncPackageToDevice(System.String,System.Action{System.String,AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs})">
            <summary>
            Pushes a file to device
            </summary>
            <param name="localFilePath">The absolute path to file on local host.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.</param>
            <returns>Destination path on device for file.</returns>
            <exception cref="T:System.IO.IOException">If fatal error occurred when pushing file.</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.RemoveRemotePackage(System.String)">
            <summary>
            Remove a file from device.
            </summary>
            <param name="remoteFilePath">Path on device of file to remove.</param>
            <exception cref="T:System.IO.IOException">If file removal failed.</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageManager.ValidateDevice">
            <summary>
            Validates the device is online.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.Receivers.EnvironmentVariablesReceiver">
            <summary>
            Processes the output of the <c>printenv</c> command, which dumps all environment variables of an Android device.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.EnvironmentVariablesReceiver.PrintEnvCommand">
            <summary>
            The path to the <c>printenv</c> command.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.EnvironmentVariablesReceiver.EnvPattern">
            <summary>
            A regular expression that can be used to parse the output of the <c>printenv</c> command.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.EnvironmentVariablesReceiver.regex">
            <summary>
            The <see cref="T:System.Text.RegularExpressions.Regex"/> cached by <see cref="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.EnvironmentVariablesReceiver.AddOutput(System.String)"/>.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.EnvironmentVariablesReceiver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Receivers.EnvironmentVariablesReceiver"/> class.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Receivers.EnvironmentVariablesReceiver.EnvironmentVariables">
            <summary>
            Gets the environment variables that are currently defined on the device.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.EnvironmentVariablesReceiver.AddOutput(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.EnvironmentVariablesReceiver.Done">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.EnvironmentVariablesReceiver.EnvRegex">
            <summary>
            Gets a <see cref="T:System.Text.RegularExpressions.Regex"/> which can be used to parse the output of the <c>printenv</c> command.
            </summary>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> which can be used to parse the output of the <c>printenv</c> command.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.Receivers.GetPropReceiver">
            <summary>
            Parses the output of the <c>getprop</c> command, which lists all properties of an Android device.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.GetPropReceiver.GetPropCommand">
            <summary>
            The path to the <c>getprop</c> executable to run on the device.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.GetPropReceiver.GetPropPattern">
            <summary>
            A regular expression which can be used to parse the <c>getprop</c> output.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.GetPropReceiver.regex">
            <summary>
            The <see cref="T:System.Text.RegularExpressions.Regex"/> cached by <see cref="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.GetPropReceiver.AddOutput(System.String)"/>.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.GetPropReceiver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Receivers.GetPropReceiver"/> class.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Receivers.GetPropReceiver.Properties">
            <summary>
            Gets the list of properties which have been retrieved.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.GetPropReceiver.AddOutput(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.GetPropReceiver.Done">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.GetPropReceiver.GetPropRegex">
            <summary>
            Gets a <see cref="T:System.Text.RegularExpressions.Regex"/> which can be used to parse the <c>getprop</c> output.
            </summary>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> which can be used to parse the <c>getprop</c> output.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.Receivers.InfoOutputReceiver">
            <summary>
            Processes command line output of a <c>adb</c> shell command.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.InfoOutputReceiver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Receivers.InfoOutputReceiver"/> class.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Receivers.InfoOutputReceiver.Properties">
            <summary>
            Gets or sets a dictionary with the extracted properties and their corresponding values.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Receivers.InfoOutputReceiver.PropertyParsers">
            <summary>
            Gets or sets the dictionary with all properties and their corresponding property parsers.
            A property parser extracts the property value out of a <see cref="T:System.String"/> if possible.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.InfoOutputReceiver.GetPropertyValue(System.String)">
            <summary>
            Gets the value of the property out of the Properties dictionary.
            Returns null if the property is not present in the directory.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>The received value</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.InfoOutputReceiver.GetPropertyValue``1(System.String)">
            <summary>
            Gets the value of the property out of the Properties dictionary.
            Returns null if the property is not present in the directory.
            </summary>
            <typeparam name="T">The type of the property</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>The received value.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.InfoOutputReceiver.AddPropertyParser(System.String,System.Func{System.String,System.Object})">
            <summary>
            Adds a new parser to this receiver.
            The parsers parses one received line and extracts the property value if possible.
            The parser should return <c>null</c> if the property value cannot be found in the line.
            </summary>
            <param name="property">The property corresponding with the parser.</param>
            <param name="parser">Function parsing one string and returning the property value if possible. </param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.InfoOutputReceiver.AddOutput(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver">
            <summary>
            Processes output of the <c>pm install</c> command.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver.UnknownError">
            <summary>
            The error message that indicates an unknown error occurred.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver.SuccessOutput">
            <summary>
            The message that indicates the operation completed successfully.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver.FailureOutput">
            <summary>
            The message that indicates the operation indicates a failure.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver.SuccessPattern">
            <summary>
            A regular expression that matches output of the success.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver.FailurePattern">
            <summary>
            A regular expression that matches output that indicates a failure.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver.ErrorPattern">
            <summary>
            A regular expression that matches output that indicates a error.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver"/> class.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver.ErrorMessage">
            <summary>
            Gets the error message if the install was unsuccessful.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver.SuccessMessage">
            <summary>
            Gets the success message if the install is successful.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver.Success">
            <summary>
            Gets a value indicating whether the install was a success.
            </summary>
            <value>
            <see langword="true"/> if success; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver.AddOutput(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver.SuccessRegex">
            <summary>
            Gets a <see cref="T:System.Text.RegularExpressions.Regex"/> that matches output of the success.
            </summary>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> that matches output of the success.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver.FailureRegex">
            <summary>
            Gets a <see cref="T:System.Text.RegularExpressions.Regex"/> that matches output that indicates a failure.
            </summary>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> that matches output that indicates a failure.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.InstallOutputReceiver.ErrorRegex">
            <summary>
            Gets a <see cref="T:System.Text.RegularExpressions.Regex"/> that matches output that indicates a error.
            </summary>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> that matches output that indicates a error.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.Receivers.NamespaceDoc">
            <summary>
            The classes in this namespace provide receivers for <see cref="N:AdvancedSharpAdbClient.DeviceCommands"/>.
            </summary>
            <remarks><c>Copyright (c) The Android Open Source Project, Ryan Conrad, Quamotion, yungd1plomat, wherewhere. All rights reserved.</c></remarks>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.Receivers.PackageManagerReceiver">
            <summary>
            Parses the output of the various <c>pm</c> commands.
            </summary>
            <param name="packageManager">The parent package manager.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.PackageManagerReceiver.#ctor(AdvancedSharpAdbClient.DeviceCommands.PackageManager)">
            <summary>
            Parses the output of the various <c>pm</c> commands.
            </summary>
            <param name="packageManager">The parent package manager.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Receivers.PackageManagerReceiver.Device">
            <summary>
            Gets the device.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Receivers.PackageManagerReceiver.PackageManager">
            <summary>
            Gets the package manager.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.PackageManagerReceiver.ProcessNewLines(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.Receivers.ProcessOutputReceiver">
            <summary>
            Parses the output of a <c>cat /proc/[pid]/stat</c> command.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.ProcessOutputReceiver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Receivers.ProcessOutputReceiver"/> class.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Receivers.ProcessOutputReceiver.Processes">
            <summary>
            Gets a list of all processes that have been received.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.ProcessOutputReceiver.AddOutput(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.Receivers.VersionInfoReceiver">
            <summary>
            Processes command line output of the <c>dumpsys package</c> command.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.VersionInfoReceiver.VersionCode">
            <summary>
            The name of the version code property.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.VersionInfoReceiver.VersionName">
            <summary>
            The name of the version name property.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.VersionInfoReceiver.VersionCodePattern">
            <summary>
            A regular expression that can be used to parse the version code.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceCommands.Receivers.VersionInfoReceiver.inPackagesSection">
            <summary>
            Tracks whether we're currently in the packages section or not.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.VersionInfoReceiver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.Receivers.VersionInfoReceiver"/> class.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceCommands.Receivers.VersionInfoReceiver.VersionInfo">
            <summary>
            Gets the version code of the specified package.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.VersionInfoReceiver.CheckPackagesSection(System.String)">
            <summary>
            Checks whether we're in the packages section of the dumpsys package output.
            </summary>
            <param name="line">The line to be checked.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.VersionInfoReceiver.GetVersionName(System.String)">
            <summary>
            Parses the given line and extracts the version name if possible.
            </summary>
            <param name="line">The line to be parsed.</param>
            <returns>The extracted version name.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.VersionInfoReceiver.GetVersionCode(System.String)">
            <summary>
            Parses the given line and extracts the version code if possible.
            </summary>
            <param name="line">The line to be parsed.</param>
            <returns>The extracted version code.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.Receivers.VersionInfoReceiver.VersionCodeRegex">
            <summary>
            Gets a <see cref="T:System.Text.RegularExpressions.Regex"/> that can be used to parse the version code.
            </summary>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> that can be used to parse the version code.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceCommands.PackageInstallationException">
            <summary>
            An exception while installing a package on the device.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageInstallationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.PackageInstallationException"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageInstallationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.PackageInstallationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageInstallationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.PackageInstallationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceCommands.PackageInstallationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.PackageInstallationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceMonitor">
             <summary>
             A Device monitor. This connects to the Android Debug Bridge and get device and
             debuggable process information from it.
             </summary>
             <example>
             <para>To receive notifications when devices connect to or disconnect from your PC, you can use the following code:</para>
             <code>
             void Test()
             {
                 var monitor = new DeviceMonitor(new AdbSocket());
                 monitor.DeviceConnected += this.OnDeviceConnected;
                 monitor.Start();
             }
            
             void OnDeviceConnected(object sender, DeviceDataEventArgs e)
             {
                 Console.WriteLine($"The device {e.Device.Name} has connected to this PC");
             }
             </code>
             </example>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceMonitor.FirstDeviceListParsed">
            <summary>
            When the <see cref="M:AdvancedSharpAdbClient.DeviceMonitor.StartAsync(System.Threading.CancellationToken)"/> method is called, this <see cref="T:System.Threading.ManualResetEvent"/>
            is used to block the <see cref="M:AdvancedSharpAdbClient.DeviceMonitor.StartAsync(System.Threading.CancellationToken)"/> method until the <see cref="M:AdvancedSharpAdbClient.DeviceMonitor.DeviceMonitorLoopAsync(System.Threading.CancellationToken)"/>
            has processed the first list of devices.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceMonitor.MonitorTaskCancellationTokenSource">
            <summary>
            A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the <see cref="F:AdvancedSharpAdbClient.DeviceMonitor.MonitorTask"/>.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceMonitor.MonitorTask">
            <summary>
            The <see cref="T:System.Threading.Tasks.Task"/> that monitors the <see cref="P:AdvancedSharpAdbClient.DeviceMonitor.Socket"/> and waits for device notifications.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.DisposeAsyncCore">
            <summary>
            Asynchronously stops the monitoring
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.DeviceMonitorLoopAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously monitors the devices. This connects to the Debug Bridge
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.InitializeSocketAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the <see cref="P:AdvancedSharpAdbClient.DeviceMonitor.Socket"/> and sends the <c>host:track-devices</c> command to the adb server.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.GetAwaiter">
            <summary>
            Gets an awaiter used to switch to background thread.
            </summary>
            <returns>An awaiter instance.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.DeviceMonitor.ThreadSwitcher">
            <summary>
            A helper type for switch thread by <see cref="T:System.Threading.Tasks.Task"/>. This type is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceMonitor.ThreadSwitcher.IsCompleted">
            <summary>
            Gets a value that indicates whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.ThreadSwitcher.GetResult">
            <summary>
            Ends the await on the completed task.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.ThreadSwitcher.OnCompleted(System.Action)">
            <inheritdoc/>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceMonitor.separator">
            <summary>
            The <see cref="T:System.Array"/> of <see cref="T:System.Char"/>s that represent a new line.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceMonitor.disposed">
            <summary>
            The <see cref="T:System.Boolean"/> that indicates whether this instance has been disposed.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceMonitor.logger">
            <summary>
            The logger to use when logging messages.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.DeviceMonitor.devices">
            <summary>
            The list of devices currently connected to the Android Debug Bridge.
            </summary>
        </member>
        <member name="E:AdvancedSharpAdbClient.DeviceMonitor.DeviceChanged">
            <inheritdoc/>
        </member>
        <member name="E:AdvancedSharpAdbClient.DeviceMonitor.DeviceNotified">
            <inheritdoc/>
        </member>
        <member name="E:AdvancedSharpAdbClient.DeviceMonitor.DeviceConnected">
            <inheritdoc/>
        </member>
        <member name="E:AdvancedSharpAdbClient.DeviceMonitor.DeviceListChanged">
            <inheritdoc/>
        </member>
        <member name="E:AdvancedSharpAdbClient.DeviceMonitor.DeviceDisconnected">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.#ctor(AdvancedSharpAdbClient.Logs.ILogger{AdvancedSharpAdbClient.DeviceMonitor})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceMonitor"/> class.
            </summary>
            <param name="logger">The logger to use when logging.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.#ctor(System.Net.EndPoint,AdvancedSharpAdbClient.Logs.ILogger{AdvancedSharpAdbClient.DeviceMonitor})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceMonitor"/> class.
            </summary>
            <param name="endPoint">The <see cref="T:System.Net.EndPoint"/> at which the adb server is listening.</param>
            <param name="logger">The logger to use when logging.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.#ctor(AdvancedSharpAdbClient.IAdbSocket,AdvancedSharpAdbClient.Logs.ILogger{AdvancedSharpAdbClient.DeviceMonitor})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceMonitor"/> class.
            </summary>
            <param name="socket">The <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> that manages the connection with the adb server.</param>
            <param name="logger">The logger to use when logging.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceMonitor.Devices">
            <inheritdoc/>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceMonitor.Socket">
            <summary>
            Gets the <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> that represents the connection to the
            Android Debug Bridge.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.DeviceMonitor.IsRunning">
            <summary>
            Gets a value indicating whether this instance is running.
            </summary>
            <value><see langword="true"/> if this instance is running; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.Start">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.Dispose(System.Boolean)">
            <summary>
            Stops the monitoring
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.ProcessIncomingDeviceData(System.String)">
            <summary>
            Processes the incoming device data.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.UpdateDevices(System.Collections.Generic.IEnumerable{AdvancedSharpAdbClient.Models.DeviceData})">
            <summary>
            Processes the incoming <see cref="T:AdvancedSharpAdbClient.Models.DeviceData"/>.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.Clone">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.DeviceMonitor.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.Exceptions.AdbException">
            <summary>
            Represents an exception with communicating with ADB.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.AdbException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.AdbException"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.AdbException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.AdbException"/> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.AdbException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.AdbException"/> class with the specified client error message and adb error message.
            </summary>
            <param name="message">The message that describes the error on the client side.</param>
            <param name="adbError">The raw error message that was sent by adb.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.AdbException.#ctor(System.String,AdvancedSharpAdbClient.Models.AdbResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.AdbException"/> class with the specified client error message and <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/>
            </summary>
            <param name="message">The message that describes the error on the client side.</param>
            <param name="response">The <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/> that was sent by adb.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.AdbException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.AdbException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.AdbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.AdbException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.Exceptions.AdbException.AdbError">
            <summary>
            Gets the error message that was sent by adb.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Exceptions.AdbException.Response">
            <summary>
            Gets the response that was sent by adb.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Exceptions.AdbException.ConnectionReset">
            <summary>
            Gets a value indicating whether the underlying error was a <see cref="T:System.Net.Sockets.SocketException"/> where the
            <see cref="P:System.Net.Sockets.SocketException.SocketErrorCode"/> is set to <see cref="F:System.Net.Sockets.SocketError.ConnectionReset"/>, indicating
            that the connection was reset by the remote server. This happens when the adb server was killed.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Exceptions.CommandAbortingException">
            <summary>
            Thrown when an executed command identifies that it is being aborted.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.CommandAbortingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.CommandAbortingException"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.CommandAbortingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.CommandAbortingException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.CommandAbortingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.CommandAbortingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.CommandAbortingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.CommandAbortingException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:AdvancedSharpAdbClient.Exceptions.DeviceNotFoundException">
            <summary>
            Unable to connect to the device because it was not found in the list of available devices.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.DeviceNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.DeviceNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.DeviceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.DeviceNotFoundException"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.DeviceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.DeviceNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.DeviceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.DeviceNotFoundException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:AdvancedSharpAdbClient.Exceptions.ElementNotFoundException">
            <summary>
            Represents an exception with Element.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.ElementNotFoundException.#ctor(System.String)">
            <summary>
            Represents an exception with Element.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Exceptions.InvalidKeyEventException">
            <summary>
            Represents an exception with key event.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.InvalidKeyEventException.#ctor(System.String)">
            <summary>
            Represents an exception with key event.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Exceptions.InvalidTextException">
            <summary>
            Represents an exception with Element.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.InvalidTextException.#ctor">
            <summary>
            Represents an exception with Element.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Exceptions.JavaException">
            <summary>
            Represents an exception with the Java exception output.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Exceptions.JavaException.UnknownError">
            <summary>
            Unknown error message.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Exceptions.JavaException.ExceptionOutput">
            <summary>
            The output of the Java exception.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Exceptions.JavaException.ExceptionPattern">
            <summary>
            The pattern of the Java exception.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Exceptions.JavaException.separator">
            <summary>
            The <see cref="T:System.Array"/> of <see cref="T:System.Char"/>s that represent a new line.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Exceptions.JavaException.JavaName">
            <summary>
            Gets the name of Java exception.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Exceptions.JavaException.JavaStackTrace">
            <summary>
            Gets a string representation of the immediate frames on the call stack of Java exception.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.JavaException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.JavaException"/> class.
            </summary>
            <param name="name">The name of Java exception.</param>
            <param name="stackTrace">The stackTrace of Java exception.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.JavaException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.JavaException"/> class.
            </summary>
            <param name="name">The name of Java exception.</param>
            <param name="message">The message of Java exception.</param>
            <param name="stackTrace">The stackTrace of Java exception.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.JavaException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.JavaException"/> class.
            </summary>
            <param name="name">The name of Java exception.</param>
            <param name="message">The message of Java exception.</param>
            <param name="stackTrace">The stackTrace of Java exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.JavaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.JavaException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.JavaException.Parse(System.String)">
            <summary>
            Creates a <see cref="T:AdvancedSharpAdbClient.Exceptions.JavaException"/> from it <see cref="T:System.String"/> representation.
            </summary>
            <param name="line">A <see cref="T:System.String"/> which represents a <see cref="T:AdvancedSharpAdbClient.Exceptions.JavaException"/>.</param>
            <returns>The equivalent <see cref="T:AdvancedSharpAdbClient.Exceptions.JavaException"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.JavaException.Parse(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a <see cref="T:AdvancedSharpAdbClient.Exceptions.JavaException"/> from it <see cref="T:System.String"/> representation.
            </summary>
            <param name="lines">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> which represents a <see cref="T:AdvancedSharpAdbClient.Exceptions.JavaException"/>.</param>
            <returns>The equivalent <see cref="T:AdvancedSharpAdbClient.Exceptions.JavaException"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.JavaException.ExceptionRegex">
            <summary>
            Gets a <see cref="T:System.Text.RegularExpressions.Regex"/> that can be used to parse the Java exception.
            </summary>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> that can be used to parse the Java exception.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Exceptions.NamespaceDoc">
            <summary>
            The classes in this namespace provide <see cref="T:System.Exception"/>s.
            </summary>
            <remarks><c>Copyright (c) The Android Open Source Project, Ryan Conrad, Quamotion, yungd1plomat, wherewhere. All rights reserved.</c></remarks>
        </member>
        <member name="T:AdvancedSharpAdbClient.Exceptions.PermissionDeniedException">
            <summary>
            The exception that is thrown when the permission to a resource was denied.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.PermissionDeniedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.PermissionDeniedException"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.PermissionDeniedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.PermissionDeniedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.PermissionDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.PermissionDeniedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.PermissionDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.PermissionDeniedException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:AdvancedSharpAdbClient.Exceptions.ShellCommandUnresponsiveException">
            <summary>
            The exception that is thrown when a shell command becomes unresponsive.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.ShellCommandUnresponsiveException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.ShellCommandUnresponsiveException"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.ShellCommandUnresponsiveException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.ShellCommandUnresponsiveException"/> class with a
            specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.ShellCommandUnresponsiveException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.ShellCommandUnresponsiveException"/> class with a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="inner">The exception that is the cause of the current exception, or <see langword="null"/> if no inner exception is specified.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.ShellCommandUnresponsiveException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.ShellCommandUnresponsiveException"/> class with a
            specified error message and a reference to the inner exception that is the cause
            of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or <see langword="null"/> if no inner exception is specified.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.ShellCommandUnresponsiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.ShellCommandUnresponsiveException"/> class with serialized
            data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:AdvancedSharpAdbClient.Exceptions.UnknownOptionException">
            <summary>
            Thrown when a command has an unknown option passed.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.UnknownOptionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.UnknownOptionException"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.UnknownOptionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.UnknownOptionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.UnknownOptionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.UnknownOptionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Exceptions.UnknownOptionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Exceptions.UnknownOptionException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:AdvancedSharpAdbClient.AdbClientExtensions">
            <summary>
            Provides extension methods for the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface. Provides overloads for commonly used functions.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.CreateForwardAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Models.ForwardSpec,AdvancedSharpAdbClient.Models.ForwardSpec,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously asks the ADB server to forward local connections from <paramref name="local"/>
            to the <paramref name="remote"/> address on the <paramref name="device"/>.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to forward the connections.</param>
            <param name="local">The local address to forward.</param>
            <param name="remote">The remote address to forward.</param>
            <param name="allowRebind">If set to <see langword="true"/>, the request will fail if there is already a forward
            connection from <paramref name="local"/>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.
            If your requested to start forwarding to local port TCP:0, the port number of the TCP port
            which has been opened. In all other cases, <c>0</c>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.CreateForwardAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a port forwarding between a local and a remote port.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device to which to forward the connections.</param>
            <param name="localPort">The local port to forward.</param>
            <param name="remotePort">The remote port to forward to</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.
            If your requested to start forwarding to local port TCP:0, the port number of the TCP port
            which has been opened. In all other cases, <c>0</c>.</returns>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">Failed to submit the forward command. Or Device rejected command:  + resp.Message.</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.CreateForwardAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously forwards a remote Unix socket to a local TCP socket.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device to which to forward the connections.</param>
            <param name="localPort">The local port to forward.</param>
            <param name="remoteSocket">The remote Unix socket.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.
            If your requested to start forwarding to local port TCP:0, the port number of the TCP port
            which has been opened. In all other cases, <c>0</c>.</returns>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">The client failed to submit the forward command.</exception>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">The device rejected command. The error message will include the error message provided by the device.</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.CreateReverseForwardAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Models.ForwardSpec,AdvancedSharpAdbClient.Models.ForwardSpec,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously asks the ADB server to reverse forward local connections from <paramref name="remote"/>
            to the <paramref name="local"/> address on the <paramref name="device"/>.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to reverse forward the connections.</param>
            <param name="remote">The remote address to reverse forward.</param>
            <param name="local">The local address to reverse forward.</param>
            <param name="allowRebind">If set to <see langword="true"/>, the request will fail if if the specified
            socket is already bound through a previous reverse command.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.
            If your requested to start reverse to remote port TCP:0, the port number of the TCP port
            which has been opened. In all other cases, <c>0</c>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.RemoveReverseForwardAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Models.ForwardSpec,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a reverse port forwarding between a remote and a local port.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to remove the reverse port forwarding</param>
            <param name="remote">Specification of the remote that was forwarded</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteServerCommandAsync(AdvancedSharpAdbClient.IAdbClient,System.String,System.String,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command on the adb server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="receiver">Optionally, a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> that processes the command output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteServerCommandAsync(AdvancedSharpAdbClient.IAdbClient,System.String,System.String,AdvancedSharpAdbClient.IAdbSocket,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command on the adb server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="socket">The <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> to send command.</param>
            <param name="receiver">Optionally, a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> that processes the command output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteRemoteCommandAsync(AdvancedSharpAdbClient.IAdbClient,System.String,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command on the device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="command">The command to execute.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="receiver">Optionally, a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> that processes the command output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteServerCommandAsync(AdvancedSharpAdbClient.IAdbClient,System.String,System.String,System.Func{System.String,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command on the adb server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="predicate">Optionally, a <see cref="T:System.Func`2"/> that processes the command output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteServerCommandAsync(AdvancedSharpAdbClient.IAdbClient,System.String,System.String,AdvancedSharpAdbClient.IAdbSocket,System.Func{System.String,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command on the adb server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="socket">The <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> to send command.</param>
            <param name="predicate">Optionally, a <see cref="T:System.Func`2"/> that processes the command output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteRemoteCommandAsync(AdvancedSharpAdbClient.IAdbClient,System.String,AdvancedSharpAdbClient.Models.DeviceData,System.Func{System.String,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command on the device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="command">The command to execute.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="predicate">Optionally, a <see cref="T:System.Func`2"/> that processes the command output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteServerCommandAsync(AdvancedSharpAdbClient.IAdbClient,System.String,System.String,System.Func{System.String,System.Boolean},System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command on the adb server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="predicate">Optionally, a <see cref="T:System.Func`2"/> that processes the command output.</param>
            <param name="encoding">The encoding to use when parsing the command output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteServerCommandAsync(AdvancedSharpAdbClient.IAdbClient,System.String,System.String,AdvancedSharpAdbClient.IAdbSocket,System.Func{System.String,System.Boolean},System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command on the adb server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="socket">The <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> to send command.</param>
            <param name="predicate">Optionally, a <see cref="T:System.Func`2"/> that processes the command output.</param>
            <param name="encoding">The encoding to use when parsing the command output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteRemoteCommandAsync(AdvancedSharpAdbClient.IAdbClient,System.String,AdvancedSharpAdbClient.Models.DeviceData,System.Func{System.String,System.Boolean},System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command on the device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="command">The command to execute.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="predicate">Optionally, a <see cref="T:System.Func`2"/> that processes the command output.</param>
            <param name="encoding">The encoding to use when parsing the command output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.RunLogServiceAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Action{AdvancedSharpAdbClient.Logs.LogEntry},AdvancedSharpAdbClient.Logs.LogId[])">
            <summary>
            Asynchronously runs the event log service on a device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to run the event log service.</param>
            <param name="messageSink">A callback which will receive the event log messages as they are received.</param>
            <param name="logNames">Optionally, the names of the logs to receive.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.RebootAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reboots the specified adb socket address.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.PairAsync(AdvancedSharpAdbClient.IAdbClient,System.Net.IPAddress,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously pair with a device for secure TCP/IP communication.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="address">The IP address of the remote device.</param>
            <param name="code">The pairing code.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.PairAsync(AdvancedSharpAdbClient.IAdbClient,System.Net.IPEndPoint,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously pair with a device for secure TCP/IP communication.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="endpoint">The DNS endpoint at which the <c>adb</c> server on the device is running.</param>
            <param name="code">The pairing code.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.PairAsync(AdvancedSharpAdbClient.IAdbClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously pair with a device for secure TCP/IP communication.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="host">The host address of the remote device.</param>
            <param name="code">The pairing code.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ConnectAsync(AdvancedSharpAdbClient.IAdbClient,System.Net.IPAddress,System.Threading.CancellationToken)">
            <summary>
            Asynchronously connect to a device via TCP/IP.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="address">The IP address of the remote device.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ConnectAsync(AdvancedSharpAdbClient.IAdbClient,System.Net.IPEndPoint,System.Threading.CancellationToken)">
            <summary>
            Asynchronously connect to a device via TCP/IP.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="endpoint">The IP endpoint at which the <c>adb</c> server on the device is running.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ConnectAsync(AdvancedSharpAdbClient.IAdbClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously connect to a device via TCP/IP.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="host">The host address of the remote device.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.DisconnectAsync(AdvancedSharpAdbClient.IAdbClient,System.Net.IPAddress,System.Threading.CancellationToken)">
            <summary>
            Asynchronously disconnects a remote device from this local ADB server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="address">The IP address of the remote device.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.DisconnectAsync(AdvancedSharpAdbClient.IAdbClient,System.Net.IPEndPoint,System.Threading.CancellationToken)">
            <summary>
            Asynchronously disconnects a remote device from this local ADB server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="endpoint">The IP endpoint at which the <c>adb</c> server on the device is running.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.DisconnectAsync(AdvancedSharpAdbClient.IAdbClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously disconnects a remote device from this local ADB server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="host">The host address of the remote device.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.RunLogServiceAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.IProgress{AdvancedSharpAdbClient.Logs.LogEntry},AdvancedSharpAdbClient.Logs.LogId[])">
            <summary>
            Asynchronously runs the event log service on a device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to run the event log service.</param>
            <param name="progress">A callback which will receive the event log messages as they are received.</param>
            <param name="logNames">Optionally, the names of the logs to receive.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.RunLogServiceAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.IProgress{AdvancedSharpAdbClient.Logs.LogEntry},System.Threading.CancellationToken,AdvancedSharpAdbClient.Logs.LogId[])">
            <summary>
            Asynchronously runs the event log service on a device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to run the event log service.</param>
            <param name="progress">A callback which will receive the event log messages as they are received.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="logNames">Optionally, the names of the logs to receive.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.InstallAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs an Android application on an device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to install the application.</param>
            <param name="apk">A <see cref="T:System.IO.Stream"/> which represents the application to install.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>adb install</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.InstallMultipleAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.Collections.Generic.IEnumerable{System.IO.Stream},System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously push multiple APKs to the device and install them.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to install the application.</param>
            <param name="baseAPK">A <see cref="T:System.IO.Stream"/> which represents the base APK to install.</param>
            <param name="splitAPKs"><see cref="T:System.IO.Stream"/>s which represents the split APKs to install.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>adb install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.InstallMultipleAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Collections.Generic.IEnumerable{System.IO.Stream},System.String,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously push multiple APKs to the device and install them.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to install the application.</param>
            <param name="splitAPKs"><see cref="T:System.IO.Stream"/>s which represents the split APKs to install.</param>
            <param name="packageName">The package name of the base APK to install.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>adb install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.InstallWriteAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.String,System.String,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Asynchronously write an apk into the given install session.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to install the application.</param>
            <param name="apk">A <see cref="T:System.IO.Stream"/> which represents the application to install.</param>
            <param name="apkName">The name of the application.</param>
            <param name="session">The session ID of the install session.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as a value between 0 and 100, representing the percentage of the apk which has been transferred.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.PairAsync(AdvancedSharpAdbClient.IAdbClient,System.Net.DnsEndPoint,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously pair with a device for secure TCP/IP communication.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="endpoint">The DNS endpoint at which the <c>adb</c> server on the device is running.</param>
            <param name="code">The pairing code.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ConnectAsync(AdvancedSharpAdbClient.IAdbClient,System.Net.DnsEndPoint,System.Threading.CancellationToken)">
            <summary>
            Asynchronously connect to a device via TCP/IP.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="endpoint">The DNS endpoint at which the <c>adb</c> server on the device is running.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.DisconnectAsync(AdvancedSharpAdbClient.IAdbClient,System.Net.DnsEndPoint,System.Threading.CancellationToken)">
            <summary>
            Asynchronously disconnects a remote device from this local ADB server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="endpoint">The DNS endpoint at which the <c>adb</c> server on the device is running.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.InstallCreateAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String[])">
            <summary>
            Like "install", but starts an install session synchronously.
            Use <see cref="M:AdvancedSharpAdbClient.AdbClientExtensions.InstallCreateAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String[])"/> if installation dose not have a base APK.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to install the application.</param>
            <param name="arguments">The arguments to pass to <c>adb install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the session ID</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.InstallCreateAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String[])">
            <summary>
            Like "install", but starts an install session synchronously.
            Use <see cref="M:AdvancedSharpAdbClient.AdbClientExtensions.InstallCreateAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String[])"/> if installation has a base APK.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to install the application.</param>
            <param name="packageName">The package name of the baseAPK to install.</param>
            <param name="arguments">The arguments to pass to <c>adb install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the session ID</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.UninstallAsync(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String[])">
            <summary>
            Asynchronously uninstalls an Android application on an device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to install the application.</param>
            <param name="packageName">The name of the package to uninstall.</param>
            <param name="arguments">The arguments to pass to <c>adb uninstall</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.CreateForward(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Models.ForwardSpec,AdvancedSharpAdbClient.Models.ForwardSpec,System.Boolean)">
            <summary>
            Asks the ADB server to forward local connections from <paramref name="local"/>
            to the <paramref name="remote"/> address on the <paramref name="device"/>.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to forward the connections.</param>
            <param name="local">The local address to forward.</param>
            <param name="remote">The remote address to forward.</param>
            <param name="allowRebind">If set to <see langword="true"/>, the request will fail if there is already a forward
            connection from <paramref name="local"/>.</param>
            <returns>If your requested to start forwarding to local port TCP:0, the port number of the TCP port
            which has been opened. In all other cases, <c>0</c>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.CreateForward(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Int32,System.Int32)">
            <summary>
            Creates a port forwarding between a local and a remote port.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device to which to forward the connections.</param>
            <param name="localPort">The local port to forward.</param>
            <param name="remotePort">The remote port to forward to</param>
            <returns>If your requested to start forwarding to local port TCP:0, the port number of the TCP port
            which has been opened. In all other cases, <c>0</c>.</returns>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">Failed to submit the forward command. Or Device rejected command:  + resp.Message.</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.CreateForward(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Int32,System.String)">
            <summary>
            Forwards a remote Unix socket to a local TCP socket.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device to which to forward the connections.</param>
            <param name="localPort">The local port to forward.</param>
            <param name="remoteSocket">The remote Unix socket.</param>
            <returns>If your requested to start forwarding to local port TCP:0, the port number of the TCP port
            which has been opened. In all other cases, <c>0</c>.</returns>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">The client failed to submit the forward command.</exception>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">The device rejected command. The error message will include the error message provided by the device.</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.CreateReverseForward(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Models.ForwardSpec,AdvancedSharpAdbClient.Models.ForwardSpec,System.Boolean)">
            <summary>
            Asks the ADB server to reverse forward local connections from <paramref name="remote"/>
            to the <paramref name="local"/> address on the <paramref name="device"/>.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to reverse forward the connections.</param>
            <param name="remote">The remote address to reverse forward.</param>
            <param name="local">The local address to reverse forward.</param>
            <param name="allowRebind">If set to <see langword="true"/>, the request will fail if if the specified socket
            is already bound through a previous reverse command.</param>
            <returns>If your requested to start reverse to remote port TCP:0, the port number of the TCP port
            which has been opened. In all other cases, <c>0</c>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.RemoveReverseForward(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Models.ForwardSpec)">
            <summary>
            Remove a reverse port forwarding between a remote and a local port.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to remove the reverse port forwarding</param>
            <param name="remote">Specification of the remote that was forwarded</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteServerCommand(AdvancedSharpAdbClient.IAdbClient,System.String,System.String,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver)">
            <summary>
            Executes a command on the adb server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="receiver">Optionally, a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> that processes the command output.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteServerCommand(AdvancedSharpAdbClient.IAdbClient,System.String,System.String,AdvancedSharpAdbClient.IAdbSocket,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver)">
            <summary>
            Executes a command on the adb server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="socket">The <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> to send command.</param>
            <param name="receiver">Optionally, a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> that processes the command output.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteRemoteCommand(AdvancedSharpAdbClient.IAdbClient,System.String,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver)">
            <summary>
            Executes a shell command on the device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="command">The command to execute.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="receiver">Optionally, a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> that processes the command output.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteServerCommand(AdvancedSharpAdbClient.IAdbClient,System.String,System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Executes a command on the adb server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="predicate">Optionally, a <see cref="T:System.Func`2"/> that processes the command output.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteServerCommand(AdvancedSharpAdbClient.IAdbClient,System.String,System.String,AdvancedSharpAdbClient.IAdbSocket,System.Func{System.String,System.Boolean})">
            <summary>
            Executes a command on the adb server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="socket">The <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> to send command.</param>
            <param name="predicate">Optionally, a <see cref="T:System.Func`2"/> that processes the command output.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteRemoteCommand(AdvancedSharpAdbClient.IAdbClient,System.String,AdvancedSharpAdbClient.Models.DeviceData,System.Func{System.String,System.Boolean})">
            <summary>
            Executes a shell command on the device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="command">The command to execute.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="predicate">Optionally, a <see cref="T:System.Func`2"/> that processes the command output.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteServerCommand(AdvancedSharpAdbClient.IAdbClient,System.String,System.String,System.Func{System.String,System.Boolean},System.Text.Encoding)">
            <summary>
            Executes a command on the adb server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="predicate">Optionally, a <see cref="T:System.Func`2"/> that processes the command output.</param>
            <param name="encoding">The encoding to use when parsing the command output.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteServerCommand(AdvancedSharpAdbClient.IAdbClient,System.String,System.String,AdvancedSharpAdbClient.IAdbSocket,System.Func{System.String,System.Boolean},System.Text.Encoding)">
            <summary>
            Executes a command on the adb server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="socket">The <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> to send command.</param>
            <param name="predicate">Optionally, a <see cref="T:System.Func`2"/> that processes the command output.</param>
            <param name="encoding">The encoding to use when parsing the command output.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteRemoteCommand(AdvancedSharpAdbClient.IAdbClient,System.String,AdvancedSharpAdbClient.Models.DeviceData,System.Func{System.String,System.Boolean},System.Text.Encoding)">
            <summary>
            Executes a shell command on the device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="command">The command to execute.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="predicate">Optionally, a <see cref="T:System.Func`2"/> that processes the command output.</param>
            <param name="encoding">The encoding to use when parsing the command output.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteServerEnumerable(AdvancedSharpAdbClient.IAdbClient,System.String,System.String)">
            <summary>
            Executes a command on the adb server and returns the output.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of strings, each representing a line of output from the command.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteServerEnumerable(AdvancedSharpAdbClient.IAdbClient,System.String,System.String,AdvancedSharpAdbClient.IAdbSocket)">
            <summary>
            Executes a command on the adb server and returns the output.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="socket">The <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> to send command.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of strings, each representing a line of output from the command.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.ExecuteRemoteEnumerable(AdvancedSharpAdbClient.IAdbClient,System.String,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Executes a shell command on the device and returns the output.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="command">The command to execute.</param>
            <param name="device">The device on which to run the command.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of strings, each representing a line of output from the command.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.RunLogService(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Action{AdvancedSharpAdbClient.Logs.LogEntry},AdvancedSharpAdbClient.Logs.LogId[])">
            <summary>
            Runs the event log service on a device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to run the event log service.</param>
            <param name="messageSink">A callback which will receive the event log messages as they are received.</param>
            <param name="logNames">Optionally, the names of the logs to receive.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.Reboot(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Reboots the specified adb socket address.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.Pair(AdvancedSharpAdbClient.IAdbClient,System.Net.IPAddress,System.String)">
            <summary>
            Pair with a device for secure TCP/IP communication.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="address">The IP address of the remote device.</param>
            <param name="code">The pairing code.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.Pair(AdvancedSharpAdbClient.IAdbClient,System.Net.IPEndPoint,System.String)">
            <summary>
            Pair with a device for secure TCP/IP communication.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="endpoint">The DNS endpoint at which the <c>adb</c> server on the device is running.</param>
            <param name="code">The pairing code.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.Pair(AdvancedSharpAdbClient.IAdbClient,System.String,System.String)">
            <summary>
            Pair with a device for secure TCP/IP communication.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="host">The host address of the remote device.</param>
            <param name="code">The pairing code.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.Connect(AdvancedSharpAdbClient.IAdbClient,System.Net.IPAddress)">
            <summary>
            Connect to a device via TCP/IP.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="address">The IP address of the remote device.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.Connect(AdvancedSharpAdbClient.IAdbClient,System.Net.IPEndPoint)">
            <summary>
            Connect to a device via TCP/IP.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="endpoint">The IP endpoint at which the <c>adb</c> server on the device is running.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.Connect(AdvancedSharpAdbClient.IAdbClient,System.String)">
            <summary>
            Connect to a device via TCP/IP.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="host">The host address of the remote device.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.Disconnect(AdvancedSharpAdbClient.IAdbClient,System.Net.IPAddress)">
            <summary>
            Disconnects a remote device from this local ADB server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="address">The IP address of the remote device.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.Disconnect(AdvancedSharpAdbClient.IAdbClient,System.Net.IPEndPoint)">
            <summary>
            Disconnects a remote device from this local ADB server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="endpoint">The IP endpoint at which the <c>adb</c> server on the device is running.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.Disconnect(AdvancedSharpAdbClient.IAdbClient,System.String)">
            <summary>
            Disconnects a remote device from this local ADB server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="host">The host address of the remote device.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.CreateDeviceClient(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Creates a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.DeviceClient"/> class, which can be used to interact with a device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to process command.</param>
            <returns>A new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.DeviceClient"/> class.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.CreatePackageManager(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.String[])">
            <summary>
            Creates a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.DeviceClient"/> class, which can be used to get information about packages that are installed on a device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to look for packages.</param>
            <param name="arguments">The arguments to pass to <c>pm list packages</c>.</param>
            <returns>A new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.PackageManager"/> class.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.RunLogService(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.IProgress{AdvancedSharpAdbClient.Logs.LogEntry},AdvancedSharpAdbClient.Logs.LogId[])">
            <summary>
            Runs the event log service on a device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to run the event log service.</param>
            <param name="progress">A callback which will receive the event log messages as they are received.</param>
            <param name="logNames">Optionally, the names of the logs to receive.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.RunLogService(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.IProgress{AdvancedSharpAdbClient.Logs.LogEntry},System.Boolean@,AdvancedSharpAdbClient.Logs.LogId[])">
            <summary>
            Runs the event log service on a device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to run the event log service.</param>
            <param name="progress">A callback which will receive the event log messages as they are received.</param>
            <param name="isCancelled">A <see cref="T:System.Boolean"/> that can be used to cancel the task.</param>
            <param name="logNames">Optionally, the names of the logs to receive.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.Install(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs an Android application on an device.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to install the application.</param>
            <param name="apk">A <see cref="T:System.IO.Stream"/> which represents the application to install.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>adb install</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.InstallMultiple(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.Collections.Generic.IEnumerable{System.IO.Stream},System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Push multiple APKs to the device and install them.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to install the application.</param>
            <param name="baseAPK">A <see cref="T:System.IO.Stream"/> which represents the base APK to install.</param>
            <param name="splitAPKs"><see cref="T:System.IO.Stream"/>s which represents the split APKs to install.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>adb install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.InstallMultiple(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.Collections.Generic.IEnumerable{System.IO.Stream},System.String,System.IProgress{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Push multiple APKs to the device and install them.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to install the application.</param>
            <param name="splitAPKs"><see cref="T:System.IO.Stream"/>s which represents the split APKs to install.</param>
            <param name="packageName">The package name of the base APK to install.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>adb install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.InstallWrite(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.String,System.String,System.IProgress{System.Double})">
            <summary>
            Write an apk into the given install session.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="device">The device on which to install the application.</param>
            <param name="apk">A <see cref="T:System.IO.Stream"/> which represents the application to install.</param>
            <param name="apkName">The name of the application.</param>
            <param name="session">The session ID of the install session.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as a value between 0 and 100, representing the percentage of the apk which has been transferred.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.Pair(AdvancedSharpAdbClient.IAdbClient,System.Net.DnsEndPoint,System.String)">
            <summary>
            Pair with a device for secure TCP/IP communication.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="endpoint">The DNS endpoint at which the <c>adb</c> server on the device is running.</param>
            <param name="code">The pairing code.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.Connect(AdvancedSharpAdbClient.IAdbClient,System.Net.DnsEndPoint)">
            <summary>
            Connect to a device via TCP/IP.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="endpoint">The DNS endpoint at which the <c>adb</c> server on the device is running.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.AdbClientExtensions.Disconnect(AdvancedSharpAdbClient.IAdbClient,System.Net.DnsEndPoint)">
            <summary>
            Disconnects a remote device from this local ADB server.
            </summary>
            <param name="client">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.</param>
            <param name="endpoint">The DNS endpoint at which the <c>adb</c> server on the device is running.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.AdbServerFeatures">
            <summary>
            Lists features which an Android Debug Bridge can support.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbServerFeatures.Shell2">
            <summary>
            The server supports the shell protocol.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbServerFeatures.Cmd">
            <summary>
            The server supports the <c>cmd</c> command.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbServerFeatures.Stat2">
            <summary>
            The server supports the stat2 protocol.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbServerFeatures.LibUsb">
            <summary>
            The server supports libusb.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.AdbServerFeatures.PushSync">
            <summary>
            The server supports <c>push --sync</c>.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Extensions">
            <summary>
            Extension methods for the <see cref="N:AdvancedSharpAdbClient"/> namespace.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Extensions.NewLineSeparator">
            <summary>
            The <see cref="T:System.Array"/> of <see cref="T:System.Char"/>s that represent a new line.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Extensions.CreateDnsEndPoint(System.String,System.Int32)">
            <summary>
            Creates a <see cref="T:System.Net.DnsEndPoint"/> from the specified host and port information.
            </summary>
            <param name="host">The host address.</param>
            <param name="port">The port.</param>
            <returns>The <see cref="T:System.Net.DnsEndPoint"/> created from the specified host and port information.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Extensions.AsShellOutputReceiver(System.Func{System.String,System.Boolean})">
            <summary>
            Converts a <see cref="T:System.Func`2"/> to a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/>.
            </summary>
            <param name="predicate">The function to call for each line of output</param>
            <returns>The <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> created from the specified function.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Extensions.ReadLineAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            Reads a line of characters asynchronously and returns the data as a string.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> to read a line.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A value task that represents the asynchronous read operation. The value of the
            TResult parameter contains the next line from the text reader, or is null if
            all of the characters have been read.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Extensions.ReadToEndAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            Reads all characters from the current position to the end of the stream asynchronously and returns them as one string.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> to read all characters.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the TResult
            parameter contains a string with the characters from the current position to
            the end of the stream.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Extensions.AsAction``1(System.IProgress{``0})">
            <summary>
            Converts a <see cref="T:System.IProgress`1"/> to a <see cref="T:System.Action`1"/>.
            </summary>
            <typeparam name="T">The type of progress update value.</typeparam>
            <param name="progress">The <see cref="T:System.IProgress`1"/> to convert.</param>
            <returns>The <see cref="T:System.Action`1"/> created from the specified <see cref="T:System.IProgress`1"/>.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Factories">
            <summary>
            Provides factory methods used by the various SharpAdbClient classes.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Factories.AdbSocketFactory">
            <summary>
            Gets or sets a delegate which creates a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbSocket"/> class.
            </summary>
            <returns>A new instance of the <see cref="T:AdvancedSharpAdbClient.AdbSocket"/> class.</returns>
        </member>
        <member name="P:AdvancedSharpAdbClient.Factories.AdbClientFactory">
            <summary>
            Gets or sets a delegate that creates a new instance of the <see cref="T:AdvancedSharpAdbClient.AdbClient"/> class.
            </summary>
            <returns>A new instance of the <see cref="T:AdvancedSharpAdbClient.AdbClient"/> class.</returns>
        </member>
        <member name="P:AdvancedSharpAdbClient.Factories.AdbCommandLineClientFactory">
            <summary>
            Gets or sets a function that returns a new instance of a class that implements the
            <see cref="T:AdvancedSharpAdbClient.IAdbCommandLineClient"/> interface, that can be used to interact with the
            <c>adb.exe</c> command line client.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Factories.SyncServiceFactory">
            <summary>
            Gets or sets a function that returns a new instance of a class that implements the
            <see cref="T:AdvancedSharpAdbClient.ISyncService"/> interface, that can be used to transfer files to and from
            a given device.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Factories.Reset">
            <summary>
            Resets all factories to their default values.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.LoggerExtensions">
            <summary>
            ILogger extension methods for common scenarios.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerExtensions.LogDebug(AdvancedSharpAdbClient.Logs.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a debug log message.
            </summary>
            <param name="logger">The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogDebug(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerExtensions.LogDebug(AdvancedSharpAdbClient.Logs.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes a debug log message.
            </summary>
            <param name="logger">The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogDebug("Processing request from {Address}", address)</example>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerExtensions.LogTrace(AdvancedSharpAdbClient.Logs.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a trace log message.
            </summary>
            <param name="logger">The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogTrace(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerExtensions.LogTrace(AdvancedSharpAdbClient.Logs.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes a trace log message.
            </summary>
            <param name="logger">The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogTrace("Processing request from {Address}", address)</example>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerExtensions.LogInformation(AdvancedSharpAdbClient.Logs.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes an informational log message.
            </summary>
            <param name="logger">The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogInformation(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerExtensions.LogInformation(AdvancedSharpAdbClient.Logs.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes an informational log message.
            </summary>
            <param name="logger">The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogInformation("Processing request from {Address}", address)</example>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerExtensions.LogWarning(AdvancedSharpAdbClient.Logs.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a warning log message.
            </summary>
            <param name="logger">The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogWarning(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerExtensions.LogWarning(AdvancedSharpAdbClient.Logs.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes a warning log message.
            </summary>
            <param name="logger">The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogWarning("Processing request from {Address}", address)</example>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerExtensions.LogError(AdvancedSharpAdbClient.Logs.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes an error log message.
            </summary>
            <param name="logger">The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogError(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerExtensions.LogError(AdvancedSharpAdbClient.Logs.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes an error log message.
            </summary>
            <param name="logger">The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogError("Processing request from {Address}", address)</example>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerExtensions.LogCritical(AdvancedSharpAdbClient.Logs.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a critical log message.
            </summary>
            <param name="logger">The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> to write to.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogCritical(exception, "Error while processing request from {Address}", address)</example>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerExtensions.LogCritical(AdvancedSharpAdbClient.Logs.ILogger,System.String,System.Object[])">
            <summary>
            Formats and writes a critical log message.
            </summary>
            <param name="logger">The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> to write to.</param>
            <param name="message">Format string of the log message in message template format. Example: <c>"User {User} logged in from {Address}"</c></param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <example>logger.LogCritical("Processing request from {Address}", address)</example>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerExtensions.Log(AdvancedSharpAdbClient.Logs.ILogger,AdvancedSharpAdbClient.Logs.LogLevel,System.String,System.Object[])">
            <summary>
            Formats and writes a log message at the specified log level.
            </summary>
            <param name="logger">The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> to write to.</param>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.AndroidLogEntry">
            <summary>
            Represents a standard Android log entry (an entry in any Android log buffer except the Event buffer).
            </summary>
            <remarks><seealso href="https://android.googlesource.com/platform/system/logging/+/refs/heads/main/liblog/logprint.cpp"/></remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.AndroidLogEntry.PriorityFormatters">
            <summary>
            Maps Android log priorities to chars used to represent them in the system log.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.AndroidLogEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Logs.AndroidLogEntry"/> class.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.AndroidLogEntry.Priority">
            <summary>
            Gets or sets the priority of the log message.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.AndroidLogEntry.Tag">
            <summary>
            Gets or sets the log tag of the message. Used to identify the source of a log message.
            It usually identifies the class or activity where the log call occurred.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.AndroidLogEntry.Message">
            <summary>
            Gets or sets the message that has been logged.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.AndroidLogEntry.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.AndroidLogEntry.FormatPriority(AdvancedSharpAdbClient.Logs.Priority)">
            <summary>
            Converts a <see cref="P:AdvancedSharpAdbClient.Logs.AndroidLogEntry.Priority"/> value to a char that represents that value in the system log.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:System.Char"/> that represents <paramref name="value"/> in the system log.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.EventLogType">
            <summary>
            Represents the different types of values that can be stored in an event log entry.
            </summary>
            <remarks><seealso href="https://android.googlesource.com/platform/system/logging/+/refs/heads/main/liblog/include/log/log.h#96"/></remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.EventLogType.ListStop">
            <summary>
            The value declare end of list.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.EventLogType.Unknown">
            <summary>
            The value means protocol error.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.EventLogType.Integer">
            <summary>
            The value is a four-byte signed integer.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.EventLogType.Long">
            <summary>
            The value is an eight-byte signed integer.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.EventLogType.String">
            <summary>
            The value is a string.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.EventLogType.List">
            <summary>
            The value is a list of values.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.EventLogType.Float">
            <summary>
            The value is a four-byte signed floating number.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.LogId">
            <summary>
            Identifies the various Android log buffers.
            </summary>
            <remarks><seealso href="https://android.googlesource.com/platform/system/core/+/master/include/log/log.h#596"/></remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogId.Main">
            <summary>
            The main log buffer
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogId.Min">
            <summary>
            The minimum log id.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogId.Radio">
            <summary>
            The buffer that contains radio/telephony related messages.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogId.Events">
            <summary>
            The buffer containing events-related messages.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogId.System">
            <summary>
            The Android system log buffer.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogId.Crash">
            <summary>
            The Android crash log buffer.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogId.Stats">
            <summary>
            The Android statistics log buffer.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogId.Security">
            <summary>
            The Android security log buffer.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogId.Kernel">
            <summary>
            The Android kernel log buffer.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogId.Max">
            <summary>
            The maximum log id.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogId.Default">
            <summary>
            Let the logging function choose the best log target.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogId.All">
            <summary>
            All Android log buffers.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.LogLevel">
            <summary>
            Defines logging severity levels.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogLevel.Trace">
            <summary>
            Logs that contain the most detailed messages. These messages may contain sensitive application data.
            These messages are disabled by default and should never be enabled in a production environment.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogLevel.Debug">
            <summary>
            Logs that are used for interactive investigation during development.  These logs should primarily contain
            information useful for debugging and have no long-term value.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogLevel.Information">
            <summary>
            Logs that track the general flow of the application. These logs should have long-term value.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogLevel.Warning">
            <summary>
            Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the
            application execution to stop.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogLevel.Error">
            <summary>
            Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a
            failure in the current activity, not an application-wide failure.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogLevel.Critical">
            <summary>
            Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires
            immediate attention.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogLevel.None">
            <summary>
            Not used for writing log messages. Specifies that a logging category should not write any messages.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.Priority">
            <summary>
            Represents a log priority.
            </summary>
            <remarks><seealso href="https://android.googlesource.com/platform/system/logging/+/refs/heads/main/liblog/include/android/log.h#73"/></remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.Priority.Unknown">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.Priority.Default">
            <summary>
            The default priority, for internal use only.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.Priority.Verbose">
            <summary>
            Represents a verbose message.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.Priority.Debug">
            <summary>
            Represents a debug message.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.Priority.Info">
            <summary>
            Represents an informational message.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.Priority.Warn">
            <summary>
            Represents a warning.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.Priority.Error">
            <summary>
            Represents an error.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.Priority.Fatal">
            <summary>
            Represents an assertion which failed.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.Priority.Assert">
            <summary>
            Represents an assertion which failed.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.Priority.Silent">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.EventLogEntry">
            <summary>
            Represents an entry in event buffer of the the Android log.
            </summary>
            <remarks><seealso href="https://android.googlesource.com/platform/system/core/+/master/include/log/log.h#482"/></remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.EventLogEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Logs.EventLogEntry"/> class.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.EventLogEntry.Tag">
            <summary>
            Gets or sets the 4 bytes integer key from <c>"/system/etc/event-log-tags"</c> file.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.EventLogEntry.Values">
            <summary>
            Gets or sets the values of this event log entry.
            </summary>
            <remarks>Values can be of type <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.String"/>, <see cref="T:System.Collections.Generic.List`1"/> or <see cref="T:System.Single"/>.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.EventLogEntry.ToString">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.ILogger">
            <summary>
            Represents a type used to perform logging.
            </summary>
            <remarks>Aggregates most logging patterns to a single method.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.ILogger.Log(AdvancedSharpAdbClient.Logs.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Formats and writes a log message at the specified log level.
            </summary>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="exception">The exception to log.</param>
            <param name="message">Format string of the log message.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.ILogger`1">
            <summary>
            A generic interface for logging where the category name is derived from the specified
            <typeparamref name="TCategoryName"/> type name.
            Generally used to enable activation of a named <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> from dependency injection.
            </summary>
            <typeparam name="TCategoryName">The type whose name is used for the logger category name.</typeparam>
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.ILoggerFactory">
            <summary>
            Represents a type used to configure the logging system and create instances of <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/>.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.ILoggerFactory.CreateLogger(System.String)">
            <summary>
            Creates a new <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> instance.
            </summary>
            <param name="categoryName">The category name for messages produced by the logger.</param>
            <returns>The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.ILoggerFactory.CreateLogger``1">
            <summary>
            Creates a new <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> instance.
            </summary>
            <typeparam name="T">The category name for messages produced by the logger.</typeparam>
            <returns>The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/>.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.LogEntry">
            <summary>
            The user space structure for version 1 of the logger_entry ABI.
            This structure is returned to user space by the kernel logger
            driver unless an upgrade to a newer ABI version is requested.
            </summary>
            <remarks><seealso href="https://android.googlesource.com/platform/system/core/+/master/include/log/logger.h"/></remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LogEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Logs.LogEntry"/> class.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.LogEntry.PayloadLength">
            <summary>
            Gets or sets the length of the payload.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.LogEntry.HeaderSize">
            <summary>
            Gets or sets the size of the header.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.LogEntry.ProcessId">
            <summary>
            Gets or sets the process ID of the code that generated the log message.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.LogEntry.ThreadId">
            <summary>
            Gets or sets the thread ID of the code that generated the log message.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.LogEntry.TimeStamp">
            <summary>
            Gets or sets the date and time at which the message was logged.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.LogEntry.NanoSeconds">
            <summary>
            Gets or sets the nanoseconds at which the message was logged.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.LogEntry.Id">
            <summary>
            Gets or sets the log id (v3) of the payload effective UID of logger (v2);
            this value is not available for v1 entries.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.LogEntry.Uid">
            <summary>
            Gets or sets the payload effective UID of logger;
            this value is not available for v1 entries.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.LogEntry.Data">
            <summary>
            Gets or sets the entry's payload.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LogEntry.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LogEntry.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:AdvancedSharpAdbClient.Logs.LogEntry"/>.
            </summary>
            <returns>An enumerator that can be used to iterate through the <see cref="T:AdvancedSharpAdbClient.Logs.LogEntry"/>.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.LoggerProvider">
            <summary>
            Provides a mechanism for creating instances of <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> and <see cref="T:AdvancedSharpAdbClient.Logs.ILogger`1"/> classes.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LoggerProvider._loggerFactory">
            <summary>
            The current log provider.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerProvider.SetLogProvider(AdvancedSharpAdbClient.Logs.ILoggerFactory)">
            <summary>
            Sets the current log provider based on logger factory.
            </summary>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerProvider.CreateLogger(System.String)">
            <summary>
            Creates a new <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> instance.
            </summary>
            <param name="category">The category name for messages produced by the logger.</param>
            <returns>A new <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> instance.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LoggerProvider.CreateLogger``1">
            <summary>
            Creates a new <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> instance using the full name of the given type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The <see cref="T:AdvancedSharpAdbClient.Logs.ILogger"/> that was created</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.LogReader">
            <summary>
            Processes Android log files in binary format. You usually get the binary format by running <c>logcat -B</c>.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that contains the logcat data.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LogReader.ReadEntryAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next <see cref="T:AdvancedSharpAdbClient.Logs.LogEntry"/> from the stream.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns a new <see cref="T:AdvancedSharpAdbClient.Logs.LogEntry"/> object.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LogReader.ReadUInt16Async(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads a <see cref="T:System.UInt16"/> from the stream.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the <see cref="T:System.UInt16"/> value.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LogReader.ReadUInt32Async(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads a <see cref="T:System.UInt32"/> from the stream.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the <see cref="T:System.UInt32"/> value.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LogReader.ReadInt32Async(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads a <see cref="T:System.Int32"/> from the stream.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LogReader.ReadBytesSafeAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously bytes from the stream, making sure that the requested number of bytes
            </summary>
            <param name="count">The number of bytes to read.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the <see cref="T:System.Byte"/> array.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LogReader.#ctor(System.IO.Stream)">
            <summary>
            Processes Android log files in binary format. You usually get the binary format by running <c>logcat -B</c>.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that contains the logcat data.</param>
        </member>
        <member name="F:AdvancedSharpAdbClient.Logs.LogReader.stream">
            <summary>
            The <see cref="T:System.IO.Stream"/> that contains the logcat data.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LogReader.ReadEntry">
            <summary>
            Reads the next <see cref="T:AdvancedSharpAdbClient.Logs.LogEntry"/> from the stream.
            </summary>
            <returns>A new <see cref="T:AdvancedSharpAdbClient.Logs.LogEntry"/> object.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LogReader.ReadLogEntry(System.IO.BinaryReader,System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Reads a single log entry from the stream.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LogReader.ReadUInt16">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from the stream.
            </summary>
            <returns>The <see cref="T:System.UInt16"/> that was read.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LogReader.ReadUInt32">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from the stream.
            </summary>
            <returns>The <see cref="T:System.UInt32"/> that was read.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LogReader.ReadInt32">
            <summary>
            Reads a <see cref="T:System.Int32"/> from the stream.
            </summary>
            <returns>The <see cref="T:System.Int32"/> that was read.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.LogReader.ReadBytesSafe(System.Int32)">
            <summary>
            Reads bytes from the stream, making sure that the requested number of bytes
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>The bytes that were read.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.NamespaceDoc">
            <summary>
            The classes in this namespace provide access to the Android system log.
            </summary>
            <remarks><c>Copyright (c) The Android Open Source Project, Ryan Conrad, Quamotion, yungd1plomat, wherewhere. All rights reserved.</c></remarks>
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.NullLogger">
            <summary>
            Minimalistic logger that does nothing.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.NullLogger.Instance">
            <summary>
            Returns the shared instance of <see cref="T:AdvancedSharpAdbClient.Logs.NullLogger"/>.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Logs.NullLogger.Log(AdvancedSharpAdbClient.Logs.LogLevel,System.Exception,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:AdvancedSharpAdbClient.Logs.NullLogger`1">
            <summary>
            Minimalistic logger that does nothing.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Logs.NullLogger`1.Instance">
            <summary>
            Returns an instance of <see cref="T:AdvancedSharpAdbClient.Logs.NullLogger`1"/>.
            </summary>
            <returns>An instance of <see cref="T:AdvancedSharpAdbClient.Logs.NullLogger`1"/>.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.SyncCommandConverter">
            <summary>
            Converts <see cref="T:AdvancedSharpAdbClient.Models.SyncCommand"/> values to their binary representation and vice versa.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.SyncCommandConverter.GetBytes(AdvancedSharpAdbClient.Models.SyncCommand)">
            <summary>
            Gets the byte array that represents the <see cref="T:AdvancedSharpAdbClient.Models.SyncCommand"/>.
            </summary>
            <param name="command">The <see cref="T:AdvancedSharpAdbClient.Models.SyncCommand"/> to convert.</param>
            <returns>A byte array that represents the <see cref="T:AdvancedSharpAdbClient.Models.SyncCommand"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.SyncCommandConverter.GetEnumerator(AdvancedSharpAdbClient.Models.SyncCommand)">
            <summary>
            Returns an enumerator that iterates through the <see cref="M:AdvancedSharpAdbClient.Models.SyncCommandConverter.GetBytes(AdvancedSharpAdbClient.Models.SyncCommand)"/>.
            </summary>
            <param name="command">The <see cref="T:AdvancedSharpAdbClient.Models.SyncCommand"/> to convert.</param>
            <returns>An enumerator that can be used to iterate through the <see cref="T:AdvancedSharpAdbClient.Models.SyncCommand"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.SyncCommandConverter.GetCommand(System.Byte[])">
            <summary>
            Determines which <see cref="T:AdvancedSharpAdbClient.Models.SyncCommand"/> is represented by this byte array.
            </summary>
            <param name="value">A byte array that represents a <see cref="T:AdvancedSharpAdbClient.Models.SyncCommand"/>.</param>
            <returns>The corresponding <see cref="T:AdvancedSharpAdbClient.Models.SyncCommand"/>.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions">
            <summary>
            Provides extension methods for the <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/> enum. Provides overloads for commonly used functions.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions.GetFileType(AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <summary>
            Gets the type of the given file status.
            </summary>
            <param name="mode">File status to process.</param>
            <returns>The type of the file status.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions.GetPermissions(AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <summary>
            Gets the permissions of the given file status.
            </summary>
            <param name="mode">File status to process.</param>
            <returns>The permissions of the given file status.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions.GetAccessPermissions(AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <summary>
            Gets the access permissions of the given file status.
            </summary>
            <param name="mode">File status to process.</param>
            <returns>The access permissions of the given file status.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions.IsDirectory(AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <summary>
            Checks if the given file status corresponds to a directory, as if determined by <see cref="F:AdvancedSharpAdbClient.Models.UnixFileStatus.Directory"/>.
            </summary>
            <param name="mode">File status to check.</param>
            <returns><see langword="true"/> if the type indicated <paramref name="mode"/> refers to a directory, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions.IsCharacterFile(AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <summary>
            Checks if the given file status or path corresponds to a character special file, as if determined by <see cref="F:AdvancedSharpAdbClient.Models.UnixFileStatus.Character"/>.
            Examples of character special files are character devices such as <c>/dev/null</c>, <c>/dev/tty</c>, <c>/dev/audio</c>, or <c>/dev/nvram</c> on Linux.
            </summary>
            <param name="mode">File status to check.</param>
            <returns><see langword="true"/> if the type indicated <paramref name="mode"/> refers to a character device, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions.IsBlockFile(AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <summary>
            Checks if the given file status corresponds to a block special file, as if determined by <see cref="F:AdvancedSharpAdbClient.Models.UnixFileStatus.Block"/>.
            Examples of block special files are block devices such as <c>/dev/sda</c> or <c>/dev/loop0</c> on Linux.
            </summary>
            <param name="mode">File status to check.</param>
            <returns><see langword="true"/> if the type indicated <paramref name="mode"/> refers to a block device, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions.IsRegularFile(AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <summary>
            Checks if the given file status corresponds to a regular file, as if determined by <see cref="F:AdvancedSharpAdbClient.Models.UnixFileStatus.Regular"/>.
            </summary>
            <param name="mode">File status to check.</param>
            <returns><see langword="true"/> if the type indicated by <paramref name="mode"/> refers to a regular file, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions.IsFIFO(AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <summary>
            Checks if the given file status corresponds to a FIFO or pipe file as if determined by <see cref="F:AdvancedSharpAdbClient.Models.UnixFileStatus.FIFO"/>.
            </summary>
            <param name="mode">File status to check.</param>
            <returns><see langword="true"/> if the type indicated <paramref name="mode"/> refers to a FIFO pipe, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions.IsSymbolicLink(AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <summary>
            Checks if the given file status corresponds to a symbolic link, as if determined by <see cref="F:AdvancedSharpAdbClient.Models.UnixFileStatus.SymbolicLink"/>.
            </summary>
            <param name="mode">File status to check.</param>
            <returns><see langword="true"/> if the type indicated <paramref name="mode"/> refers to a symbolic link, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions.IsSocket(AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <summary>
            Checks if the given file status or path corresponds to a named IPC socket, as if determined by <see cref="F:AdvancedSharpAdbClient.Models.UnixFileStatus.Socket"/>.
            </summary>
            <param name="mode">File status to check.</param>
            <returns><see langword="true"/> if the type indicated <paramref name="mode"/> refers to a named socket, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions.IsOther(AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <summary>
            Checks if the given file status corresponds to a file of type other type. That is, the file exists, but is neither regular file, nor directory nor a symlink.
            </summary>
            <param name="mode">File status to check.</param>
            <returns><see langword="true"/> if the type indicated <paramref name="mode"/> refers to a file that is not regular file, directory, or a symlink, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions.IsTypeKnown(AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <summary>
            Checks if the given file type is known, equivalent to <c>mode.GetFileType() != <see cref="F:AdvancedSharpAdbClient.Models.UnixFileStatus.None"/></c>.
            </summary>
            <param name="mode">File type to check.</param>
            <returns><see langword="true"/> if the given file type is a known file type, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions.FromPermissionCode(System.String)">
            <summary>
            Parses a Unix permission code into a <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/>.
            </summary>
            <param name="code">The permission code to parse.</param>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/> representing the parsed permission code.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions.ToPermissionCode(AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <summary>
            Provides a string representation of the given <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/>.
            </summary>
            <param name="mode">The <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/> to process.</param>
            <returns>A string representation of the given <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.UnixFileStatusExtensions.GetEnumerator(AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/>.
            </summary>
            <returns>An enumerator that can be used to iterate through the <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/>.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.AdbCommandLineStatus">
            <summary>
            The version and path of the adb command line client.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbCommandLineStatus.#ctor(System.Version,System.String,System.String)">
            <summary>
            The version and path of the adb command line client.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.AdbCommandLineStatus.VersionPattern">
            <summary>
            The regex pattern for getting the adb version from the <c>adb version</c> command.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.AdbCommandLineStatus.AdbVersion">
            <summary>
            Gets the version of the adb server.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.AdbCommandLineStatus.FileVersion">
            <summary>
            Gets the version of the adb command line client.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.AdbCommandLineStatus.FilePath">
            <summary>
            Gets the path to the adb command line client.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbCommandLineStatus.GetVersionFromOutput(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses the output of the <c>adb.exe version</c> command and determines the adb version.
            </summary>
            <param name="output">The output of the <c>adb.exe version</c> command.</param>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.AdbCommandLineStatus"/> object that represents the version and path of the adb command line client.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbCommandLineStatus.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:AdvancedSharpAdbClient.Models.AdbCommandLineStatus"/>.
            </summary>
            <returns>An enumerator that can be used to iterate through the <see cref="T:AdvancedSharpAdbClient.Models.AdbCommandLineStatus"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbCommandLineStatus.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbCommandLineStatus.VersionRegex">
            <summary>
            Gets a <see cref="T:System.Text.RegularExpressions.Regex"/> for parsing the adb version.
            </summary>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> for parsing the adb version.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.AdbResponse">
            <summary>
            The response returned by ADB server.
            </summary>
            <param name="message">the message of <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbResponse.#ctor(System.String)">
            <summary>
            The response returned by ADB server.
            </summary>
            <param name="message">the message of <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/> struct.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.AdbResponse.OK">
            <summary>
            Gets a <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/> that represents the OK response sent by ADB.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.AdbResponse.IOSuccess">
            <summary>
            Gets or sets a value indicating whether the IO communication was a success.
            </summary>
            <value><see langword="true"/> if successful; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.AdbResponse.Okay">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/> is okay.
            </summary>
            <value><see langword="true"/> if okay; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.AdbResponse.Timeout">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/> is timeout.
            </summary>
            <value><see langword="true"/> if timeout; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.AdbResponse.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbResponse.Throw">
            <summary>
            Throw <see cref="T:AdvancedSharpAdbClient.Exceptions.AdbException"/> if <see cref="P:AdvancedSharpAdbClient.Models.AdbResponse.IOSuccess"/> or <see cref="P:AdvancedSharpAdbClient.Models.AdbResponse.Okay"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbResponse.FromError(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/> class, based on an
            error message returned by adb.
            </summary>
            <param name="message">The error message returned by adb.</param>
            <returns>A new <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/> object that represents the error.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbResponse.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbResponse.Equals(AdvancedSharpAdbClient.Models.AdbResponse)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbResponse.op_Equality(AdvancedSharpAdbClient.Models.AdbResponse,AdvancedSharpAdbClient.Models.AdbResponse)">
            <summary>
            Tests whether two <see cref='T:AdvancedSharpAdbClient.Models.AdbResponse'/> objects are equally.
            </summary>
            <param name="left">The <see cref='T:AdvancedSharpAdbClient.Models.AdbResponse'/> structure that is to the left of the equality operator.</param>
            <param name="right">The <see cref='T:AdvancedSharpAdbClient.Models.AdbResponse'/> structure that is to the right of the equality operator.</param>
            <returns>This operator returns <see langword="true"/> if the two <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/> structures are equally; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbResponse.op_Inequality(AdvancedSharpAdbClient.Models.AdbResponse,AdvancedSharpAdbClient.Models.AdbResponse)">
            <summary>
            Tests whether two <see cref='T:AdvancedSharpAdbClient.Models.AdbResponse'/> objects are different.
            </summary>
            <param name="left">The <see cref='T:AdvancedSharpAdbClient.Models.AdbResponse'/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref='T:AdvancedSharpAdbClient.Models.AdbResponse'/> structure that is to the right of the inequality operator.</param>
            <returns>This operator returns <see langword="true"/> if the two <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/> structures are unequally; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbResponse.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbResponse.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/>.
            </summary>
            <returns><c>OK</c> if the response is an OK response, or <c>Error: {Message}</c> if the response indicates an error.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.AdbServerStatus">
            <summary>
            Represents the status of the adb server.
            </summary>
            <param name="IsRunning">The value indicating whether the server is currently running.</param>
            <param name="Version">The version of the server when it is running.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbServerStatus.#ctor(System.Boolean,System.Version)">
            <summary>
            Represents the status of the adb server.
            </summary>
            <param name="IsRunning">The value indicating whether the server is currently running.</param>
            <param name="Version">The version of the server when it is running.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbServerStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.AdbServerStatus"/> struct.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.AdbServerStatus.IsRunning">
            <summary>
            Gets a value indicating whether the server is currently running.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.AdbServerStatus.Version">
            <summary>
            Gets the version of the server when it is running.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbServerStatus.Deconstruct(System.Boolean@,System.Version@)">
            <summary>
            Deconstruct the <see cref="T:AdvancedSharpAdbClient.Models.AdbServerStatus"/> struct.
            </summary>
            <param name="isRunning">The value indicating whether the server is currently running.</param>
            <param name="version">The version of the server when it is running.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.AdbServerStatus.ToString">
            <summary>
            Gets a <see cref="T:System.String"/> that represents the current <see cref="T:AdvancedSharpAdbClient.Models.AdbServerStatus"/> object.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:AdvancedSharpAdbClient.Models.AdbServerStatus"/> object.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.ColorData">
            <summary>
            <para>Contains information about a color element. Information about each pixel on the screen
            is contained in a byte array (for example, a 4-byte array for 32-bit color depths), and
            a certain number of bits are reserved for each color.</para>
            <para>For example, in a 24-bit RGB structure, the first byte contains the red color,
            the next byte the green color and the last byte the blue color.</para>
            </summary>
            <param name="Offset">The offset, in bits, within the byte array for a pixel, at which the
            bytes that contain information for this color are stored.</param>
            <param name="Length">The number of bits that contain information for this color.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ColorData.#ctor(System.UInt32,System.UInt32)">
            <summary>
            <para>Contains information about a color element. Information about each pixel on the screen
            is contained in a byte array (for example, a 4-byte array for 32-bit color depths), and
            a certain number of bits are reserved for each color.</para>
            <para>For example, in a 24-bit RGB structure, the first byte contains the red color,
            the next byte the green color and the last byte the blue color.</para>
            </summary>
            <param name="Offset">The offset, in bits, within the byte array for a pixel, at which the
            bytes that contain information for this color are stored.</param>
            <param name="Length">The number of bits that contain information for this color.</param>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.ColorData.count">
            <summary>
            The length of <see cref="T:AdvancedSharpAdbClient.Models.ColorData"/> in bytes.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ColorData.Offset">
            <summary>
            Gets or sets the offset, in bits, within the byte array for a pixel, at which the
            bytes that contain information for this color are stored.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ColorData.Length">
            <summary>
            Gets or sets the number of bits that contain information for this color.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ColorData.Count">
            <summary>
            Gets the length of <see cref="T:AdvancedSharpAdbClient.Models.ColorData"/> in bytes.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ColorData.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ColorData.PrintMembers(System.Text.StringBuilder)">
            <summary>
            Provides a string representation of the <see cref="T:AdvancedSharpAdbClient.Models.ColorData"/> struct.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the string representation to.</param>
            <returns><see langword="true"/> if the members were appended to the <paramref name="builder"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ColorData.Deconstruct(System.UInt32@,System.UInt32@)">
            <summary>
            Deconstruct the <see cref="T:AdvancedSharpAdbClient.Models.ColorData"/> struct.
            </summary>
            <param name="offset">The offset, in bits, within the byte array for a pixel, at which the
            bytes that contain information for this color are stored.</param>
            <param name="length">The number of bits that contain information for this color.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ColorData.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ColorData.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.DeviceData">
            <summary>
            Represents a device that is connected to the Android Debug Bridge.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.DeviceData.DeviceDataRegexString">
            <summary>
            A regular expression that can be used to parse the device information that is returned by the Android Debut Bridge.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.DeviceData.Regex">
            <summary>
            A regular expression that can be used to parse the device information that is returned by the Android Debut Bridge.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.DeviceData"/> struct based on
            data retrieved from the Android Debug Bridge.
            </summary>
            <param name="data">The data retrieved from the Android Debug Bridge that represents a device.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.DeviceData.Serial">
            <summary>
            Gets or sets the device serial number.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.DeviceData.State">
            <summary>
            Gets or sets the device state.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.DeviceData.Model">
            <summary>
            Gets or sets the device model name.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.DeviceData.Product">
            <summary>
            Gets or sets the device product name.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.DeviceData.Name">
            <summary>
            Gets or sets the device name.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.DeviceData.Features">
            <summary>
            Gets or sets the features available on the device.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.DeviceData.Usb">
            <summary>
            Gets or sets the USB port to which this device is connected. Usually available on Linux only.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.DeviceData.TransportId">
            <summary>
            Gets or sets the transport ID for this device.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.DeviceData.Message">
            <summary>
            Gets or sets the device info message. Currently only seen for NoPermissions state.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.DeviceData.IsEmpty">
            <summary>
            <see langword="false"/> if <see cref="T:AdvancedSharpAdbClient.Models.DeviceData"/> does not have a valid serial number; otherwise, <see langword="true"/>.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.CreateFromAdbData(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.DeviceData"/> class based on
            data retrieved from the Android Debug Bridge.
            </summary>
            <param name="data">The data retrieved from the Android Debug Bridge that represents a device.</param>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.DeviceData"/> object that represents the device.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.CreateSyncService(System.Net.EndPoint)">
            <summary>
            Creates a new instance of the <see cref="T:AdvancedSharpAdbClient.SyncService"/> class, which provides access to the sync service running on the Android device.
            </summary>
            <param name="endPoint">The <see cref="T:System.Net.EndPoint"/> at which the adb server is listening.</param>
            <returns>A new instance of the <see cref="T:AdvancedSharpAdbClient.SyncService"/> class.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.CreateSyncService">
            <summary>
            Creates a new instance of the <see cref="T:AdvancedSharpAdbClient.SyncService"/> class, which provides access to the sync service running on the Android device.
            </summary>
            <returns>A new instance of the <see cref="T:AdvancedSharpAdbClient.SyncService"/> class.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.CreateDeviceClient(AdvancedSharpAdbClient.IAdbClient)">
            <summary>
            Creates a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.DeviceClient"/> class, which can be used to interact with this device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use to communicate with the Android Debug Bridge.</param>
            <returns>A new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.DeviceClient"/> class.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.CreateDeviceClient">
            <summary>
            Creates a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.DeviceClient"/> class, which can be used to interact with this device.
            </summary>
            <returns>A new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.DeviceClient"/> class.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.CreatePackageManager(AdvancedSharpAdbClient.IAdbClient,System.String[])">
            <summary>
            Creates a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.DeviceClient"/> class, which can be used to get information about packages that are installed on a device.
            </summary>
            <param name="client">The <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> to use to communicate with the Android Debug Bridge.</param>
            <param name="arguments">The arguments to pass to <c>pm list packages</c>.</param>
            <returns>A new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.PackageManager"/> class.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.CreatePackageManager(System.String[])">
            <summary>
            Creates a new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.DeviceClient"/> class, which can be used to get information about packages that are installed on a device.
            </summary>
            <param name="arguments">The arguments to pass to <c>pm list packages</c>.</param>
            <returns>A new instance of the <see cref="T:AdvancedSharpAdbClient.DeviceCommands.PackageManager"/> class.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.Equals(AdvancedSharpAdbClient.Models.DeviceData)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.op_Equality(System.Nullable{AdvancedSharpAdbClient.Models.DeviceData},System.Nullable{AdvancedSharpAdbClient.Models.DeviceData})">
            <summary>
            Tests whether two <see cref='T:AdvancedSharpAdbClient.Models.DeviceData'/> objects are equally.
            </summary>
            <param name="left">The <see cref='T:AdvancedSharpAdbClient.Models.DeviceData'/> structure that is to the left of the equality operator.</param>
            <param name="right">The <see cref='T:AdvancedSharpAdbClient.Models.DeviceData'/> structure that is to the right of the equality operator.</param>
            <returns>This operator returns <see langword="true"/> if the two <see cref="T:AdvancedSharpAdbClient.Models.DeviceData"/> structures are equally; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.op_Inequality(System.Nullable{AdvancedSharpAdbClient.Models.DeviceData},System.Nullable{AdvancedSharpAdbClient.Models.DeviceData})">
            <summary>
            Tests whether two <see cref='T:AdvancedSharpAdbClient.Models.DeviceData'/> objects are different.
            </summary>
            <param name="left">The <see cref='T:AdvancedSharpAdbClient.Models.DeviceData'/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref='T:AdvancedSharpAdbClient.Models.DeviceData'/> structure that is to the right of the inequality operator.</param>
            <returns>This operator returns <see langword="true"/> if the two <see cref="T:AdvancedSharpAdbClient.Models.DeviceData"/> structures are unequally; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.EnsureDevice(AdvancedSharpAdbClient.Models.DeviceData@,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="device"/> does not have a valid serial number.
            </summary>
            <param name="device">A <see cref="T:AdvancedSharpAdbClient.Models.DeviceData"/> object to validate.</param>
            <param name="paramName">The name of the parameter with which <paramref name="device"/> corresponds.</param>
            <returns>The <paramref name="device"/> parameter, if it is valid.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="device"/> does not have a valid serial number.</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.GetStateFromString(System.String)">
            <summary>
            Gets the device state from the string value.
            </summary>
            <param name="state">The device state string.</param>
            <returns>The device state.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.GetDebuggerDisplay">
            <summary>
            Get the value of the <see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/> for this instance.
            </summary>
            <returns>The value of the <see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/> for this instance.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceData.DeviceDataRegex">
            <summary>
            Gets a <see cref="T:System.Text.RegularExpressions.Regex"/> that can be used to parse the device information that is returned by the Android Debut Bridge.
            </summary>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> that can be used to parse the device information that is returned by the Android Debut Bridge.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.DeviceDataEventArgs">
            <summary>
            The event arguments that are passed when a device event occurs.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceDataEventArgs.#ctor(AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            The event arguments that are passed when a device event occurs.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.DeviceDataEventArgs.Device">
            <summary>
            Gets the device where the change occurred.
            </summary>
            <value>The device where the change occurred.</value>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceDataEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.DeviceDataNotifyEventArgs">
            <summary>
            The event arguments that are passed when a device event occurs.
            </summary>
            <param name="devices">The list of device.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceDataNotifyEventArgs.#ctor(System.Collections.Generic.IEnumerable{AdvancedSharpAdbClient.Models.DeviceData})">
            <summary>
            The event arguments that are passed when a device event occurs.
            </summary>
            <param name="devices">The list of device.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.DeviceDataNotifyEventArgs.Devices">
            <summary>
            Gets the list of device where the change occurred.
            </summary>
            <value>The list of device where the change occurred.</value>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceDataNotifyEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.DeviceDataConnectEventArgs">
            <summary>
            The event arguments that are passed when a device event occurs.
            </summary>
            <param name="device">The device.</param>
            <param name="isConnect">The device after the reported change.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceDataConnectEventArgs.#ctor(AdvancedSharpAdbClient.Models.DeviceData,System.Boolean)">
            <summary>
            The event arguments that are passed when a device event occurs.
            </summary>
            <param name="device">The device.</param>
            <param name="isConnect">The device after the reported change.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.DeviceDataConnectEventArgs.IsConnect">
            <summary>
            Gets the connect state of the device after the reported change.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceDataConnectEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.DeviceDataChangeEventArgs">
            <summary>
            The event arguments that are passed when a device event occurs.
            </summary>
            <param name="device">The device.</param>
            <param name="newState">The state of the device after the reported change.</param>
            <param name="oldState">The state of the device before the reported change.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceDataChangeEventArgs.#ctor(AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Models.DeviceState,AdvancedSharpAdbClient.Models.DeviceState)">
            <summary>
            The event arguments that are passed when a device event occurs.
            </summary>
            <param name="device">The device.</param>
            <param name="newState">The state of the device after the reported change.</param>
            <param name="oldState">The state of the device before the reported change.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.DeviceDataChangeEventArgs.NewState">
            <summary>
            Gets the state of the device after the reported change.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.DeviceDataChangeEventArgs.OldState">
            <summary>
            Gets the state of the device before the reported change.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.DeviceDataChangeEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.AppStatus">
            <summary>
            The status of an application if it is stopped or running in foreground or background.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.AppStatus.Stopped">
            <summary>
            The application is stopped.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.AppStatus.Background">
            <summary>
            The application is running in background.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.AppStatus.Foreground">
            <summary>
            The application is running in foreground.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.DeviceState">
            <summary>
            Defines the state of an Android device connected to the Android Debug Bridge.
            </summary>
            <remarks>
            <para><seealso href="https://android.googlesource.com/platform/system/core/+/master/adb/adb.h"/></para>
            <para><seealso href="https://android.googlesource.com/platform/system/core/+/master/adb/transport.cpp"/></para>
            </remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.DeviceState.Online">
            <summary>
            The instance is now connected to the adb server. Note that this state does not imply that the Android system is
            fully booted and operational, since the instance connects to adb while the system is still booting.
            However, after boot-up, this is the normal operational state of an emulator/device instance.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.DeviceState.Connecting">
            <summary>
            The instance is connecting to adb.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.DeviceState.Offline">
            <summary>
            The instance is not connected to adb or is not responding.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.DeviceState.Unknown">
            <summary>
            The device state is unknown.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.DeviceState.BootLoader">
            <summary>
            The device is in bootloader mode
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.DeviceState.Recovery">
            <summary>
            The device is in recovery mode.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.DeviceState.Download">
            <summary>
            The device is in download mode
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.DeviceState.Authorizing">
            <summary>
            The device is connected to adb, but adb authorizing for remote debugging of this device.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.DeviceState.Unauthorized">
            <summary>
            The device is connected to adb, but adb is not authorized for remote debugging of this device.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.DeviceState.Host">
            <summary>
            The device is the adb host.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.DeviceState.NoPermissions">
            <summary>
            Insufficient permissions to communicate with the device.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.DeviceState.Sideload">
            <summary>
            The device is in sideload mode.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.ForwardProtocol">
            <summary>
            Represents a protocol which is being forwarded over adb.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.ForwardProtocol.Tcp">
            <summary>
            Enables the forwarding of a TCP port.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.ForwardProtocol.LocalAbstract">
            <summary>
            Enables the forwarding of a Unix domain socket.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.ForwardProtocol.LocalReserved">
            <summary>
            Enables the forwarding of a Unix domain socket.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.ForwardProtocol.LocalFilesystem">
            <summary>
            Enables the forwarding of a Unix domain socket.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.ForwardProtocol.Device">
            <summary>
            Enables the forwarding of a character device.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.ForwardProtocol.JavaDebugWireProtocol">
            <summary>
            Enables port forwarding of the java debugger for a specific process.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.PackageInstallProgressState">
            <summary>
            Represents the state of the installation.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.Preparing">
            <summary>
            Preparing the installation.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.Uploading">
            <summary>
            Uploading packages to the device.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.CreateSession">
            <summary>
            Create the session for the installation.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.WriteSession">
            <summary>
            Write the package to link with session.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.Installing">
            <summary>
            The install is in progress.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.PostInstall">
            <summary>
            The installation has completed and cleanup actions are in progress.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.Finished">
            <summary>
            The operation has completed.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.StartServerResult">
            <summary>
            Gives information about a <see cref="M:AdvancedSharpAdbClient.AdbServer.StartServer(System.String,System.Boolean)"/> operation.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.StartServerResult.AlreadyRunning">
            <summary>
            The adb server was already running. The server was not restarted.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.StartServerResult.RestartedOutdatedDaemon">
            <summary>
            The adb server was running, but was running an outdated version of adb.
            The server was stopped and a newer version of the server was started.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.StartServerResult.Started">
            <summary>
            The adb server was not running, and a new instance of the adb server was started.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.StartServerResult.Starting">
            <summary>
            An <see cref="M:AdvancedSharpAdbClient.IAdbServer.StartServer(System.String,System.Boolean)"/> operation is already in progress.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.SyncCommand">
            <summary>
            Defines a command that can be sent to, or a response that can be received from the sync service.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.SyncCommand.STAT">
            <summary>
            Stat a file.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.SyncCommand.LIST">
            <summary>
            List the files in a folder.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.SyncCommand.SEND">
            <summary>
            Send a file to device.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.SyncCommand.RECV">
            <summary>
            Retrieve a file from device.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.SyncCommand.DENT">
            <summary>
            A directory entry.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.SyncCommand.DONE">
            <summary>
            The operation has completed.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.SyncCommand.DATA">
            <summary>
            Marks the start of a data packet.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.SyncCommand.OKAY">
            <summary>
            The server has acknowledged the request.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.SyncCommand.FAIL">
            <summary>
            The operation has failed.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.SyncCommand.QUIT">
            <summary>
            The server has acknowledged the request.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.SyncCommand.STA2">
            <summary>
            Stat a file v2.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.SyncCommand.LST2">
            <summary>
            Stat a list v2.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.TransportType">
            <summary>
            Specifies the transport type used between the device and the Android Debug Bridge server.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.TransportType.Usb">
            <summary>
            The device is connected through USB.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.TransportType.Local">
            <summary>
            The device is connected through a local TCP connection.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.TransportType.Any">
            <summary>
            The device is connected through any transport type.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.TransportType.Host">
            <summary>
            The device is connected through the host transport type.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.UnixFileStatus">
            <summary>
            Describes the properties of a file on an Android device.
            </summary>
            <remarks><see href="https://github.com/openbsd/src/blob/master/sys/sys/stat.h"/></remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.None">
            <summary>
            Empty property.
            </summary>
            <remarks>Permission code: <c>---------</c> (<c>000</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.SetUser">
            <summary>
            Set user permission.
            </summary>
            <remarks>Permission code: <c>--S------</c> (<c>4000</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.SetGroup">
            <summary>
            Set group permission.
            </summary>
            <remarks>Permission code: <c>-----S---</c> (<c>2000</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.StickyBit">
            <summary>
            Sticky bit permission.
            </summary>
            <remarks>Permission code: <c>--------T</c> (<c>1000</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.UserRead">
            <summary>
            Read permission for owner.
            </summary>
            <remarks>Permission code: <c>r--------</c> (<c>400</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.UserWrite">
            <summary>
            Write permission for owner.
            </summary>
            <remarks>Permission code: <c>-w-------</c> (<c>200</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.UserExecute">
            <summary>
            Execute permission for owner.
            </summary>
            <remarks>Permission code: <c>--x------</c> (<c>100</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.UserAll">
            <summary>
            All owner permissions.
            </summary>
            <remarks>Permission code: <c>rwx------</c> (<c>700</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.UserMask">
            <summary>
            The mask that can be used to retrieve the RWX for owner from a <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/>.
            </summary>
            <remarks>Gets RWX for owner by <c>mode &amp; <see cref="F:AdvancedSharpAdbClient.Models.UnixFileStatus.UserMask"/></c>.</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.GroupRead">
            <summary>
            Read permission for group.
            </summary>
            <remarks>Permission code: <c>---r-----</c> (<c>040</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.GroupWrite">
            <summary>
            Write permission for group.
            </summary>
            <remarks>Permission code: <c>----w----</c> (<c>020</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.GroupExecute">
            <summary>
            Execute permission for group.
            </summary>
            <remarks>Permission code: <c>-----x---</c> (<c>010</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.GroupAll">
            <summary>
            All group permissions.
            </summary>
            <remarks>Permission code: <c>---rwx---</c> (<c>070</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.GroupMask">
            <summary>
            The mask that can be used to retrieve the RWX for group from a <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/>.
            </summary>
            <remarks>Gets RWX for group by <c>mode &amp; <see cref="F:AdvancedSharpAdbClient.Models.UnixFileStatus.GroupMask"/></c>.</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.OtherRead">
            <summary>
            Read permission for others.
            </summary>
            <remarks>Permission code: <c>------r--</c> (<c>004</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.OtherWrite">
            <summary>
            Write permission for others.
            </summary>
            <remarks>Permission code: <c>-------w-</c> (<c>001</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.OtherExecute">
            <summary>
            Execute permission for others.
            </summary>
            <remarks>Permission code: <c>--------x</c> (<c>001</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.OtherAll">
            <summary>
            All others permissions.
            </summary>
            <remarks>Permission code: <c>------rwx</c> (<c>007</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.OtherMask">
            <summary>
            The mask that can be used to retrieve the RWX for others from a <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/>.
            </summary>
            <remarks>Gets RWX for others by <c>mode &amp; <see cref="F:AdvancedSharpAdbClient.Models.UnixFileStatus.OtherMask"/></c>.</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.TypeMask">
            <summary>
            The mask that can be used to retrieve the file type from a <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/>.
            </summary>
            <remarks>Gets file type by <c>mode &amp; <see cref="F:AdvancedSharpAdbClient.Models.UnixFileStatus.TypeMask"/></c>.</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.FIFO">
            <summary>
            The file is a first-in first-out queue.
            </summary>
            <remarks>Permission code: <c>p---------</c></remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.Character">
            <summary>
            The file is a character device.
            </summary>
            <remarks>Permission code: <c>c---------</c></remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.Directory">
            <summary>
            The file is a directory.
            </summary>
            <remarks>Permission code: <c>d---------</c></remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.Block">
            <summary>
            The file is a block device.
            </summary>
            <remarks>Permission code: <c>b---------</c></remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.Regular">
            <summary>
            The file is a regular file.
            </summary>
            <remarks>Permission code: <c>----------</c></remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.SymbolicLink">
            <summary>
            The file is a symbolic link.
            </summary>
            <remarks>Permission code: <c>l---------</c></remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.Socket">
            <summary>
            The file is a Unix socket.
            </summary>
            <remarks>Permission code: <c>s---------</c></remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.VTX">
            <summary>
            Save swapped text even after use.
            </summary>
            <remarks>Permission code: <c>--------T</c> (<c>1000</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.AccessPermissions">
            <summary>
            All access permissions.
            </summary>
            <remarks>Permission code: <c>rwxrwxrwx</c> (<c>777</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.AllPermissions">
            <summary>
            All permissions.
            </summary>
            <remarks>Permission code: <c>rwsrwsrwt</c> (<c>7777</c>)</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.UnixFileStatus.DefaultFileMode">
            <summary>
            The default file mode.
            </summary>
            <remarks>Permission code: <c>rw-rw-rw-</c> (<c>666</c>)</remarks>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.FileStatistics">
            <summary>
            Contains information about a file on the remote device.
            </summary>
            <remarks><see href="https://android.googlesource.com/platform/system/adb/+/refs/heads/main/file_sync_service.h"/></remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FileStatistics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.FileStatistics"/> struct.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FileStatistics.Path">
            <summary>
            Gets or sets the path of the file.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FileStatistics.FileMode">
            <summary>
            Gets or sets the <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/> attributes of the file.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FileStatistics.Size">
            <summary>
            Gets or sets the total file size, in bytes.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FileStatistics.Time">
            <summary>
            Gets or sets the time of last modification.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FileStatistics.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:AdvancedSharpAdbClient.Models.FileStatistics"/>.
            </summary>
            <returns>An enumerator that can be used to iterate through the <see cref="T:AdvancedSharpAdbClient.Models.FileStatistics"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FileStatistics.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FileStatistics.Equals(AdvancedSharpAdbClient.Models.FileStatistics)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FileStatistics.op_Equality(AdvancedSharpAdbClient.Models.FileStatistics,AdvancedSharpAdbClient.Models.FileStatistics)">
            <summary>
            Tests whether two <see cref='T:AdvancedSharpAdbClient.Models.FileStatistics'/> objects are equally.
            </summary>
            <param name="left">The <see cref='T:AdvancedSharpAdbClient.Models.FileStatistics'/> structure that is to the left of the equality operator.</param>
            <param name="right">The <see cref='T:AdvancedSharpAdbClient.Models.FileStatistics'/> structure that is to the right of the equality operator.</param>
            <returns>This operator returns <see langword="true"/> if the two <see cref="T:AdvancedSharpAdbClient.Models.FileStatistics"/> structures are equally; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FileStatistics.op_Inequality(AdvancedSharpAdbClient.Models.FileStatistics,AdvancedSharpAdbClient.Models.FileStatistics)">
            <summary>
            Tests whether two <see cref='T:AdvancedSharpAdbClient.Models.FileStatistics'/> objects are different.
            </summary>
            <param name="left">The <see cref='T:AdvancedSharpAdbClient.Models.FileStatistics'/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref='T:AdvancedSharpAdbClient.Models.FileStatistics'/> structure that is to the right of the inequality operator.</param>
            <returns>This operator returns <see langword="true"/> if the two <see cref="T:AdvancedSharpAdbClient.Models.FileStatistics"/> structures are unequally; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FileStatistics.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FileStatistics.ToString">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.ForwardData">
            <summary>
            Contains information about port forwarding configured by the Android Debug Bridge.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.ForwardData"/> struct.
            </summary>
            <param name="serialNumber">The serial number of the device for which the port forwarding is configured.</param>
            <param name="local">The <see cref="T:System.String"/> that represents the local (PC) endpoint.</param>
            <param name="remote">The <see cref="T:System.String"/> that represents the remote (device) endpoint.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.ForwardData"/> class by parsing a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to parse.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ForwardData.SerialNumber">
            <summary>
            Gets or sets the serial number of the device for which the port forwarding is configured.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ForwardData.Local">
            <summary>
            Gets or sets a <see cref="T:System.String"/> that represents the local (PC) endpoint.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ForwardData.LocalSpec">
            <summary>
            Gets a <see cref="T:AdvancedSharpAdbClient.Models.ForwardSpec"/> that represents the local (PC) endpoint.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ForwardData.Remote">
            <summary>
            Gets or sets a <see cref="T:System.String"/> that represents the remote (device) endpoint.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ForwardData.RemoteSpec">
            <summary>
            Gets a <see cref="T:AdvancedSharpAdbClient.Models.ForwardSpec"/> that represents the remote (device) endpoint.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardData.FromString(System.String)">
            <summary>
            Creates a new instance of the <seealso cref="T:AdvancedSharpAdbClient.Models.ForwardData"/> class by parsing a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to parse.</param>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.ForwardData"/> object that represents the port forwarding information contained in <paramref name="value"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardData.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardData.Equals(AdvancedSharpAdbClient.Models.ForwardData)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardData.op_Equality(AdvancedSharpAdbClient.Models.ForwardData,AdvancedSharpAdbClient.Models.ForwardData)">
            <summary>
            Tests whether two <see cref='T:AdvancedSharpAdbClient.Models.ForwardData'/> objects are equally.
            </summary>
            <param name="left">The <see cref='T:AdvancedSharpAdbClient.Models.ForwardData'/> structure that is to the left of the equality operator.</param>
            <param name="right">The <see cref='T:AdvancedSharpAdbClient.Models.ForwardData'/> structure that is to the right of the equality operator.</param>
            <returns>This operator returns <see langword="true"/> if the two <see cref="T:AdvancedSharpAdbClient.Models.ForwardData"/> structures are equally; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardData.op_Inequality(AdvancedSharpAdbClient.Models.ForwardData,AdvancedSharpAdbClient.Models.ForwardData)">
            <summary>
            Tests whether two <see cref='T:AdvancedSharpAdbClient.Models.ForwardData'/> objects are different.
            </summary>
            <param name="left">The <see cref='T:AdvancedSharpAdbClient.Models.ForwardData'/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref='T:AdvancedSharpAdbClient.Models.ForwardData'/> structure that is to the right of the inequality operator.</param>
            <returns>This operator returns <see langword="true"/> if the two <see cref="T:AdvancedSharpAdbClient.Models.ForwardData"/> structures are unequally; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardData.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.ForwardSpec">
            <summary>
            Represents an adb forward specification as used by the various adb port forwarding functions.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.ForwardSpec.Mappings">
            <summary>
            Provides a mapping between a <see cref="T:System.String"/> and a <see cref="T:AdvancedSharpAdbClient.Models.ForwardProtocol"/>
            value, used for the <see cref="T:System.String"/> representation of the <see cref="T:AdvancedSharpAdbClient.Models.ForwardSpec"/>
            class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardSpec.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.ForwardSpec"/> struct from its <see cref="T:System.String"/> representation.
            </summary>
            <param name="spec">A <see cref="T:System.String"/> which represents a <see cref="T:AdvancedSharpAdbClient.Models.ForwardSpec"/>.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ForwardSpec.Protocol">
            <summary>
            Gets or sets the protocol which is being forwarded.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ForwardSpec.Port">
            <summary>
            Gets or sets, when the <see cref="P:AdvancedSharpAdbClient.Models.ForwardSpec.Protocol"/> is <see cref="F:AdvancedSharpAdbClient.Models.ForwardProtocol.Tcp"/>, the port
            number of the port being forwarded.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ForwardSpec.SocketName">
            <summary>
            Gets or sets, when the <see cref="P:AdvancedSharpAdbClient.Models.ForwardSpec.Protocol"/> is <see cref="F:AdvancedSharpAdbClient.Models.ForwardProtocol.LocalAbstract"/>,
            <see cref="F:AdvancedSharpAdbClient.Models.ForwardProtocol.LocalReserved"/> or <see cref="F:AdvancedSharpAdbClient.Models.ForwardProtocol.LocalFilesystem"/>,
            the Unix domain socket name of the socket being forwarded.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ForwardSpec.ProcessId">
            <summary>
            Gets or sets, when the <see cref="P:AdvancedSharpAdbClient.Models.ForwardSpec.Protocol"/> is <see cref="F:AdvancedSharpAdbClient.Models.ForwardProtocol.JavaDebugWireProtocol"/>,
            the process id of the process to which the debugger is attached.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardSpec.Parse(System.String)">
            <summary>
            Creates a <see cref="T:AdvancedSharpAdbClient.Models.ForwardSpec"/> from its <see cref="T:System.String"/> representation.
            </summary>
            <param name="spec">A <see cref="T:System.String"/> which represents a <see cref="T:AdvancedSharpAdbClient.Models.ForwardSpec"/>.</param>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.ForwardSpec"/> which represents <paramref name="spec"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardSpec.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardSpec.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardSpec.Equals(AdvancedSharpAdbClient.Models.ForwardSpec)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardSpec.op_Equality(AdvancedSharpAdbClient.Models.ForwardSpec,AdvancedSharpAdbClient.Models.ForwardSpec)">
            <summary>
            Tests whether two <see cref='T:AdvancedSharpAdbClient.Models.ForwardSpec'/> objects are equally.
            </summary>
            <param name="left">The <see cref='T:AdvancedSharpAdbClient.Models.ForwardSpec'/> structure that is to the left of the equality operator.</param>
            <param name="right">The <see cref='T:AdvancedSharpAdbClient.Models.ForwardSpec'/> structure that is to the right of the equality operator.</param>
            <returns>This operator returns <see langword="true"/> if the two <see cref="T:AdvancedSharpAdbClient.Models.ForwardSpec"/> structures are equally; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardSpec.op_Inequality(AdvancedSharpAdbClient.Models.ForwardSpec,AdvancedSharpAdbClient.Models.ForwardSpec)">
            <summary>
            Tests whether two <see cref='T:AdvancedSharpAdbClient.Models.ForwardSpec'/> objects are different.
            </summary>
            <param name="left">The <see cref='T:AdvancedSharpAdbClient.Models.ForwardSpec'/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref='T:AdvancedSharpAdbClient.Models.ForwardSpec'/> structure that is to the right of the inequality operator.</param>
            <returns>This operator returns <see langword="true"/> if the two <see cref="T:AdvancedSharpAdbClient.Models.ForwardSpec"/> structures are unequally; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ForwardSpec.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.Framebuffer">
            <summary>
            Provides access to the framebuffer (that is, a copy of the image being displayed on the device screen).
            </summary>
            <param name="device">The device for which to fetch the frame buffer.</param>
            <param name="endPoint">The <see cref="P:AdvancedSharpAdbClient.Models.Framebuffer.EndPoint"/> at which the adb server is listening.</param>
            <param name="adbSocketFactory">The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.#ctor(AdvancedSharpAdbClient.Models.DeviceData,System.Net.EndPoint,System.Func{System.Net.EndPoint,AdvancedSharpAdbClient.IAdbSocket})">
            <summary>
            Provides access to the framebuffer (that is, a copy of the image being displayed on the device screen).
            </summary>
            <param name="device">The device for which to fetch the frame buffer.</param>
            <param name="endPoint">The <see cref="P:AdvancedSharpAdbClient.Models.Framebuffer.EndPoint"/> at which the adb server is listening.</param>
            <param name="adbSocketFactory">The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>.</param>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.Framebuffer.headerData">
            <summary>
            The <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>s which contains the framebuffer header.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.Framebuffer.headerInitialized">
            <summary>
            The <see cref="T:System.Boolean"/> which indicates whether the header has been initialized.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.Framebuffer.disposed">
            <summary>
            The <see cref="T:System.Boolean"/> that indicates whether this instance has been disposed.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.Framebuffer.AdbSocketFactory">
            <summary>
            The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.#ctor(AdvancedSharpAdbClient.Models.DeviceData,System.Net.EndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.Framebuffer"/> class.
            </summary>
            <param name="device">The device for which to fetch the frame buffer.</param>
            <param name="endPoint">The <see cref="P:AdvancedSharpAdbClient.Models.Framebuffer.EndPoint"/> at which the adb server is listening.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.#ctor(AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.IAdbClient,System.Func{System.Net.EndPoint,AdvancedSharpAdbClient.IAdbSocket})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.Framebuffer"/> class.
            </summary>
            <param name="device">The device for which to fetch the frame buffer.</param>
            <param name="client">A <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> which manages the connection with adb.</param>
            <param name="adbSocketFactory">The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.#ctor(AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.IAdbClient)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.Framebuffer"/> class.
            </summary>
            <param name="device">The device for which to fetch the frame buffer.</param>
            <param name="client">A <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> which manages the connection with adb.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.#ctor(AdvancedSharpAdbClient.Models.DeviceData,System.Func{System.Net.EndPoint,AdvancedSharpAdbClient.IAdbSocket})">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.Framebuffer"/> class.
            </summary>
            <param name="device">The device for which to fetch the frame buffer.</param>
            <param name="adbSocketFactory">The <see cref="T:System.Func`2"/> to create <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.#ctor(AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.Framebuffer"/> class.
            </summary>
            <param name="device">The device for which to fetch the frame buffer.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.Framebuffer.Device">
            <summary>
            Gets the device for which to fetch the frame buffer.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.Framebuffer.EndPoint">
            <summary>
            Gets the <see cref="T:System.Net.EndPoint"/> at which the adb server is listening.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.Framebuffer.Header">
            <summary>
            Gets the framebuffer header. The header contains information such as the width and height and the color encoding.
            This property is set after you call <see cref="M:AdvancedSharpAdbClient.Models.Framebuffer.Refresh(System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.Framebuffer.Data">
            <summary>
            Gets the framebuffer data. You need to parse the <see cref="T:AdvancedSharpAdbClient.Models.FramebufferHeader"/> to interpret this data (such as the color encoding).
            This property is set after you call <see cref="M:AdvancedSharpAdbClient.Models.Framebuffer.Refresh(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.Refresh(System.Boolean)">
            <summary>
            Refreshes the framebuffer: fetches the latest framebuffer data from the device. Access the <see cref="P:AdvancedSharpAdbClient.Models.Framebuffer.Header"/>
            and <see cref="P:AdvancedSharpAdbClient.Models.Framebuffer.Data"/> properties to get the updated framebuffer data.
            </summary>
            <param name="reset">Refreshes the header of framebuffer when <see langword="true"/>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.RefreshAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously refreshes the framebuffer: fetches the latest framebuffer data from the device. Access the <see cref="P:AdvancedSharpAdbClient.Models.Framebuffer.Header"/>
            and <see cref="P:AdvancedSharpAdbClient.Models.Framebuffer.Data"/> properties to get the updated framebuffer data.
            </summary>
            <param name="reset">Refreshes the header of framebuffer when <see langword="true"/>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.ToImage">
            <summary>
            Converts the framebuffer data to a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> which represents the framebuffer data.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.op_Explicit(AdvancedSharpAdbClient.Models.Framebuffer)~System.Drawing.Image">
            <summary>
            Converts the framebuffer data to a <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="value">The <see cref="T:AdvancedSharpAdbClient.Models.Framebuffer"/> to convert.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.op_Explicit(AdvancedSharpAdbClient.Models.Framebuffer)~System.Drawing.Bitmap">
            <summary>
            Converts the framebuffer data to a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="value">The <see cref="T:AdvancedSharpAdbClient.Models.Framebuffer"/> to convert.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.Clone(AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Creates a new <see cref="T:AdvancedSharpAdbClient.Models.Framebuffer"/> object that is a copy of the current instance with new <see cref="P:AdvancedSharpAdbClient.Models.Framebuffer.Device"/>.
            </summary>
            <param name="device">The new <see cref="P:AdvancedSharpAdbClient.Models.Framebuffer.Device"/> to use.</param>
            <returns>A new <see cref="T:AdvancedSharpAdbClient.Models.Framebuffer"/> object that is a copy of this instance with new <see cref="P:AdvancedSharpAdbClient.Models.Framebuffer.Device"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.Clone">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.Framebuffer.EnsureNotDisposed">
            <summary>
            Throws an exception if this <see cref="T:AdvancedSharpAdbClient.Models.Framebuffer"/> has been disposed.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.FramebufferHeader">
            <summary>
            Whenever the <c>framebuffer:</c> service is invoked, the adb server responds with the contents
            of the framebuffer, prefixed with a <see cref="T:AdvancedSharpAdbClient.Models.FramebufferHeader"/> object that contains more
            information about the framebuffer.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.FramebufferHeader.MaxLength">
            <summary>
            The length of the head when <see cref="P:AdvancedSharpAdbClient.Models.FramebufferHeader.Version"/> is <see langword="2"/>.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.FramebufferHeader.MiniLength">
            <summary>
            The length of the head when <see cref="P:AdvancedSharpAdbClient.Models.FramebufferHeader.Version"/> is <see langword="1"/>.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FramebufferHeader.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.FramebufferHeader"/> struct based on a byte array which contains the data.
            </summary>
            <param name="data">The data that feeds the <see cref="T:AdvancedSharpAdbClient.Models.FramebufferHeader"/> struct.</param>
            <remarks>As defined in <see href="https://android.googlesource.com/platform/system/core/+/master/adb/framebuffer_service.cpp"/></remarks>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FramebufferHeader.Version">
            <summary>
            Gets or sets the version of the framebuffer struct.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FramebufferHeader.Bpp">
            <summary>
            Gets or sets the number of bytes per pixel. Usual values include 32 or 24.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FramebufferHeader.ColorSpace">
            <summary>
            Gets or sets the color space. Only available starting with <see cref="P:AdvancedSharpAdbClient.Models.FramebufferHeader.Version"/> 2.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FramebufferHeader.Size">
            <summary>
            Gets or sets the total size, in bits, of the framebuffer.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FramebufferHeader.Width">
            <summary>
            Gets or sets the width, in pixels, of the framebuffer.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FramebufferHeader.Height">
            <summary>
            Gets or sets the height, in pixels, of the framebuffer.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FramebufferHeader.Red">
            <summary>
            Gets or sets information about the red color channel.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FramebufferHeader.Blue">
            <summary>
            Gets or sets information about the blue color channel.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FramebufferHeader.Green">
            <summary>
            Gets or sets information about the green color channel.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FramebufferHeader.Alpha">
            <summary>
            Gets or sets information about the alpha channel.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FramebufferHeader.Count">
            <summary>
            Gets the length of the head in bytes.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.FramebufferHeader.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FramebufferHeader.Read(System.Byte[])">
            <summary>
            Creates a new <see cref="T:AdvancedSharpAdbClient.Models.FramebufferHeader"/> object based on a byte array which contains the data.
            </summary>
            <param name="data">The data that feeds the <see cref="T:AdvancedSharpAdbClient.Models.FramebufferHeader"/> struct.</param>
            <returns>A new <see cref="T:AdvancedSharpAdbClient.Models.FramebufferHeader"/> object.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FramebufferHeader.ToImage(System.Byte[])">
            <summary>
            Converts a <see cref="T:System.Byte"/> array containing the raw frame buffer data to a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="buffer">The buffer containing the image data.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> that represents the image contained in the frame buffer, or <see langword="null"/>
            if the framebuffer does not contain any data. This can happen when DRM is enabled on the device.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FramebufferHeader.StandardizePixelFormat(System.Byte[]@)">
            <summary>
            Returns the <see cref="T:System.Drawing.Imaging.PixelFormat"/> that describes pixel format of an image that is stored according to the information
            present in this <see cref="T:AdvancedSharpAdbClient.Models.FramebufferHeader"/>. Because the <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration does not allow for all
            formats supported by Android, this method also takes a <paramref name="buffer"/> and reorganizes the bytes in the buffer to
            match the return value of this function.
            </summary>
            <param name="buffer">A byte array in which the images are stored according to this <see cref="T:AdvancedSharpAdbClient.Models.FramebufferHeader"/>.</param>
            <returns>A <see cref="T:System.Drawing.Imaging.PixelFormat"/> that describes how the image data is represented in this <paramref name="buffer"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FramebufferHeader.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FramebufferHeader.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FramebufferHeader.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.FramebufferHeader.GetEnumerable">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> which enumerates the values of this <see cref="T:AdvancedSharpAdbClient.Models.FramebufferHeader"/>.
            </summary>
            <returns>The values of the <see cref="T:AdvancedSharpAdbClient.Models.FramebufferHeader"/>.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs">
            <summary>
            Represents the state of apk installation.
            </summary>
            <param name="state">The state of the installation.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.InstallProgressEventArgs.#ctor(AdvancedSharpAdbClient.Models.PackageInstallProgressState)">
            <summary>
            Represents the state of apk installation.
            </summary>
            <param name="state">The state of the installation.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.InstallProgressEventArgs.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/> class.
            Which is used for <see cref="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.Uploading"/> state.
            </summary>
            <param name="packageUploaded">The number of packages which is finished operation.</param>
            <param name="packageRequired">The number of packages required for this operation.</param>
            <param name="uploadProgress">Gets the upload percentage (from <see langword="0"/> to <see langword="100"/>) completed.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.InstallProgressEventArgs.#ctor(System.Int32,System.Int32,AdvancedSharpAdbClient.Models.PackageInstallProgressState)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/> class.
            Which is used for <see cref="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.Uploading"/>
            <see cref="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.WriteSession"/> and
            <see cref="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.PostInstall"/> state.
            </summary>
            <param name="packageFinished">The number of packages which is finished operation.</param>
            <param name="packageRequired">The number of packages required for this operation.</param>
            <param name="state">The state of the installation.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.InstallProgressEventArgs.State">
            <summary>
            Gets the state of the installation.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.InstallProgressEventArgs.PackageFinished">
            <summary>
            Gets the number of packages which is finished operation.
            Used only in <see cref="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.Uploading"/>,
            <see cref="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.WriteSession"/> and
            <see cref="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.PostInstall"/> state.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.InstallProgressEventArgs.PackageRequired">
            <summary>
            Gets the number of packages required for this operation.
            Used only in <see cref="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.Uploading"/>,
            <see cref="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.WriteSession"/> and
            <see cref="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.PostInstall"/> state.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.InstallProgressEventArgs.UploadProgress">
            <summary>
            Gets the upload percentage (from <see langword="0"/> to <see langword="100"/>) completed.
            Used only in <see cref="F:AdvancedSharpAdbClient.Models.PackageInstallProgressState.Uploading"/> state.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.InstallProgressEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.NamespaceDoc">
            <summary>
            The classes in this namespace provide models for <see cref="N:AdvancedSharpAdbClient"/>.
            </summary>
            <remarks><c>Copyright (c) The Android Open Source Project, Ryan Conrad, Quamotion, yungd1plomat, wherewhere. All rights reserved.</c></remarks>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.ShellStream">
            <summary>Represents a <see cref="T:System.IO.Stream"/> that wraps around an inner <see cref="T:System.IO.Stream"/> that contains
            output from an Android shell command. In the shell output, the LF character is replaced by a
            CR LF character. This stream undoes that change.</summary>
            <remarks><seealso href="http://stackoverflow.com/questions/13578416/read-binary-stdout-data-from-adb-shell"/></remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.ShellStream.closeStream">
            <summary>
            The <see cref="T:System.Boolean"/> value which indicates whether the <see cref="T:AdvancedSharpAdbClient.Models.ShellStream"/> should close the <see cref="P:AdvancedSharpAdbClient.Models.ShellStream.Inner"/> stream when closed.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Models.ShellStream.pendingByte">
            <summary>
            The byte which is pending to be read.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ShellStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <seealso cref="T:AdvancedSharpAdbClient.Models.ShellStream"/> class.
            </summary>
            <param name="inner">The inner stream that contains the raw data retrieved from the shell. This stream must be readable.</param>
            <param name="closeStream"><see langword="true"/> if the <see cref="T:AdvancedSharpAdbClient.Models.ShellStream"/> should close the <paramref name="inner"/> stream when closed; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ShellStream.Inner">
            <summary>
            Gets the inner stream from which data is being read.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ShellStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ShellStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ShellStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ShellStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.ShellStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ShellStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ShellStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ShellStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ShellStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ShellStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ShellStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ShellStream.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.ShellStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs">
            <summary>
            Provides data for the <see cref="T:AdvancedSharpAdbClient.ISyncService"/> interface.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs.#ctor(System.Int64,System.Int64)">
            <summary>
            Provides data for the <see cref="T:AdvancedSharpAdbClient.ISyncService"/> interface.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs.ReceivedBytesSize">
            <summary>
            Gets the number of bytes sync to the local computer.
            </summary>
            <value>An <see cref="T:System.Int64"/> representing the number of sync bytes.</value>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs.TotalBytesToReceive">
            <summary>
            Gets the total number of bytes for the sync operation.
            </summary>
            <value>An <see cref="T:System.Int64"/> representing the total size of the download, in bytes.</value>
        </member>
        <member name="P:AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs.ProgressPercentage">
            <summary>
            Gets the number of progress percentage (from <see langword="0"/> to <see langword="100"/>) for the sync operation.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.SyncServiceExtensions">
            <summary>
            Provides extension methods for the <see cref="T:AdvancedSharpAdbClient.ISyncService"/> interface. Provides overloads for commonly used functions.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncServiceExtensions.PushAsync(AdvancedSharpAdbClient.ISyncService,System.IO.Stream,System.String,AdvancedSharpAdbClient.Models.UnixFileStatus,System.DateTimeOffset,System.IProgress{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Asynchronously pushes (uploads) a file to the remote device.
            </summary>
            <param name="service">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.ISyncService"/> interface.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that contains the contents of the file.</param>
            <param name="remotePath">The path, on the device, to which to push the file.</param>
            <param name="permissions">The <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/> that contains the permissions of the newly created file on the device.</param>
            <param name="timestamp">The time at which the file was last modified.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications. The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs"/>, representing the state of the file which has been transferred.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncServiceExtensions.PullAsync(AdvancedSharpAdbClient.ISyncService,System.String,System.IO.Stream,System.IProgress{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Asynchronously pulls (downloads) a file from the remote device.
            </summary>
            <param name="service">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.ISyncService"/> interface.</param>
            <param name="remotePath">The path, on the device, of the file to pull.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that will receive the contents of the file.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications. The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs"/>, representing the state of the file which has been transferred.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncServiceExtensions.Push(AdvancedSharpAdbClient.ISyncService,System.IO.Stream,System.String,AdvancedSharpAdbClient.Models.UnixFileStatus,System.DateTimeOffset,System.IProgress{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Boolean@)">
            <summary>
            Pushes (uploads) a file to the remote device.
            </summary>
            <param name="service">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.ISyncService"/> interface.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that contains the contents of the file.</param>
            <param name="remotePath">The path, on the device, to which to push the file.</param>
            <param name="permissions">The <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/> that contains the permissions of the newly created file on the device.</param>
            <param name="timestamp">The time at which the file was last modified.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications. The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs"/>, representing the state of the file which has been transferred.</param>
            <param name="isCancelled">A <see cref="T:System.Boolean"/> that can be used to cancel the task.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncServiceExtensions.Pull(AdvancedSharpAdbClient.ISyncService,System.String,System.IO.Stream,System.IProgress{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Boolean@)">
            <summary>
            Pulls (downloads) a file from the remote device.
            </summary>
            <param name="service">An instance of a class that implements the <see cref="T:AdvancedSharpAdbClient.ISyncService"/> interface.</param>
            <param name="remotePath">The path, on the device, of the file to pull.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that will receive the contents of the file.</param>
            <param name="progress">An optional parameter which, when specified, returns progress notifications. The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs"/>, representing the state of the file which has been transferred.</param>
            <param name="isCancelled">A <see cref="T:System.Boolean"/> that can be used to cancel the task.</param>
        </member>
        <member name="T:AdvancedSharpAdbClient.IAdbClient">
            <summary>
            A common interface for any class that allows you to interact with the
            adb server and devices that are connected to that adb server.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.GetAdbVersionAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously ask the ADB server for its internal version number.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the ADB version number.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.KillAdbAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously ask the ADB server to quit immediately. This is used when the
            ADB client detects that an obsolete server is running after an upgrade.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.GetDevicesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets the devices that are available for communication.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the list of devices that are connected.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.CreateForwardAsync(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously asks the ADB server to forward local connections from <paramref name="local"/>
            to the <paramref name="remote"/> address on the <paramref name="device"/>.
            </summary>
            <param name="device">The device on which to forward the connections.</param>
            <param name="local">
            <para>The local address to forward. This value can be in one of:</para>
            <list type="ordered">
              <item>
                <c>tcp:&lt;port&gt;</c>: TCP connection on localhost:&lt;port&gt;
              </item>
              <item>
                <c>local:&lt;path&gt;</c>: Unix local domain socket on &lt;path&gt;
              </item>
            </list>
            </param>
            <param name="remote">
            <para>The remote address to forward. This value can be in one of:</para>
            <list type="ordered">
              <item>
                <c>tcp:&lt;port&gt;</c>: TCP connection on localhost:&lt;port&gt; on device
              </item>
              <item>
                <c>local:&lt;path&gt;</c>: Unix local domain socket on &lt;path&gt; on device
              </item>
              <item>
                <c>jdwp:&lt;pid&gt;</c>: JDWP thread on VM process &lt;pid&gt; on device.
              </item>
            </list>
            </param>
            <param name="allowRebind">If set to <see langword="true"/>, the request will fail if there is already a forward
            connection from <paramref name="local"/>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.
            If your requested to start forwarding to local port TCP:0, the port number of the TCP port
            which has been opened. In all other cases, <c>0</c>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.CreateReverseForwardAsync(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously asks the ADB server to reverse forward local connections from <paramref name="remote"/>
            to the <paramref name="local"/> address on the <paramref name="device"/>.
            </summary>
            <param name="device">The device on which to reverse forward the connections.</param>
            <param name="remote">
            <para>The remote address to reverse forward. This value can be in one of:</para>
            <list type="ordered">
              <item>
                <c>tcp:&lt;port&gt;</c>: TCP connection on localhost:&lt;port&gt; on device
              </item>
              <item>
                <c>local:&lt;path&gt;</c>: Unix local domain socket on &lt;path&gt; on device
              </item>
              <item>
                <c>jdwp:&lt;pid&gt;</c>: JDWP thread on VM process &lt;pid&gt; on device.
              </item>
            </list>
            </param>
            <param name="local">
            <para>The local address to reverse forward. This value can be in one of:</para>
            <list type="ordered">
              <item>
                <c>tcp:&lt;port&gt;</c>: TCP connection on localhost:&lt;port&gt;
              </item>
              <item>
                <c>local:&lt;path&gt;</c>: Unix local domain socket on &lt;path&gt;
              </item>
            </list>
            </param>
            <param name="allowRebind">If set to <see langword="true"/>, the request will fail if if the specified
            socket is already bound through a previous reverse command.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.
            If your requested to start reverse to remote port TCP:0, the port number of the TCP port
            which has been opened. In all other cases, <c>0</c>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.RemoveReverseForwardAsync(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a reverse port forwarding between a remote and a local port.
            </summary>
            <param name="device">The device on which to remove the reverse port forwarding</param>
            <param name="remote">Specification of the remote that was forwarded</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.RemoveAllReverseForwardsAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes all reverse forwards for a given device.
            </summary>
            <param name="device">The device on which to remove all reverse port forwarding</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.RemoveForwardAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a port forwarding between a local and a remote port.
            </summary>
            <param name="device">The device on which to remove the port forwarding.</param>
            <param name="localPort">Specification of the local port that was forwarded.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.RemoveAllForwardsAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes all forwards for a given device.
            </summary>
            <param name="device">The device on which to remove the port forwarding.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ListForwardAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously list all existing forward connections from this server.
            </summary>
            <param name="device">The device for which to list the existing forward connections.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the <see cref="T:AdvancedSharpAdbClient.Models.ForwardData"/> entry for each existing forward connection.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ListReverseForwardAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            List all existing reverse forward connections from this server.
            </summary>
            <param name="device">The device for which to list the existing reverse foward connections.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the <see cref="T:AdvancedSharpAdbClient.Models.ForwardData"/> entry for each existing reverse forward connection.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ExecuteServerCommandAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command on the adb server.
            </summary>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ExecuteServerCommandAsync(System.String,System.String,AdvancedSharpAdbClient.IAdbSocket,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command on the adb server.
            </summary>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="socket">The <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> to send command.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ExecuteRemoteCommandAsync(System.String,AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command on the device.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ExecuteServerCommandAsync(System.String,System.String,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command on the adb server.
            </summary>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="receiver">Optionally, a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> that processes the command output.</param>
            <param name="encoding">The encoding to use when parsing the command output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ExecuteServerCommandAsync(System.String,System.String,AdvancedSharpAdbClient.IAdbSocket,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command on the adb server.
            </summary>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="socket">The <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> to send command.</param>
            <param name="receiver">Optionally, a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> that processes the command output.</param>
            <param name="encoding">The encoding to use when parsing the command output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ExecuteRemoteCommandAsync(System.String,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command on the device.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="receiver">Optionally, a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> that processes the command output.</param>
            <param name="encoding">The encoding to use when parsing the command output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.RunLogServiceAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Action{AdvancedSharpAdbClient.Logs.LogEntry},System.Threading.CancellationToken,AdvancedSharpAdbClient.Logs.LogId[])">
            <summary>
            Asynchronously runs the event log service on a device.
            </summary>
            <param name="device">The device on which to run the event log service.</param>
            <param name="messageSink">A callback which will receive the event log messages as they are received.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the event log service. Use this to stop reading from the event log.</param>
            <param name="logNames">Optionally, the names of the logs to receive.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.GetFrameBufferAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets the frame buffer from the specified end point.
            </summary>
            <param name="device">The device for which to get the framebuffer.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the asynchronous task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the raw frame buffer.</returns>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">failed asking for frame buffer</exception>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">failed nudging</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.RebootAsync(System.String,AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reboots the specified device in to the specified mode.
            </summary>
            <param name="into">The mode into which to reboot the device.</param>
            <param name="device">The device to reboot.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.PairAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously pair with a device for secure TCP/IP communication
            </summary>
            <param name="host">The host address of the remote device.</param>
            <param name="port">The port of the remote device.</param>
            <param name="code">The pairing code.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ConnectAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously connect to a device via TCP/IP.
            </summary>
            <param name="host">The host address of the remote device.</param>
            <param name="port">The port of the remote device.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.DisconnectAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously disconnects a remote device from this local ADB server.
            </summary>
            <param name="host">The host address of the remote device.</param>
            <param name="port">The port of the remote device.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.RootAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously restarts the ADB daemon running on the device with root privileges.
            </summary>
            <param name="device">The device on which to restart ADB with root privileges.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.UnrootAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously restarts the ADB daemon running on the device without root privileges.
            </summary>
            <param name="device">The device on which to restart ADB without root privileges.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.InstallAsync(AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously installs an Android application on an device.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="apk">A <see cref="T:System.IO.Stream"/> which represents the application to install.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>adb install</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.InstallMultipleAsync(AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.Collections.Generic.IEnumerable{System.IO.Stream},System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously push multiple APKs to the device and install them.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="baseAPK">A <see cref="T:System.IO.Stream"/> which represents the base APK to install.</param>
            <param name="splitAPKs"><see cref="T:System.IO.Stream"/>s which represents the split APKs to install.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>adb install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.InstallMultipleAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Collections.Generic.IEnumerable{System.IO.Stream},System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously push multiple APKs to the device and install them.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="splitAPKs"><see cref="T:System.IO.Stream"/>s which represents the split APKs to install.</param>
            <param name="packageName">The package name of the base APK to install.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>adb install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.InstallCreateAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken,System.String[])">
            <summary>
            Like "install", but starts an install session asynchronously.
            Use <see cref="M:AdvancedSharpAdbClient.IAdbClient.InstallCreateAsync(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken,System.String[])"/> if installation dose not have a base APK.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>adb install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the session ID</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.InstallCreateAsync(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken,System.String[])">
            <summary>
            Like "install", but starts an install session asynchronously.
            Use <see cref="M:AdvancedSharpAdbClient.IAdbClient.InstallCreateAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken,System.String[])"/> if installation has a base APK.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="packageName">The package name of the baseAPK to install.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>adb install-create</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the session ID</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.InstallWriteAsync(AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.String,System.String,System.Action{System.Double},System.Threading.CancellationToken)">
            <summary>
            Asynchronously write an apk into the given install session.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="apk">A <see cref="T:System.IO.Stream"/> which represents the application to install.</param>
            <param name="apkName">The name of the application.</param>
            <param name="session">The session ID of the install session.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as a value between 0 and 100, representing the percentage of the apk which has been transferred.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.InstallCommitAsync(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously commit the given active install session, installing the app.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="session">The session ID of the install session.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.UninstallAsync(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.Threading.CancellationToken,System.String[])">
            <summary>
            Asynchronously uninstalls an Android application on an device.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="packageName">The name of the package to uninstall.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <param name="arguments">The arguments to pass to <c>adb uninstall</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.GetFeatureSetAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously lists all features supported by the current device.
            </summary>
            <param name="device">The device for which to get the list of features supported.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the list of all features supported by the current device.</returns>
        </member>
        <member name="P:AdvancedSharpAdbClient.IAdbClient.EndPoint">
            <summary>
            Gets the <see cref="P:AdvancedSharpAdbClient.IAdbClient.EndPoint"/> at which the Android Debug Bridge server is listening.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.GetAdbVersion">
            <summary>
            Ask the ADB server for its internal version number.
            </summary>
            <returns>The ADB version number.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.KillAdb">
            <summary>
            Ask the ADB server to quit immediately. This is used when the
            ADB client detects that an obsolete server is running after an
            upgrade.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.GetDevices">
            <summary>
            Gets the devices that are available for communication.
            </summary>
            <returns>A list of devices that are connected.</returns>
            <example>
            <para>The following example list all Android devices that are currently connected to this PC:</para>
            <code>
            var devices = new AdbClient().GetDevices();
            foreach (var device in devices)
            {
                Console.WriteLine(device.Name);
            }
            </code>
            </example>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.CreateForward(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String,System.Boolean)">
            <summary>
            Asks the ADB server to forward local connections from <paramref name="local"/>
            to the <paramref name="remote"/> address on the <paramref name="device"/>.
            </summary>
            <param name="device">The device on which to forward the connections.</param>
            <param name="local">
            <para>The local address to forward. This value can be in one of:</para>
            <list type="ordered">
              <item>
                <c>tcp:&lt;port&gt;</c>: TCP connection on localhost:&lt;port&gt;
              </item>
              <item>
                <c>local:&lt;path&gt;</c>: Unix local domain socket on &lt;path&gt;
              </item>
            </list>
            </param>
            <param name="remote">
            <para>The remote address to forward. This value can be in one of:</para>
            <list type="ordered">
              <item>
                <c>tcp:&lt;port&gt;</c>: TCP connection on localhost:&lt;port&gt; on device
              </item>
              <item>
                <c>local:&lt;path&gt;</c>: Unix local domain socket on &lt;path&gt; on device
              </item>
              <item>
                <c>jdwp:&lt;pid&gt;</c>: JDWP thread on VM process &lt;pid&gt; on device.
              </item>
            </list>
            </param>
            <param name="allowRebind">If set to <see langword="true"/>, the request will fail if there is already a forward
            connection from <paramref name="local"/>.</param>
            <returns>If your requested to start forwarding to local port TCP:0, the port number of the TCP port
            which has been opened. In all other cases, <c>0</c>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.CreateReverseForward(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String,System.Boolean)">
            <summary>
            Asks the ADB server to reverse forward local connections from <paramref name="remote"/>
            to the <paramref name="local"/> address on the <paramref name="device"/>.
            </summary>
            <param name="device">The device on which to reverse forward the connections.</param>
            <param name="remote">
            <para>The remote address to reverse forward. This value can be in one of:</para>
            <list type="ordered">
              <item>
                <c>tcp:&lt;port&gt;</c>: TCP connection on localhost:&lt;port&gt; on device
              </item>
              <item>
                <c>local:&lt;path&gt;</c>: Unix local domain socket on &lt;path&gt; on device
              </item>
              <item>
                <c>jdwp:&lt;pid&gt;</c>: JDWP thread on VM process &lt;pid&gt; on device.
              </item>
            </list>
            </param>
            <param name="local">
            <para>The local address to reverse forward. This value can be in one of:</para>
            <list type="ordered">
              <item>
                <c>tcp:&lt;port&gt;</c>: TCP connection on localhost:&lt;port&gt;
              </item>
              <item>
                <c>local:&lt;path&gt;</c>: Unix local domain socket on &lt;path&gt;
              </item>
            </list>
            </param>
            <param name="allowRebind">If set to <see langword="true"/>, the request will fail if if the specified socket
            is already bound through a previous reverse command.</param>
            <returns>If your requested to start reverse to remote port TCP:0, the port number of the TCP port
            which has been opened. In all other cases, <c>0</c>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.RemoveReverseForward(AdvancedSharpAdbClient.Models.DeviceData,System.String)">
            <summary>
            Remove a reverse port forwarding between a remote and a local port.
            </summary>
            <param name="device">The device on which to remove the reverse port forwarding</param>
            <param name="remote">Specification of the remote that was forwarded</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.RemoveAllReverseForwards(AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Removes all reverse forwards for a given device.
            </summary>
            <param name="device">The device on which to remove all reverse port forwarding</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.RemoveForward(AdvancedSharpAdbClient.Models.DeviceData,System.Int32)">
            <summary>
            Remove a port forwarding between a local and a remote port.
            </summary>
            <param name="device">The device on which to remove the port forwarding.</param>
            <param name="localPort">Specification of the local port that was forwarded.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.RemoveAllForwards(AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Removes all forwards for a given device.
            </summary>
            <param name="device">The device on which to remove the port forwarding.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ListForward(AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            List all existing forward connections from this server.
            </summary>
            <param name="device">The device for which to list the existing forward connections.</param>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.ForwardData"/> entry for each existing forward connection.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ListReverseForward(AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            List all existing reverse forward connections from this server.
            </summary>
            <param name="device">The device for which to list the existing reverse forward connections.</param>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.ForwardData"/> entry for each existing reverse forward connection.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ExecuteServerCommand(System.String,System.String)">
            <summary>
            Executes a command on the adb server.
            </summary>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ExecuteServerCommand(System.String,System.String,AdvancedSharpAdbClient.IAdbSocket)">
            <summary>
            Executes a command on the adb server.
            </summary>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="socket">The <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> to send command.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ExecuteRemoteCommand(System.String,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Executes a shell command on the device.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="device">The device on which to run the command.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ExecuteServerCommand(System.String,System.String,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding)">
            <summary>
            Executes a command on the adb server.
            </summary>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="receiver">Optionally, a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> that processes the command output.</param>
            <param name="encoding">The encoding to use when parsing the command output.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ExecuteServerCommand(System.String,System.String,AdvancedSharpAdbClient.IAdbSocket,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding)">
            <summary>
            Executes a command on the adb server.
            </summary>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="socket">The <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> to send command.</param>
            <param name="receiver">Optionally, a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> that processes the command output.</param>
            <param name="encoding">The encoding to use when parsing the command output.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ExecuteRemoteCommand(System.String,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding)">
            <summary>
            Executes a shell command on the device.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="receiver">Optionally, a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> that processes the command output.</param>
            <param name="encoding">The encoding to use when parsing the command output.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ExecuteServerEnumerable(System.String,System.String,System.Text.Encoding)">
            <summary>
            Executes a command on the adb server and returns the <see cref="T:System.Collections.Generic.IEnumerable`1"/> output.
            </summary>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="encoding">The encoding to use when parsing the command output.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of strings, each representing a line of output from the command.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ExecuteServerEnumerable(System.String,System.String,AdvancedSharpAdbClient.IAdbSocket,System.Text.Encoding)">
            <summary>
            Executes a command on the adb server and returns the <see cref="T:System.Collections.Generic.IEnumerable`1"/> output.
            </summary>
            <param name="target">The target of command, such as <c>shell</c>, <c>remount</c>, <c>dev</c>, <c>tcp</c>, <c>local</c>,
            <c>localreserved</c>, <c>localabstract</c>, <c>jdwp</c>, <c>track-jdwp</c>, <c>sync</c>, <c>reverse</c> and so on.</param>
            <param name="command">The command to execute.</param>
            <param name="socket">The <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> to send command.</param>
            <param name="encoding">The encoding to use when parsing the command output.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of strings, each representing a line of output from the command.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.ExecuteRemoteEnumerable(System.String,AdvancedSharpAdbClient.Models.DeviceData,System.Text.Encoding)">
            <summary>
            Executes a shell command on the device and returns the <see cref="T:System.Collections.Generic.IEnumerable`1"/> output.
            </summary>
            <param name="command">The command to execute.</param>
            <param name="device">The device on which to run the command.</param>
            <param name="encoding">The encoding to use when parsing the command output.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of strings, each representing a line of output from the command.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.RunLogService(AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Logs.LogId[])">
            <summary>
            Runs the event log service on a device and returns it.
            </summary>
            <param name="device">The device on which to run the event log service.</param>
            <param name="logNames">Optionally, the names of the logs to receive.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> which contains the log entries.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.RunLogService(AdvancedSharpAdbClient.Models.DeviceData,System.Action{AdvancedSharpAdbClient.Logs.LogEntry},System.Boolean@,AdvancedSharpAdbClient.Logs.LogId[])">
            <summary>
            Runs the event log service on a device.
            </summary>
            <param name="device">The device on which to run the event log service.</param>
            <param name="messageSink">A callback which will receive the event log messages as they are received.</param>
            <param name="isCancelled">A <see cref="T:System.Boolean"/> that can be used to cancel the task.</param>
            <param name="logNames">Optionally, the names of the logs to receive.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.CreateFramebuffer(AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Gets a <see cref="T:AdvancedSharpAdbClient.Models.Framebuffer"/> which contains the framebuffer data for this device. The framebuffer data is not refreshed,
            giving you high performance access to the device's framebuffer.
            </summary>
            <param name="device">The device for which to get the framebuffer.</param>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.Framebuffer"/> object which can be used to get the framebuffer of the device.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.GetFrameBuffer(AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Gets the frame buffer from the specified end point.
            </summary>
            <param name="device">The device for which to get the framebuffer.</param>
            <returns>The raw frame buffer.</returns>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">failed asking for frame buffer</exception>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">failed nudging</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.Reboot(System.String,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Reboots the specified device in to the specified mode.
            </summary>
            <param name="into">The mode into which to reboot the device.</param>
            <param name="device">The device to reboot.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.Pair(System.String,System.Int32,System.String)">
            <summary>
            Pair with a device for secure TCP/IP communication
            </summary>
            <param name="host">The host address of the remote device.</param>
            <param name="port">The port of the remote device.</param>
            <param name="code">The pairing code.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.Connect(System.String,System.Int32)">
            <summary>
            Connect to a device via TCP/IP.
            </summary>
            <param name="host">The host address of the remote device.</param>
            <param name="port">The port of the remote device.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.Disconnect(System.String,System.Int32)">
            <summary>
            Disconnects a remote device from this local ADB server.
            </summary>
            <param name="host">The host address of the remote device.</param>
            <param name="port">The port of the remote device.</param>
            <returns>The results from adb.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.Root(AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Restarts the ADB daemon running on the device with root privileges.
            </summary>
            <param name="device">The device on which to restart ADB with root privileges.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.Unroot(AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Restarts the ADB daemon running on the device without root privileges.
            </summary>
            <param name="device">The device on which to restart ADB without root privileges.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.Install(AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Installs an Android application on an device.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="apk">A <see cref="T:System.IO.Stream"/> which represents the application to install.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>adb install</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.InstallMultiple(AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.Collections.Generic.IEnumerable{System.IO.Stream},System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Push multiple APKs to the device and install them.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="baseAPK">A <see cref="T:System.IO.Stream"/> which represents the base APK to install.</param>
            <param name="splitAPKs"><see cref="T:System.IO.Stream"/>s which represents the split APKs to install.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>adb install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.InstallMultiple(AdvancedSharpAdbClient.Models.DeviceData,System.Collections.Generic.IEnumerable{System.IO.Stream},System.String,System.Action{AdvancedSharpAdbClient.Models.InstallProgressEventArgs},System.String[])">
            <summary>
            Push multiple APKs to the device and install them.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="splitAPKs"><see cref="T:System.IO.Stream"/>s which represents the split APKs to install.</param>
            <param name="packageName">The package name of the base APK to install.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.InstallProgressEventArgs"/>, representing the state of installation.</param>
            <param name="arguments">The arguments to pass to <c>adb install-create</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.InstallCreate(AdvancedSharpAdbClient.Models.DeviceData,System.String[])">
            <summary>
            Like "install", but starts an install session.
            Use <see cref="M:AdvancedSharpAdbClient.IAdbClient.InstallCreate(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String[])"/> if installation dose not have a base APK.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="arguments">The arguments to pass to <c>adb install-create</c>.</param>
            <returns>The session ID of this install session.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.InstallCreate(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String[])">
            <summary>
            Like "install", but starts an install session.
            Use <see cref="M:AdvancedSharpAdbClient.IAdbClient.InstallCreate(AdvancedSharpAdbClient.Models.DeviceData,System.String[])"/> if installation has a base APK.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="packageName">The package name of the baseAPK to install.</param>
            <param name="arguments">The arguments to pass to <c>adb install-create</c>.</param>
            <returns>The session ID of this install session.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.InstallWrite(AdvancedSharpAdbClient.Models.DeviceData,System.IO.Stream,System.String,System.String,System.Action{System.Double})">
            <summary>
            Write an apk into the given install session.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="apk">A <see cref="T:System.IO.Stream"/> which represents the application to install.</param>
            <param name="apkName">The name of the application.</param>
            <param name="session">The session ID of the install session.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications.
            The progress is reported as a value between 0 and 100, representing the percentage of the apk which has been transferred.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.InstallCommit(AdvancedSharpAdbClient.Models.DeviceData,System.String)">
            <summary>
            Commit the given active install session, installing the app.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="session">The session ID of the install session.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.Uninstall(AdvancedSharpAdbClient.Models.DeviceData,System.String,System.String[])">
            <summary>
            Uninstalls an Android application on an device.
            </summary>
            <param name="device">The device on which to install the application.</param>
            <param name="packageName">The name of the package to uninstall.</param>
            <param name="arguments">The arguments to pass to <c>adb uninstall</c>.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbClient.GetFeatureSet(AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Lists all features supported by the current device.
            </summary>
            <param name="device">The device for which to get the list of features supported.</param>
            <returns>A list of all features supported by the current device.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.IAdvancedAdbClient">
            <summary>
            See as the <see cref="T:AdvancedSharpAdbClient.IAdbClient"/> interface.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.IAdbCommandLineClient">
            <summary>
            Provides a common interface for any class that provides access to the <c>adb.exe</c> executable.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbCommandLineClient.GetVersionAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously queries adb for its version and path and checks it against <see cref="F:AdvancedSharpAdbClient.AdbServer.RequiredAdbVersion"/>.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns a <see cref="T:AdvancedSharpAdbClient.Models.AdbCommandLineStatus"/> object that represents the version and path of the adb command line client.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbCommandLineClient.StartServerAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously starts the adb server by running the <c>adb start-server</c> command.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbCommandLineClient.ExecuteAdbCommandAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously runs the <c>adb.exe</c> process, invoking a specific <paramref name="command"/>, and reads the standard output.
            </summary>
            <param name="command">The <c>adb.exe</c> command to invoke, such as <c>version</c> or <c>start-server</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which return a list in which to store the standard output. Each line is added as a new entry.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbCommandLineClient.CheckAdbFileExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Determines whether the <c>adb.exe</c> file exists.
            </summary>
            <param name="adbPath">The path to validate.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns <see langword="true"/> if the <c>adb.exe</c> file is exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbCommandLineClient.GetVersion">
            <summary>
            Queries adb for its version and path and checks it against <see cref="F:AdvancedSharpAdbClient.AdbServer.RequiredAdbVersion"/>.
            </summary>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.AdbCommandLineStatus"/> object that represents the version and path of the adb command line client.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbCommandLineClient.StartServer(System.Int32)">
            <summary>
            Starts the adb server by running the <c>adb start-server</c> command.
            </summary>
            <param name="timeout">The timeout in milliseconds to wait for the <c>adb</c> process to exit.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbCommandLineClient.ExecuteAdbCommand(System.String,System.Int32)">
            <summary>
            Runs the <c>adb.exe</c> process, invoking a specific <paramref name="command"/>, and reads the standard output.
            </summary>
            <param name="command">The <c>adb.exe</c> command to invoke, such as <c>version</c> or <c>start-server</c>.</param>
            <param name="timeout">The timeout in milliseconds to wait for the <c>adb</c> process to exit.</param>
            <return>A list in which to store the standard output. Each line is added as a new entry.</return>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbCommandLineClient.CheckAdbFileExists(System.String)">
            <summary>
            Determines whether the <c>adb.exe</c> file exists.
            </summary>
            <param name="adbPath">The path to validate.</param>
            <returns><see langword="true"/> if the <c>adb.exe</c> file is exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.IAdbServer">
            <summary>
            Represents a common interface for any class that allows starting or stopping the Android Debug Bridge (adb) server/deamon.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbServer.StartServerAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously starts the adb server if it was not previously running.
            </summary>
            <param name="adbPath">The path to the <c>adb.exe</c> executable that can be used to start the adb server.
            If this path is not provided, this method will throw an exception if the server
            is not running or is not up to date.</param>
            <param name="restartServerIfNewer"><see langword="true"/> to restart the adb server if the version of the <c>adb.exe</c>
            executable at <paramref name="adbPath"/> is newer than the version that is currently
            running; <see langword="false"/> to keep a previous version of the server running.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> which return
            <list type="ordered">
            <item>
              <see cref="F:AdvancedSharpAdbClient.Models.StartServerResult.AlreadyRunning"/> if the adb server was already
              running and the version of the adb server was at least <see cref="F:AdvancedSharpAdbClient.AdbServer.RequiredAdbVersion"/>.
            </item>
            <item>
              <see cref="F:AdvancedSharpAdbClient.Models.StartServerResult.RestartedOutdatedDaemon"/> if the adb server
              was already running, but the version was less than <see cref="F:AdvancedSharpAdbClient.AdbServer.RequiredAdbVersion"/>
              or less than the version of the adb client at <paramref name="adbPath"/> and the
              <paramref name="restartServerIfNewer"/> flag was set.
            </item>
            <item>
              <see cref="F:AdvancedSharpAdbClient.Models.StartServerResult.Started"/> if the adb server was not running,
              and the server was started.
            </item>
            <item>
              <see cref="F:AdvancedSharpAdbClient.Models.StartServerResult.Starting"/> if a <see cref="M:AdvancedSharpAdbClient.IAdbServer.StartServerAsync(System.String,System.Boolean,System.Threading.CancellationToken)"/>
              operation is already in progress.
            </item>
            </list>
            </returns>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">The server was not running, or an outdated version of the server was running,
            and the <paramref name="adbPath"/> parameter was not specified.</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbServer.RestartServerAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously restarts the adb server if it suddenly became unavailable. Call this class if, for example,
            you receive an <see cref="T:AdvancedSharpAdbClient.Exceptions.AdbException"/> with the <see cref="P:AdvancedSharpAdbClient.Exceptions.AdbException.ConnectionReset"/> flag
            set to <see langword="true"/> - a clear indicating the ADB server died.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
            <remarks>You can only call this method if you have previously started the adb server via
            <see cref="M:AdvancedSharpAdbClient.IAdbServer.StartServerAsync(System.String,System.Boolean,System.Threading.CancellationToken)"/> and passed the full path to the adb server.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbServer.RestartServerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously restarts the adb server with new adb path if it suddenly became unavailable. Call this class if, for example,
            you receive an <see cref="T:AdvancedSharpAdbClient.Exceptions.AdbException"/> with the <see cref="P:AdvancedSharpAdbClient.Exceptions.AdbException.ConnectionReset"/> flag
            set to <see langword="true"/> - a clear indicating the ADB server died.
            </summary>
            <param name="adbPath">The path to the <c>adb.exe</c> executable that can be used to start the adb server.
            If this path is not provided, this method will use the path that was cached by
            <see cref="M:AdvancedSharpAdbClient.IAdbServer.StartServerAsync(System.String,System.Boolean,System.Threading.CancellationToken)"/></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
            <remarks>You can only call this method if you have previously started the adb server via
            <see cref="M:AdvancedSharpAdbClient.IAdbServer.StartServerAsync(System.String,System.Boolean,System.Threading.CancellationToken)"/> and passed the full path to the adb server.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbServer.StopServerAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously stop the adb server asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbServer.GetStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets the status of the adb server asynchronously.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns a <see cref="T:AdvancedSharpAdbClient.Models.AdbServerStatus"/> object that describes the status of the adb server.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbServer.StartServer(System.String,System.Boolean)">
            <summary>
            Starts the adb server if it was not previously running.
            </summary>
            <param name="adbPath">The path to the <c>adb.exe</c> executable that can be used to start the adb server.
            If this path is not provided, this method will throw an exception if the server
            is not running or is not up to date.</param>
            <param name="restartServerIfNewer"><see langword="true"/> to restart the adb server if the version of the <c>adb.exe</c>
            executable at <paramref name="adbPath"/> is newer than the version that is currently
            running; <see langword="false"/> to keep a previous version of the server running.</param>
            <returns>
            <list type="ordered">
            <item>
              <see cref="F:AdvancedSharpAdbClient.Models.StartServerResult.AlreadyRunning"/> if the adb server was already
              running and the version of the adb server was at least <see cref="F:AdvancedSharpAdbClient.AdbServer.RequiredAdbVersion"/>.
            </item>
            <item>
              <see cref="F:AdvancedSharpAdbClient.Models.StartServerResult.RestartedOutdatedDaemon"/> if the adb server
              was already running, but the version was less than <see cref="F:AdvancedSharpAdbClient.AdbServer.RequiredAdbVersion"/>
              or less than the version of the adb client at <paramref name="adbPath"/> and the
              <paramref name="restartServerIfNewer"/> flag was set.
            </item>
            <item>
              <see cref="F:AdvancedSharpAdbClient.Models.StartServerResult.Started"/> if the adb server was not running,
              and the server was started.
            </item>
            <item>
              <see cref="F:AdvancedSharpAdbClient.Models.StartServerResult.Starting"/> if an <see cref="M:AdvancedSharpAdbClient.AdbServer.StartServer(System.String,System.Boolean)"/>
              operation is already in progress.
            </item>
            </list>
            </returns>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">The server was not running, or an outdated version of the server was running,
            and the <paramref name="adbPath"/> parameter was not specified.</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbServer.RestartServer">
            <summary>
            Restarts the adb server if it suddenly became unavailable. Call this class if, for example,
            you receive an <see cref="T:AdvancedSharpAdbClient.Exceptions.AdbException"/> with the <see cref="P:AdvancedSharpAdbClient.Exceptions.AdbException.ConnectionReset"/> flag
            set to <see langword="true"/> - a clear indicating the ADB server died.
            </summary>
            <remarks>You can only call this method if you have previously started the adb server via
            <see cref="M:AdvancedSharpAdbClient.AdbServer.StartServer(System.String,System.Boolean)"/> and passed the full path to the adb server.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbServer.RestartServer(System.String)">
            <summary>
            Restarts the adb server with new adb path if it suddenly became unavailable. Call this class if, for example,
            you receive an <see cref="T:AdvancedSharpAdbClient.Exceptions.AdbException"/> with the <see cref="P:AdvancedSharpAdbClient.Exceptions.AdbException.ConnectionReset"/> flag
            set to <see langword="true"/> - a clear indicating the ADB server died.
            </summary>
            <param name="adbPath">The path to the <c>adb.exe</c> executable that can be used to start the adb server.
            If this path is not provided, this method will use the path that was cached by
            <see cref="M:AdvancedSharpAdbClient.IAdbServer.StartServer(System.String,System.Boolean)"/></param>
            <remarks>You can only call this method if you have previously started the adb server via
            <see cref="M:AdvancedSharpAdbClient.AdbServer.StartServer(System.String,System.Boolean)"/> and passed the full path to the adb server.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbServer.StopServer">
            <summary>
            Stop the adb server.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbServer.GetStatus">
            <summary>
            Gets the status of the adb server.
            </summary>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.AdbServerStatus"/> object that describes the status of the adb server.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.IAdbSocket">
            <summary>
            Provides a common interface for any class that acts as a client for the
            Android Debug Bridge.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.ReconnectAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reconnects the <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> to the same endpoint it was initially connected to.
            Use this when the socket was disconnected by adb and you have restarted adb.
            </summary>
            <param name="isForce">Force reconnect whatever the socket is connected or not.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.SendAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends the specified number of bytes of data to a <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>,
            </summary>
            <param name="data">A <see cref="T:System.Byte"/> array that acts as a buffer, containing the data to send.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.SendAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends the specified number of bytes of data to a <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>,
            </summary>
            <param name="data">A <see cref="T:System.Byte"/> array that acts as a buffer, containing the data to send.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <param name="length">The number of bytes to send.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.SendAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends the specified number of bytes of data to a <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>,
            </summary>
            <param name="data">A <see cref="T:System.Byte"/> array that acts as a buffer, containing the data to send.</param>
            <param name="offset">The index of the first byte in the array to send.</param>
            <param name="length">The number of bytes to send.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.SendSyncRequestAsync(AdvancedSharpAdbClient.Models.SyncCommand,System.String,AdvancedSharpAdbClient.Models.UnixFileStatus,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a sync request to the device.
            </summary>
            <param name="command" >The command to send.</param>
            <param name="path">The path of the file on which the command should operate.</param>
            <param name="permissions">If the command is a <see cref="F:AdvancedSharpAdbClient.Models.SyncCommand.SEND"/> command, the permissions to assign to the newly created file.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.SendSyncRequestAsync(AdvancedSharpAdbClient.Models.SyncCommand,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a sync request to the device.
            </summary>
            <param name="command">The command to send.</param>
            <param name="path">The path of the file on which the command should operate.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.SendSyncRequestAsync(AdvancedSharpAdbClient.Models.SyncCommand,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a sync request to the device.
            </summary>
            <param name="command">The command to send.</param>
            <param name="length">The length of the data packet that follows.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.SendAdbRequestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request to the Android Debug Bridge.To read the response, call
            <see cref="M:AdvancedSharpAdbClient.IAdbSocket.ReadAdbResponseAsync(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="request">The request to send.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.ReadAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads a <see cref="T:System.String"/> from an <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> instance when
            the connection is in sync mode.
            </summary>
            <param name="data" >The buffer to store the read data into.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation. The result value of the task contains the number of bytes received.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.ReadAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously receives data from a <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> into a receive buffer.
            </summary>
            <param name="data">An array of type <see cref="T:System.Byte"/> that is the storage location for the received data.</param>
            <param name="length">The number of bytes to receive.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <remarks>Cancelling the task will also close the socket.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation. The result value of the task contains the number of bytes received.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.ReadStringAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads a <see cref="T:System.String"/> from an <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> instance.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation. The return value of the task is the <see cref="T:System.String"/> received from the <see cref = "T:AdvancedSharpAdbClient.IAdbSocket"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.ReadSyncStringAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads a <see cref="T:System.String"/> from an <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> instance when
            the connection is in sync mode.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation. The return value of the task is the <see cref="T:System.String"/> received from the <see cref = "T:AdvancedSharpAdbClient.IAdbSocket"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.ReadSyncResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the response to a sync command.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation. The return value of the task is the response that was sent by the device.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.ReadAdbResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously receives an <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/> message, and throws an error
            if the message does not indicate success.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/> object that represents the response from the Android Debug Bridge.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.SetDeviceAsync(AdvancedSharpAdbClient.Models.DeviceData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously ask to switch the connection to the device/emulator identified by
            <paramref name="device"/>. After this request, every client request will
            be sent directly to the adbd daemon running on the device.
            </summary>
            <param name="device">The device to which to connect.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>If <paramref name="device"/> is <see langword="null"/>, this method does nothing.</remarks>
        </member>
        <member name="P:AdvancedSharpAdbClient.IAdbSocket.Connected">
            <summary>
            Gets a value indicating whether the <see cref="T:AdvancedSharpAdbClient.AdbSocket"/> is connected to a remote
            host as of the latest send or receive operation.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.Reconnect(System.Boolean)">
            <summary>
            Reconnects the <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> to the same endpoint it was initially connected to.
            Use this when the socket was disconnected by adb and you have restarted adb.
            </summary>
            <param name="isForce">Force reconnect whatever the socket is connected or not.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.Send(System.Byte[])">
            <summary>
            Sends the specified number of bytes of data to a <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>,
            </summary>
            <param name="data">A <see cref="T:System.Byte"/> array that acts as a buffer, containing the data to send.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.Send(System.Byte[],System.Int32)">
            <summary>
            Sends the specified number of bytes of data to a <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>,
            </summary>
            <param name="data">A <see cref="T:System.Byte"/> array that acts as a buffer, containing the data to send.</param>
            <param name="length">The number of bytes to send.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends the specified number of bytes of data to a <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/>,
            </summary>
            <param name="data">A <see cref="T:System.Byte"/> array that acts as a buffer, containing the data to send.</param>
            <param name="offset">The index of the first byte in the array to send.</param>
            <param name="length">The number of bytes to send.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.SendSyncRequest(AdvancedSharpAdbClient.Models.SyncCommand,System.String,AdvancedSharpAdbClient.Models.UnixFileStatus)">
            <summary>
            Sends a sync request to the device.
            </summary>
            <param name="command" >The command to send.</param>
            <param name="path">The path of the file on which the command should operate.</param>
            <param name="permissions">If the command is a <see cref="F:AdvancedSharpAdbClient.Models.SyncCommand.SEND"/> command, the permissions to assign to the newly created file.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.SendSyncRequest(AdvancedSharpAdbClient.Models.SyncCommand,System.String)">
            <summary>
            Sends a sync request to the device.
            </summary>
            <param name="command">The command to send.</param>
            <param name="path">The path of the file on which the command should operate.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.SendSyncRequest(AdvancedSharpAdbClient.Models.SyncCommand,System.Int32)">
            <summary>
            Sends a sync request to the device.
            </summary>
            <param name="command">The command to send.</param>
            <param name="length">The length of the data packet that follows.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.SendAdbRequest(System.String)">
            <summary>
            Sends a request to the Android Debug Bridge.To read the response, call
            <see cref="M:AdvancedSharpAdbClient.IAdbSocket.ReadAdbResponse"/>.
            </summary>
            <param name="request">The request to send.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.Read(System.Byte[])">
            <summary>
            Reads from the socket until the array is filled, or no more data is coming(because
            the socket closed or the timeout expired).
            </summary>
            <param name="data" >The buffer to store the read data into.</param>
            <returns>The total number of bytes read.</returns>
            <remarks>This uses the default time out value.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.Read(System.Byte[],System.Int32)">
            <summary>
            Reads from the socket until the array is filled, the optional<paramref name= "length"/>
            is reached, or no more data is coming (because the socket closed or the
            timeout expired).
            </summary>
            <param name="data">The buffer to store the read data into.</param>
            <param name="length">The length to read or -1 to fill the data buffer completely</param>
            <returns>The total number of bytes read.</returns>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">EOF or No Data to read: exception.Message</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the socket until the array is filled, the optional<paramref name= "length"/>
            is reached, or no more data is coming (because the socket closed or the
            timeout expired).
            </summary>
            <param name="data">The buffer to store the read data into.</param>
            <param name="offset">The position to store the received data.</param>
            <param name="length">The length to read or -1 to fill the data buffer completely</param>
            <returns>The total number of bytes read.</returns>
            <exception cref="T:AdvancedSharpAdbClient.Exceptions.AdbException">EOF or No Data to read: exception.Message</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.ReadString">
            <summary>
            Reads a <see cref="T:System.String"/> from an <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> instance.
            </summary>
            <returns>The <see cref="T:System.String"/> received from the <see cref = "T:AdvancedSharpAdbClient.IAdbSocket"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.ReadSyncString">
            <summary>
            Reads a <see cref="T:System.String"/> from an <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> instance when
            the connection is in sync mode.
            </summary>
            <returns>The <see cref="T:System.String"/> received from the <see cref = "T:AdvancedSharpAdbClient.IAdbSocket"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.ReadSyncResponse">
            <summary>
            Reads the response to a sync command.
            </summary>
            <returns>The response that was sent by the device.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.ReadAdbResponse">
            <summary>
            Receives an <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/> message, and throws an error
            if the message does not indicate success.
            </summary>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.AdbResponse"/> object that represents the response from the Android Debug Bridge.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.GetShellStream">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> that can be used to send and receive shell output to and
            from the device.
            </summary>
            <returns>
            A <see cref="T:System.IO.Stream"/> that can be used to send and receive shell output to and
            from the device.
            </returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.SetDevice(AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Ask to switch the connection to the device/emulator identified by
            <paramref name="device"/>. After this request, every client request will
            be sent directly to the adbd daemon running on the device.
            </summary>
            <param name="device">The device to which to connect.</param>
            <remarks>If <paramref name="device"/> is <see langword="null"/>, this method does nothing.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.IAdbSocket.Close">
            <summary>
            Closes the <see cref="T:System.Net.Sockets.Socket"/> connection and releases all associated resources.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.IDeviceMonitor">
            <summary>
            Provides a common interface for any class that allows you to monitor the list of devices that are currently connected to the adb server.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.IDeviceMonitor.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously starts the monitoring.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="E:AdvancedSharpAdbClient.IDeviceMonitor.DeviceChanged">
            <summary>
            Occurs when the status of one of the connected devices has changed.
            </summary>
        </member>
        <member name="E:AdvancedSharpAdbClient.IDeviceMonitor.DeviceNotified">
            <summary>
            Occurs when received a list of device from the Android Debug Bridge.
            </summary>
        </member>
        <member name="E:AdvancedSharpAdbClient.IDeviceMonitor.DeviceConnected">
            <summary>
            Occurs when a device has connected to the Android Debug Bridge.
            </summary>
        </member>
        <member name="E:AdvancedSharpAdbClient.IDeviceMonitor.DeviceListChanged">
            <summary>
            Occurs when the list of the connected devices has changed.
            </summary>
        </member>
        <member name="E:AdvancedSharpAdbClient.IDeviceMonitor.DeviceDisconnected">
            <summary>
            Occurs when a device has disconnected from the Android Debug Bridge.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.IDeviceMonitor.Devices">
            <summary>
            Gets the devices that are currently connected to the Android Debug Bridge.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.IDeviceMonitor.Start">
            <summary>
            Starts the monitoring.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.ISyncService">
            <summary>
            Interface containing methods for file synchronization.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.ISyncService.PushAsync(System.IO.Stream,System.String,AdvancedSharpAdbClient.Models.UnixFileStatus,System.DateTimeOffset,System.Action{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Asynchronously pushes (uploads) a file to the remote device.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that contains the contents of the file.</param>
            <param name="remotePath">The path, on the device, to which to push the file.</param>
            <param name="permissions">The <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/> that contains the permissions of the newly created file on the device.</param>
            <param name="timestamp">The time at which the file was last modified.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications. The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs"/>, representing the state of the file which has been transferred.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ISyncService.PullAsync(System.String,System.IO.Stream,System.Action{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Asynchronously pulls (downloads) a file from the remote device.
            </summary>
            <param name="remotePath">The path, on the device, of the file to pull.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that will receive the contents of the file.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications. The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs"/>, representing the state of the file which has been transferred.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ISyncService.StatAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns information about a file on the device.
            </summary>
            <param name="remotePath">The path of the file on the device.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns a <see cref="T:AdvancedSharpAdbClient.Models.FileStatistics"/> object that contains information about the file.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ISyncService.GetDirectoryListingAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously lists the contents of a directory on the device.
            </summary>
            <param name="remotePath">The path to the directory on the device.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns for each child item of the directory, a <see cref="T:AdvancedSharpAdbClient.Models.FileStatistics"/> object with information of the item.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ISyncService.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously opens this connection.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ISyncService.ReopenAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reopen this connection. Use this when the socket was disconnected by adb and you have restarted adb.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="P:AdvancedSharpAdbClient.ISyncService.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
            <value>
            <see langword="true"/> if this instance is open; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:AdvancedSharpAdbClient.ISyncService.Push(System.IO.Stream,System.String,AdvancedSharpAdbClient.Models.UnixFileStatus,System.DateTimeOffset,System.Action{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Boolean@)">
            <summary>
            Pushes (uploads) a file to the remote device.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that contains the contents of the file.</param>
            <param name="remotePath">The path, on the device, to which to push the file.</param>
            <param name="permissions">The <see cref="T:AdvancedSharpAdbClient.Models.UnixFileStatus"/> that contains the permissions of the newly created file on the device.</param>
            <param name="timestamp">The time at which the file was last modified.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications. The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs"/>, representing the state of the file which has been transferred.</param>
            <param name="isCancelled">A <see cref="T:System.Boolean"/> that can be used to cancel the task.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.ISyncService.Pull(System.String,System.IO.Stream,System.Action{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Boolean@)">
            <summary>
            Pulls (downloads) a file from the remote device.
            </summary>
            <param name="remotePath">The path, on the device, of the file to pull.</param>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that will receive the contents of the file.</param>
            <param name="callback">An optional parameter which, when specified, returns progress notifications. The progress is reported as <see cref="T:AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs"/>, representing the state of the file which has been transferred.</param>
            <param name="isCancelled">A <see cref="T:System.Boolean"/> that can be used to cancel the task.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.ISyncService.Stat(System.String)">
            <summary>
            Returns information about a file on the device.
            </summary>
            <param name="remotePath">The path of the file on the device.</param>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.FileStatistics"/> object that contains information about the file.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ISyncService.GetDirectoryListing(System.String)">
            <summary>
            Lists the contents of a directory on the device.
            </summary>
            <param name="remotePath">The path to the directory on the device.</param>
            <returns>For each child item of the directory, a <see cref="T:AdvancedSharpAdbClient.Models.FileStatistics"/> object with information of the item.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ISyncService.Open">
            <summary>
            Opens this connection.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.ISyncService.Reopen">
            <summary>
            Reopen this connection. Use this when the socket was disconnected by adb and you have restarted adb.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.ITcpSocket">
            <summary>
            Provides an interface that allows access to the standard .NET <see cref="T:System.Net.Sockets.Socket"/>
            class. The main purpose of this interface is to enable mocking of the <see cref="T:System.Net.Sockets.Socket"/>
            in unit test scenarios.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.ConnectAsync(System.Net.EndPoint,System.Threading.CancellationToken)">
            <summary>
            Begins an asynchronous request for a connection to a remote host.
            </summary>
            <param name="endPoint">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.ReconnectAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously re-establishes the connection to a remote host. Assumes you have resolved the reason that caused the
            socket to disconnect.
            </summary>
            <param name="isForce">Force reconnect whatever the socket is connected or not.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.SendAsync(System.Byte[],System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends the specified number of bytes of data to a connected
            <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/> using the specified <paramref name="socketFlags"/>.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the number of bytes sent to the Socket.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.SendAsync(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends the specified number of bytes of data to a connected
            <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/> using the specified <paramref name="socketFlags"/>.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the number of bytes sent to the Socket.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.SendAsync(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends the specified number of bytes of data to a connected
            <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/>, starting at the specified <paramref name="offset"/>,
            and using the specified <paramref name="socketFlags"/>.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to be sent.</param>
            <param name="offset">The position in the data buffer at which to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the number of bytes sent to the Socket.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.ReceiveAsync(System.Byte[],System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously receives the specified number of bytes from a bound <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/>
            using the specified SocketFlags.
            </summary>
            <param name="buffer">An array of type Byte that is the storage location for received data.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <remarks>Cancelling the task will also close the socket.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the number of bytes received.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.ReceiveAsync(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously receives the specified number of bytes from a bound <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/>
            using the specified SocketFlags.
            </summary>
            <param name="buffer">An array of type Byte that is the storage location for received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <remarks>Cancelling the task will also close the socket.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the number of bytes received.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.ReceiveAsync(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously receives the specified number of bytes from a bound <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/>
            into the specified offset position of the receive buffer, using the specified SocketFlags.
            </summary>
            <param name="buffer">An array of type Byte that is the storage location for received data.</param>
            <param name="offset">The location in buffer to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <remarks>Cancelling the task will also close the socket.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the number of bytes received.</returns>
        </member>
        <member name="P:AdvancedSharpAdbClient.ITcpSocket.Connected">
            <summary>
            Gets a value indicating whether a <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/> is connected to a remote host as of the last
            <see cref="M:AdvancedSharpAdbClient.ITcpSocket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)"/> or <see cref="M:AdvancedSharpAdbClient.ITcpSocket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)"/> operation.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.ITcpSocket.ReceiveBufferSize">
            <summary>
            Gets or sets a value that specifies the size of the receive buffer of the <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/>.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote host.
            </summary>
            <param name="endPoint">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.Reconnect(System.Boolean)">
            <summary>
            Re-establishes the connection to a remote host. Assumes you have resolved the reason that caused the
            socket to disconnect.
            </summary>
            <param name="isForce">Force reconnect whatever the socket is connected or not.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Sends the specified number of bytes of data to a connected
            <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/> using the specified <paramref name="socketFlags"/>.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <returns>The number of bytes sent to the Socket.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends the specified number of bytes of data to a connected
            <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/> using the specified <paramref name="socketFlags"/>.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <returns>The number of bytes sent to the Socket.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends the specified number of bytes of data to a connected
            <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/>, starting at the specified <paramref name="offset"/>,
            and using the specified <paramref name="socketFlags"/>.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to be sent.</param>
            <param name="offset">The position in the data buffer at which to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <returns>The number of bytes sent to the Socket.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Receives the specified number of bytes from a bound <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/>
            using the specified SocketFlags.
            </summary>
            <param name="buffer">An array of type Byte that is the storage location for received data.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives the specified number of bytes from a bound <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/>
            using the specified SocketFlags.
            </summary>
            <param name="buffer">An array of type Byte that is the storage location for received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives the specified number of bytes from a bound <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/>
            into the specified offset position of the receive buffer, using the specified SocketFlags.
            </summary>
            <param name="buffer">An array of type Byte that is the storage location for received data.</param>
            <param name="offset">The position in the <paramref name="buffer"/> parameter to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.GetStream">
            <summary>
            Gets the underlying <see cref="T:System.IO.Stream"/>.
            </summary>
            <returns>The underlying stream.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.ITcpSocket.Close">
            <summary>
            Closes the <see cref="T:System.Net.Sockets.Socket"/> connection and releases all associated resources.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.NamespaceDoc">
            <summary>
            <para>
            AdvancedSharpAdbClient is a .NET library that allows.NET applications to communicate with Android devices.
            It provides a.NET implementation of the <c>adb</c> protocol, giving more flexibility to the developer than launching an
            <c>adb.exe</c> process and parsing the console output.
            </para>
            <para>
            Most of the adb functionality is exposed through the <see cref="T:AdvancedSharpAdbClient.AdbClient"/> class.
            You can create your own instance of that class, or just use the instance we provide for you at
            <see cref="P:AdvancedSharpAdbClient.AdbClient.Instance"/>
            </para>
            <para>
            To send and receive files to and from Android devices, you can use the <see cref="T:AdvancedSharpAdbClient.SyncService"/> class.
            </para>
            <para>
            To be notified when Android devices connect to or disconnect from your PC, you can use the <see cref="T:AdvancedSharpAdbClient.DeviceMonitor"/>
            class.
            </para>
            </summary>
            <example>
            <para>
            To list all Android devices that are connected to your PC, you can use the following code:
            </para>
            <code>
            var devices = devices = new AdbClient().GetDevices();
            foreach (var device in devices)
            {
                Console.WriteLine(device.Name);
            }
            </code>
            </example>
            <remarks>
            <c>
            Copyright (c) The Android Open Source Project, Ryan Conrad, Quamotion, yungd1plomat, wherewhere. All rights reserved.
            </c>
            </remarks>
        </member>
        <member name="T:AdvancedSharpAdbClient.Polyfills.DateTimeExtensions">
            <summary>
            Provides helper methods for working with Unix-based date formats.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Polyfills.DateTimeExtensions.Epoch">
            <summary>
            Gets EPOCH time.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.DateTimeExtensions.FromUnixTimeSeconds(System.Int64)">
            <summary>
            Converts a Unix time expressed as the number of seconds that have elapsed
            since 1970-01-01T00:00:00Z to a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="seconds">A Unix time, expressed as the number of seconds that have elapsed
            since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date,
            its value is negative.</param>
            <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="seconds"/> is less than -62,135,596,800.
            <para>-or-</para><paramref name="seconds"/> is greater than 253,402,300,799.</exception>
            <remarks>The Offset property value of the returned <see cref="T:System.DateTimeOffset"/> instance is
            <see cref="F:System.TimeSpan.Zero"/>, which represents Coordinated Universal Time. You can convert it to the time in
            a specific time zone by calling the <see cref="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)"/> method.</remarks>
        </member>
        <member name="T:AdvancedSharpAdbClient.Polyfills.EnumerableExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Linq.Enumerable"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.EnumerableExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to be added.</param>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            The collection itself cannot be <see langword="null"/>, but it can contain elements that are
            <see langword="null"/>, if type <typeparamref name="TSource"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.EnumerableExtensions.ToArrayAsync``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Asynchronously creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Threading.Tasks.Task`1"/> to create an array from.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns an array that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.EnumerableExtensions.ToArrayAsync``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Threading.Tasks.Task`1"/> to create an array from.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns an array that contains the elements from the input sequence.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Polyfills.EnumExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Enum"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.EnumExtensions.TryParse``1(System.String,System.Boolean,``0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more
            enumerated constants to an equivalent enumerated object. A parameter specifies
            whether the operation is case-sensitive. The return value indicates whether the
            conversion succeeded.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert <paramref name="value"/>.</typeparam>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to consider case.</param>
            <param name="result">When this method returns, contains an object of type <typeparamref name="TEnum"/> whose
            value is represented by <paramref name="value"/> if the parse operation succeeds. If the parse operation fails,
            contains the default value of the underlying type of <typeparamref name="TEnum"/>. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the value parameter was converted successfully; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="TEnum"/> is not an enumeration type.</exception>
        </member>
        <member name="T:AdvancedSharpAdbClient.Polyfills.ExceptionExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.ExceptionExtensions.ThrowIfNull(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="argument"/> is null.
            </summary>
            <param name="argument">The reference type argument to validate as non-null.</param>
            <param name="paramName">The name of the parameter with which <paramref name="argument"/> corresponds.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.ExceptionExtensions.ThrowIfGreaterThan``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="value"/> is greater than <paramref name="other"/>.
            </summary>
            <param name="value">The argument to validate as less or equal than <paramref name="other"/>.</param>
            <param name="other">The value to compare with <paramref name="value"/>.</param>
            <param name="paramName">The name of the parameter with which <paramref name="value"/> corresponds.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.ExceptionExtensions.ThrowIfLessThan``1(``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="value"/> is less than <paramref name="other"/>.
            </summary>
            <param name="value">The argument to validate as greater than or equal than <paramref name="other"/>.</param>
            <param name="other">The value to compare with <paramref name="value"/>.</param>
            <param name="paramName">The name of the parameter with which <paramref name="value"/> corresponds.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.ExceptionExtensions.ThrowIfNegative``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="value"/> is negative.
            </summary>
            <param name="value">The argument to validate as non-negative.</param>
            <param name="paramName">The name of the parameter with which <paramref name="value"/> corresponds.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.ExceptionExtensions.ThrowIf(System.Boolean,System.Object)">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if the specified <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="instance">The object whose type's full name should be included in any resulting <see cref="T:System.ObjectDisposedException"/>.</param>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="condition"/> is <see langword="true"/>.</exception>
        </member>
        <member name="T:AdvancedSharpAdbClient.Polyfills.SocketExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Net.Sockets.Socket"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.SocketExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously receives data from a connected socket.
            </summary>
            <param name="socket">The socket from which to read data.</param>
            <param name="buffer">An array of type <see cref="T:System.Byte"/> that is the storage location for the received data.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <remarks>Cancelling the task will also close the socket.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the number of bytes received.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.SocketExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously receives data from a connected socket.
            </summary>
            <param name="socket">The socket from which to read data.</param>
            <param name="buffer">An array of type <see cref="T:System.Byte"/> that is the storage location for the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <remarks>Cancelling the task will also close the socket.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the number of bytes received.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.SocketExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously receives data from a connected socket.
            </summary>
            <param name="socket">The socket from which to read data.</param>
            <param name="buffer">An array of type <see cref="T:System.Byte"/> that is the storage location for the received data.</param>
            <param name="offset">The zero-based position in the <paramref name="buffer"/> parameter at which to start storing data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <remarks>Cancelling the task will also close the socket.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the number of bytes received.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.SocketExtensions.SendAsync(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends data to a connected socket.
            </summary>
            <param name="socket">The socket from which to send data.</param>
            <param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <remarks>Cancelling the task will also close the socket.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the number of bytes sent.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.SocketExtensions.SendAsync(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends data to a connected socket.
            </summary>
            <param name="socket">The socket from which to send data.</param>
            <param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <remarks>Cancelling the task will also close the socket.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the number of bytes sent.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.SocketExtensions.SendAsync(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends data to a connected socket.
            </summary>
            <param name="socket">The socket from which to send data.</param>
            <param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the data to be sent.</param>
            <param name="offset">The position in the data buffer at which to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <remarks>Cancelling the task will also close the socket.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns the number of bytes sent.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Polyfills.StringExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.String"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is <see langword="null"/>, empty, or consists only of white-space characters.
            </summary>
            <param name="value">The string to test.</param>
            <returns><see langword="true"/> if the <paramref name="value"/> parameter is <see langword="null"/> or
            <see cref="F:System.String.Empty"/>, or if <paramref name="value"/> consists exclusively of white-space characters.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether a specified string occurs within this string, using the specified comparison rules.
            </summary>
            <param name="text">A sequence in which to locate a value.</param>
            <param name="value">The string to seek.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns><see langword="true"/> if the <paramref name="value"/> parameter occurs within this string,
            or if <paramref name="value"/> is the empty string (""); otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.StringExtensions.Split(System.String,System.Char,System.StringSplitOptions)">
            <summary>
            Splits a string into substrings based on a specified delimiting character and, optionally, options.
            </summary>
            <param name="text">The string to split.</param>
            <param name="separator">A character that delimits the substrings in this string.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim substrings and include empty substrings.</param>
            <returns>An array whose elements contain the substrings from this instance that are delimited by <paramref name="separator"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.StringExtensions.Split(System.String,System.Char,System.Int32,System.StringSplitOptions)">
            <summary>
            Splits a string into a maximum number of substrings based on a specified delimiting
            character and, optionally, options. Splits a string into a maximum number of
            substrings based on the provided character separator, optionally omitting empty
            substrings from the result.
            </summary>
            <param name="text">The string to split.</param>
            <param name="separator">A character that delimits the substrings in this string.</param>
            <param name="count">The maximum number of elements expected in the array.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim substrings and include empty substrings.</param>
            <returns>An array that contains at most count substrings from this instance that are delimited by <paramref name="separator"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.StringExtensions.StartsWith(System.String,System.Char)">
            <summary>
            Determines whether this string instance starts with the specified character.
            </summary>
            <param name="text">A sequence in which to locate a value.</param>
            <param name="value">The character to compare.</param>
            <returns><see langword="true"/> if <paramref name="value"/> matches the beginning of this string; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.StringExtensions.EndsWith(System.String,System.Char)">
            <summary>
            Determines whether the end of this string instance matches the specified character.
            </summary>
            <param name="text">A sequence in which to locate a value.</param>
            <param name="value">The character to compare to the character at the end of this instance.</param>
            <returns><see langword="true"/> if <paramref name="value"/> matches the end of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.StringExtensions.Join(System.Char,System.Object[])">
            <summary>
            Concatenates the string representations of an array of objects, using the specified separator between each member.
            </summary>
            <param name="separator">The string to use as a separator. <paramref name="separator"/> is included
            in the returned string only if <paramref name="values"/> has more than one element.</param>
            <param name="values">An array of objects whose string representations will be concatenated.</param>
            <returns>A string that consists of the elements of <paramref name="values"/> delimited by the
            <paramref name="separator"/> string.<para>-or-</para><see cref="F:System.String.Empty"/> if values has zero elements.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.StringExtensions.Join(System.Char,System.String[])">
            <summary>
            Concatenates an array of strings, using the specified separator between each member.
            </summary>
            <param name="separator">The string to use as a separator. <paramref name="separator"/> is included
            in the returned string only if <paramref name="value"/> has more than one element.</param>
            <param name="value">An array of strings to concatenate.</param>
            <returns>A string that consists of the elements of <paramref name="value"/> delimited by the
            <paramref name="separator"/> string.<para>-or-</para><see cref="F:System.String.Empty"/> if values has zero elements.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.StringExtensions.Join(System.String,System.Object[])">
            <summary>
            Concatenates the elements of an object array, using the specified separator between each element.
            </summary>
            <param name="separator">The string to use as a separator. <paramref name="separator"/> is included
            in the returned string only if <paramref name="values"/> has more than one element.</param>
            <param name="values">An array that contains the elements to concatenate.</param>
            <returns>A string that consists of the elements of <paramref name="values"/> delimited by the
            <paramref name="separator"/> string.<para>-or-</para><see cref="F:System.String.Empty"/> if values has zero elements.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.StringExtensions.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            </summary>
            <typeparam name="T">The type of the members of values.</typeparam>
            <param name="separator">The string to use as a separator. <paramref name="separator"/> is included
            in the returned string only if <paramref name="values"/> has more than one element.</param>
            <param name="values">A collection that contains the objects to concatenate.</param>
            <returns>A string that consists of the elements of <paramref name="values"/> delimited by the
            <paramref name="separator"/> string.<para>-or-</para><see cref="F:System.String.Empty"/> if values has zero elements.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.StringExtensions.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type <see cref="T:System.String"/>,
            using the specified separator between each member.
            </summary>
            <param name="separator">The string to use as a separator. <paramref name="separator"/> is included
            in the returned string only if <paramref name="values"/> has more than one element.</param>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>A string that consists of the elements of <paramref name="values"/> delimited by the
            <paramref name="separator"/> string.<para>-or-</para><see cref="F:System.String.Empty"/> if values has zero elements.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Polyfills.TaskExExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Threading.Tasks.Task"/> class.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Polyfills.TaskExExtensions.CompletedTask">
            <summary>
            Gets a task that's already been completed successfully.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.TaskExExtensions.Delay(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a task that completes after a specified number of milliseconds.
            </summary>
            <param name="dueTime">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <returns>A task that represents the time delay.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime"/> argument is less than -1.</exception>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.TaskExExtensions.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task"/> objects in an enumerable collection have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.TaskExExtensions.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1"/> objects in an enumerable collection have completed.
            </summary>
            <typeparam name="TResult">The type of the completed task.</typeparam>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.TaskExExtensions.FromResult``1(``0)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task`1"/> that's completed successfully with the specified result.
            </summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="result">The result to store into the completed task.</param>
            <returns>The successfully completed task.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.TaskExExtensions.AwaitByTaskCompleteSource(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Wait a <see cref="T:System.Threading.Tasks.Task"/> synchronously by <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>.
            </summary>
            <param name="function">The <see cref="T:System.Threading.Tasks.Task"/> to wait.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the work if it has not yet started.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.TaskExExtensions.AwaitByTaskCompleteSource``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Wait a <see cref="T:System.Threading.Tasks.Task`1"/> synchronously by <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> and return the result.
            </summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="function">The <see cref="T:System.Threading.Tasks.Task`1"/> to wait.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the work if it has not yet started.</param>
            <returns>The result of the completed task.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Polyfills.ICloneable`1">
            <summary>
            Supports cloning, which creates a new instance of a class with the same value as an existing instance.
            </summary>
            <typeparam name="T">The type of the class.</typeparam>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.ICloneable`1.Clone">
            <summary>
            Creates a new <typeparamref name="T"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <typeparamref name="T"/> object that is a copy of this instance.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Polyfills.IDisposableWithTask">
            <summary>
            Provides a mechanism for releasing unmanaged resources asynchronously.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Polyfills.IDisposableWithTask.DisposeAsync">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources asynchronously.
            </summary>
            <returns>A task that represents the asynchronous dispose operation.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Polyfills.NamespaceDoc">
            <summary>
            The classes in this namespace provide polyfills.
            </summary>
            <remarks><c>Copyright (c) The Android Open Source Project, Ryan Conrad, Quamotion, yungd1plomat, wherewhere. All rights reserved.</c></remarks>
        </member>
        <member name="T:AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver">
            <summary>
            Receives console output, and makes the console output available as a <see cref="T:System.String"/>. To
            fetch the console output that was received, used the <see cref="M:AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver.ToString"/> method.
            </summary>
            <param name="logger">The logger to use when logging.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver.#ctor(AdvancedSharpAdbClient.Logs.ILogger{AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver})">
            <summary>
            Receives console output, and makes the console output available as a <see cref="T:System.String"/>. To
            fetch the console output that was received, used the <see cref="M:AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver.ToString"/> method.
            </summary>
            <param name="logger">The logger to use when logging.</param>
        </member>
        <member name="F:AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver.DefaultRegexOptions">
            <summary>
            The default <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when parsing the output.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver.logger">
            <summary>
            The logger to use when logging messages.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver.Output">
            <summary>
            A <see cref="T:System.Text.StringBuilder"/> which receives all output from the device.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver.ToString">
            <summary>
            Gets a <see cref="T:System.String"/> that represents the current <see cref="T:AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver.ThrowOnError(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver.ProcessNewLines(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver.AbortingRegex">
            <summary>
            Gets a <see cref="T:System.Text.RegularExpressions.Regex"/> which matches lines which indicate that the command was aborted.
            </summary>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> which matches lines which indicate that the command was aborted.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver.AppletRegex">
            <summary>
            Gets a <see cref="T:System.Text.RegularExpressions.Regex"/> which matches lines which indicate that the applet was not found.
            </summary>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> which matches lines which indicate that the applet was not found.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.ConsoleOutputReceiver.DeniedRegex">
            <summary>
            Gets a <see cref="T:System.Text.RegularExpressions.Regex"/> which matches lines which indicate that the permission to execute the command was denied.
            </summary>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> which matches lines which indicate that the permission to execute the command was denied.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.Receivers.FunctionOutputReceiver">
            <summary>
            Provides a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> which calls a function for each line of output
            </summary>
            <param name="predicate">The function to call for each line of output</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.FunctionOutputReceiver.AddOutputAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.FunctionOutputReceiver.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.FunctionOutputReceiver.#ctor(System.Func{System.String,System.Boolean})">
            <summary>
            Provides a <see cref="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver"/> which calls a function for each line of output
            </summary>
            <param name="predicate">The function to call for each line of output</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.FunctionOutputReceiver.AddOutput(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.FunctionOutputReceiver.Flush">
            <inheritdoc/>
        </member>
        <member name="T:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver">
            <summary>
            This interface contains various receivers that are able to parse Android console output. You can use
            the receivers in combination with the <see cref="M:AdvancedSharpAdbClient.AdbClient.ExecuteRemoteCommand(System.String,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding)"/>
            method to capture the output of any Android command.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver.AddOutputAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a line to the output.
            </summary>
            <param name="line">The line to add to the output.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns <see langword="true"/> if continue receive messages; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously flushes the output.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <remarks>This should always be called at the end of the "process" in order to indicate that the data is ready to be processed further if needed.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver.AddOutput(System.String)">
            <summary>
            Adds a line to the output.
            </summary>
            <param name="line">The line to add to the output.</param>
            <returns><see langword="true"/> if continue receive messages; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.IShellOutputReceiver.Flush">
            <summary>
            Flushes the output.
            </summary>
            <remarks>This should always be called at the end of the "process" in order to indicate that the data is ready to be processed further if needed.</remarks>
        </member>
        <member name="T:AdvancedSharpAdbClient.Receivers.MultiLineReceiver">
            <summary>
            A multiline receiver to receive and process shell output with multi lines.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.MultiLineReceiver.AddOutputAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.MultiLineReceiver.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.MultiLineReceiver.ThrowOnErrorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously throws an error message if the console output line contains an error message.
            </summary>
            <param name="line">The line to inspect.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.MultiLineReceiver.ProcessNewLinesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.MultiLineReceiver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Receivers.MultiLineReceiver"/> class.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.Receivers.MultiLineReceiver.TrimLines">
            <summary>
            Gets or sets a value indicating whether [trim lines].
            </summary>
            <value><see langword="true"/> if [trim lines]; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:AdvancedSharpAdbClient.Receivers.MultiLineReceiver.ParsesErrors">
            <summary>
            Gets or sets a value indicating whether the receiver parses error messages.
            </summary>
            <value><see langword="true"/> if this receiver parsers error messages; otherwise <see langword="false"/>.</value>
            <remarks>The default value is <see langword="true"/>. If set to <see langword="true"/>, the <see cref="T:AdvancedSharpAdbClient.AdbClient"/>
            will detect common error messages and throw an exception.</remarks>
        </member>
        <member name="P:AdvancedSharpAdbClient.Receivers.MultiLineReceiver.Lines">
            <summary>
            Gets or sets the lines.
            </summary>
            <value>The lines.</value>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.MultiLineReceiver.AddOutput(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.MultiLineReceiver.Flush">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.MultiLineReceiver.ThrowOnError(System.String)">
            <summary>
            Throws an error message if the console output line contains an error message.
            </summary>
            <param name="line">The line to inspect.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.MultiLineReceiver.ProcessNewLines(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Processes the new lines.
            </summary>
            <param name="lines">The lines.</param>
        </member>
        <member name="T:AdvancedSharpAdbClient.Receivers.NamespaceDoc">
            <summary>
            The classes in this namespace provide receivers for <see cref="M:AdvancedSharpAdbClient.AdbClient.ExecuteRemoteCommand(System.String,AdvancedSharpAdbClient.Models.DeviceData,AdvancedSharpAdbClient.Receivers.IShellOutputReceiver,System.Text.Encoding)"/>.
            </summary>
            <remarks><c>Copyright (c) The Android Open Source Project, Ryan Conrad, Quamotion, yungd1plomat, wherewhere. All rights reserved.</c></remarks>
        </member>
        <member name="T:AdvancedSharpAdbClient.Receivers.ShellOutputReceiver">
            <summary>
            A multiline receiver to receive and process shell output with multi lines.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.ShellOutputReceiver.AddOutputAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.ShellOutputReceiver.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.ShellOutputReceiver.DoneAsync(System.Threading.CancellationToken)">
            <summary>
            Finishes the receiver asynchronously.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.ShellOutputReceiver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.Receivers.ShellOutputReceiver"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.ShellOutputReceiver.AddOutput(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.ShellOutputReceiver.Flush">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.Receivers.ShellOutputReceiver.Done">
            <summary>
            Finishes the receiver.
            </summary>
        </member>
        <member name="T:AdvancedSharpAdbClient.SyncService">
             <summary>
             Provides access to the sync service running on the Android device. Allows you to
             list, download and upload files on the device.
             </summary>
             <example>
             <para>To send files to or receive files from your Android device, you can use the following code:</para>
             <code>
             void DownloadFile()
             {
                 var device = new AdbClient().GetDevices().First();
            
                 using (SyncService service = new SyncService(new AdbSocket(), device))
                 using (Stream stream = File.OpenWrite(@"C:\MyFile.txt"))
                 {
                     service.Pull("/data/MyFile.txt", stream, null, CancellationToken.None);
                 }
             }
            
             void UploadFile()
             {
                 var device = new AdbClient().GetDevices().First();
            
                 using (SyncService service = new SyncService(new AdbSocket(), device))
                 using (Stream stream = File.OpenRead(@"C:\MyFile.txt"))
                 {
                     service.Push(stream, "/data/MyFile.txt", null, CancellationToken.None);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.OpenAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
            <remarks>This method has been invoked by the constructor.
            Do not use it unless you have closed the connection.
            Use <see cref="M:AdvancedSharpAdbClient.SyncService.ReopenAsync(System.Threading.CancellationToken)"/> to reopen the connection.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.ReopenAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.PushAsync(System.IO.Stream,System.String,AdvancedSharpAdbClient.Models.UnixFileStatus,System.DateTimeOffset,System.Action{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.PullAsync(System.String,System.IO.Stream,System.Action{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.StatAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.GetDirectoryListingAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.ReadStatisticsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the statistics of a file from the socket.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which returns a <see cref="T:AdvancedSharpAdbClient.Models.FileStatistics"/> object that contains information about the file.</returns>
        </member>
        <member name="F:AdvancedSharpAdbClient.SyncService.MaxPathLength">
            <summary>
            The maximum length of a path on the remote device.
            </summary>
        </member>
        <member name="F:AdvancedSharpAdbClient.SyncService.IsOutdate">
            <summary>
            <see langword="true"/> if the <see cref="T:AdvancedSharpAdbClient.SyncService"/> is out of date; otherwise, <see langword="false"/>.
            </summary>
            <remarks>Need to invoke <see cref="M:AdvancedSharpAdbClient.SyncService.Reopen"/> before using the <see cref="T:AdvancedSharpAdbClient.SyncService"/> again.</remarks>
        </member>
        <member name="F:AdvancedSharpAdbClient.SyncService.IsProcessing">
            <summary>
            <see langword="true"/> if the <see cref="T:AdvancedSharpAdbClient.SyncService"/> is processing; otherwise, <see langword="false"/>.
            </summary>
            <remarks>Recommend to <see cref="M:AdvancedSharpAdbClient.SyncService.Clone"/> a new <see cref="T:AdvancedSharpAdbClient.ISyncService"/> or wait until the process is finished.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.#ctor(AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.SyncService"/> class.
            </summary>
            <param name="device">The device on which to interact with the files.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.#ctor(AdvancedSharpAdbClient.IAdbClient,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.SyncService"/> class.
            </summary>
            <param name="client">A connection to an adb server.</param>
            <param name="device">The device on which to interact with the files.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.#ctor(System.Net.EndPoint,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.SyncService"/> class.
            </summary>
            <param name="endPoint">The <see cref="T:System.Net.EndPoint"/> at which the adb server is listening.</param>
            <param name="device">The device on which to interact with the files.</param>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.#ctor(AdvancedSharpAdbClient.IAdbSocket,AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.SyncService"/> class.
            </summary>
            <param name="socket">A <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> that enables to connection with the adb server.</param>
            <param name="device">The device on which to interact with the files.</param>
        </member>
        <member name="P:AdvancedSharpAdbClient.SyncService.MaxBufferSize">
            <summary>
            Gets or sets the maximum size of data to transfer between the device and the PC in one block.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.SyncService.Device">
            <summary>
            Gets the device on which the file operations are being executed.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.SyncService.Socket">
            <summary>
            Gets the <see cref="T:AdvancedSharpAdbClient.IAdbSocket"/> that enables the connection with the adb server.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.SyncService.IsOpen">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.Open">
            <inheritdoc/>
            <remarks>This method has been invoked by the constructor.
            Do not use it unless you have closed the connection.
            Use <see cref="M:AdvancedSharpAdbClient.SyncService.Reopen"/> to reopen the connection.</remarks>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.Reopen">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.Push(System.IO.Stream,System.String,AdvancedSharpAdbClient.Models.UnixFileStatus,System.DateTimeOffset,System.Action{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.Pull(System.String,System.IO.Stream,System.Action{AdvancedSharpAdbClient.Models.SyncProgressChangedEventArgs},System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.Stat(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.GetDirectoryListing(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.Clone(AdvancedSharpAdbClient.Models.DeviceData)">
            <summary>
            Creates a new <see cref="T:AdvancedSharpAdbClient.SyncService"/> object that is a copy of the current instance with new <see cref="P:AdvancedSharpAdbClient.SyncService.Device"/>.
            </summary>
            <param name="device">The new <see cref="P:AdvancedSharpAdbClient.SyncService.Device"/> to use.</param>
            <returns>A new <see cref="T:AdvancedSharpAdbClient.SyncService"/> object that is a copy of this instance with new <see cref="P:AdvancedSharpAdbClient.SyncService.Device"/>.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.Clone">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.SyncService.ReadStatistics">
            <summary>
            Reads the statistics of a file from the socket.
            </summary>
            <returns>A <see cref="T:AdvancedSharpAdbClient.Models.FileStatistics"/> object that contains information about the file.</returns>
        </member>
        <member name="T:AdvancedSharpAdbClient.TcpSocket">
            <summary>
            Implements the <see cref="T:AdvancedSharpAdbClient.ITcpSocket"/> interface using the standard <see cref="T:System.Net.Sockets.Socket"/> class.
            </summary>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.ConnectAsync(System.Net.EndPoint,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.ReconnectAsync(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.ReconnectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously re-establishes the connection to a remote host. Assumes you have resolved the reason that caused the
            socket to disconnect.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the asynchronous task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.SendAsync(System.Byte[],System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.SendAsync(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.SendAsync(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.ReceiveAsync(System.Byte[],System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.ReceiveAsync(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.ReceiveAsync(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdvancedSharpAdbClient.TcpSocket"/> class.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.TcpSocket.Socket">
            <summary>
            The underlying socket that manages the connection.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.TcpSocket.EndPoint">
            <summary>
            The <see cref="T:System.Net.EndPoint"/> at which the socket is listening.
            </summary>
        </member>
        <member name="P:AdvancedSharpAdbClient.TcpSocket.Connected">
            <inheritdoc/>
        </member>
        <member name="P:AdvancedSharpAdbClient.TcpSocket.ReceiveBufferSize">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.Connect(System.Net.EndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.Reconnect(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.Close">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.GetStream">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.Clone">
            <inheritdoc/>
        </member>
        <member name="M:AdvancedSharpAdbClient.TcpSocket.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="T:System.Range">
            <summary>
            Represent a range has start and end indexes.
            </summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>
            Represent the inclusive start index of the Range.
            </summary>
        </member>
        <member name="P:System.Range.End">
            <summary>
            Represent the exclusive end index of the Range.
            </summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>
            Construct a Range object using the start and end indexes.
            </summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>
            Indicates whether the current Range object is equal to another object of the same type.
            </summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>
            Indicates whether the current Range object is equal to another Range object.
            </summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>
            Converts the value of the current Range object to its equivalent string representation.
            </summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>
            Create a Range object starting from start index to the end of the collection.
            </summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>
            Create a Range object starting from first element in the collection to the end Index.
            </summary>
        </member>
        <member name="P:System.Range.All">
            <summary>
            Create a Range object starting from first element to the end.
            </summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>
            Calculate the start offset and length of range object using a collection length.
            </summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler">
            <summary>
            Provides a handler used by the language compiler to process interpolated strings into <see cref="T:System.String"/> instances.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.GuessedLengthPerHole">
            <summary>
            Expected average length of formatted data used for an individual interpolation expression result.
            </summary>
            <remarks>
            This is inherited from string.Format, and could be changed based on further data.
            string.Format actually uses `format.Length + args.Length * 8`, but format.Length
            includes the format items themselves, e.g. "{0}", and since it's rare to have double-digit
            numbers of items, we bump the 8 up to 11 to account for the three extra characters in "{d}",
            since the compiler-provided base length won't include the equivalent character count.
            </remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.MinimumArrayPoolLength">
            <summary>
            Minimum size array to rent from the pool.
            </summary>
            <remarks>Same as stack-allocation size used today by string.Format.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler._provider">
            <summary>
            Optional provider to pass to IFormattable.ToString or ISpanFormattable.TryFormat calls.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler._builder">
            <summary>
            The <see cref="T:System.Text.StringBuilder"/> used to build the string.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler._hasCustomFormatter">
            <summary>
            Whether <see cref="F:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler._provider"/> provides an ICustomFormatter.
            </summary>
            <remarks>
            Custom formatters are very rare.  We want to support them, but it's ok if we make them more expensive
            in order to make them as pay-for-play as possible.  So, we avoid adding another reference type field
            to reduce the size of the handler and to reduce required zero'ing, by only storing whether the provider
            provides a formatter, rather than actually storing the formatter.  This in turn means, if there is a
            formatter, we pay for the extra interface call on each AppendFormatted that needs it.
            </remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.#ctor">
            <summary>
            Creates a handler used to translate an interpolated string into a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a handler used to translate an interpolated string into a <see cref="T:System.String"/>.
            </summary>
            <param name="literalLength">The number of constant characters outside of interpolation expressions in the interpolated string.</param>
            <param name="formattedCount">The number of interpolation expressions in the interpolated string.</param>
            <remarks>This is intended to be called only by compiler-generated code. Arguments are not validated as they'd otherwise be for members intended to be used directly.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.#ctor(System.Int32,System.Int32,System.IFormatProvider)">
            <summary>
            Creates a handler used to translate an interpolated string into a <see cref="T:System.String"/>.
            </summary>
            <param name="literalLength">The number of constant characters outside of interpolation expressions in the interpolated string.</param>
            <param name="formattedCount">The number of interpolation expressions in the interpolated string.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <remarks>This is intended to be called only by compiler-generated code. Arguments are not validated as they'd otherwise be for members intended to be used directly.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.GetDefaultLength(System.Int32,System.Int32)">
            <summary>Derives a default length with which to seed the handler.</summary>
            <param name="literalLength">The number of constant characters outside of interpolation expressions in the interpolated string.</param>
            <param name="formattedCount">The number of interpolation expressions in the interpolated string.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.ToString">
            <summary>
            Gets the built <see cref="T:System.String"/>.
            </summary>
            <returns>The built string.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.ToStringAndClear">
            <summary>
            Gets the built <see cref="T:System.String"/> and clears the handler.
            </summary>
            <returns>The built string.</returns>
            <remarks>
            This releases any resources used by the handler. The method should be invoked only
            once and as the last thing performed on the handler. Subsequent use is erroneous, ill-defined,
            and may destabilize the process, as may using any other copies of the handler after ToStringAndClear
            is called on any one of them.
            </remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.AppendLiteral(System.String)">
            <summary>
            Writes the specified string to the handler.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.AppendFormatted``1(``0)">
            <summary>
            Writes the specified value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <typeparam name="T">The type of the value to write.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.AppendFormatted``1(``0,System.String)">
            <summary>
            Writes the specified value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <param name="format">The format string.</param>
            <typeparam name="T">The type of the value to write.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.AppendFormatted``1(``0,System.Int32)">
            <summary>
            Writes the specified value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <param name="alignment">Minimum number of characters that should be written for this value.  If the value is negative, it indicates left-aligned and the required minimum is the absolute value.</param>
            <typeparam name="T">The type of the value to write.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.AppendFormatted``1(``0,System.Int32,System.String)">
            <summary>
            Writes the specified value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <param name="format">The format string.</param>
            <param name="alignment">Minimum number of characters that should be written for this value.  If the value is negative, it indicates left-aligned and the required minimum is the absolute value.</param>
            <typeparam name="T">The type of the value to write.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.AppendFormatted(System.String)">
            <summary>
            Writes the specified value to the handler.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.AppendFormatted(System.String,System.Int32,System.String)">
            <summary>
            Writes the specified value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <param name="alignment">Minimum number of characters that should be written for this value.  If the value is negative, it indicates left-aligned and the required minimum is the absolute value.</param>
            <param name="format">The format string.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.AppendFormatted(System.Object,System.Int32,System.String)">
            <summary>
            Writes the specified value to the handler.
            </summary>
            <param name="value">The value to write.</param>
            <param name="alignment">Minimum number of characters that should be written for this value.  If the value is negative, it indicates left-aligned and the required minimum is the absolute value.</param>
            <param name="format">The format string.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.HasCustomFormatter(System.IFormatProvider)">
            <summary>
            Gets whether the provider provides a custom formatter.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.AppendCustomFormatter``1(``0,System.String)">
            <summary>
            Formats the value using the custom formatter from the provider.
            </summary>
            <param name="value">The value to write.</param>
            <param name="format">The format string.</param>
            <typeparam name="T">The type of the value to write.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.AppendOrInsertAlignmentIfNeeded(System.Int32,System.Int32)">
            <summary>
            Handles adding any padding required for aligning a formatted value in an interpolation expression.
            </summary>
            <param name="startingPos">The position at which the written value started.</param>
            <param name="alignment">Non-zero minimum number of characters that should be written for this value.  If the value is negative, it indicates left-aligned and the required minimum is the absolute value.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.StackTraceHiddenAttribute">
            <summary>
            Types and Methods attributed with StackTraceHidden will be omitted from the stack trace text shown in StackTrace.ToString()
            and Exception.StackTrace
            </summary>
        </member>
        <member name="M:System.Diagnostics.StackTraceHiddenAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.StackTraceHiddenAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
    </members>
</doc>
